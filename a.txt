# 1 "kernel/evl/init.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "kernel/evl/init.c"






# 1 "include/linux/init.h" 1




# 1 "include/linux/compiler.h" 1




# 1 "include/linux/compiler_types.h" 1
# 6 "include/linux/compiler.h" 2
# 232 "include/linux/compiler.h"
static inline void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 248 "include/linux/compiler.h"
# 1 "arch/arm64/include/asm/rwonce.h" 1
# 71 "arch/arm64/include/asm/rwonce.h"
# 1 "include/asm-generic/rwonce.h" 1
# 26 "include/asm-generic/rwonce.h"
# 1 "include/linux/kasan-checks.h" 1




# 1 "include/linux/types.h" 1





# 1 "include/uapi/linux/types.h" 1




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4




# 1 "include/uapi/asm-generic/types.h" 1 3 4






# 1 "include/asm-generic/int-ll64.h" 1 3 4
# 11 "include/asm-generic/int-ll64.h" 3 4
# 1 "include/uapi/asm-generic/int-ll64.h" 1 3 4
# 12 "include/uapi/asm-generic/int-ll64.h" 3 4
# 1 "arch/arm64/include/uapi/asm/bitsperlong.h" 1 3 4
# 22 "arch/arm64/include/uapi/asm/bitsperlong.h" 3 4
# 1 "include/asm-generic/bitsperlong.h" 1 3 4




# 1 "include/uapi/asm-generic/bitsperlong.h" 1 3 4
# 6 "include/asm-generic/bitsperlong.h" 2 3 4
# 23 "arch/arm64/include/uapi/asm/bitsperlong.h" 2 3 4
# 13 "include/uapi/asm-generic/int-ll64.h" 2 3 4








# 20 "include/uapi/asm-generic/int-ll64.h" 3 4
typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "include/asm-generic/int-ll64.h" 2 3 4




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 8 "include/uapi/asm-generic/types.h" 2 3 4
# 6 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "include/uapi/linux/types.h" 2
# 14 "include/uapi/linux/types.h"
# 1 "include/uapi/linux/posix_types.h" 1




# 1 "include/linux/stddef.h" 1




# 1 "include/uapi/linux/stddef.h" 1
# 6 "include/linux/stddef.h" 2





# 10 "include/linux/stddef.h"
enum {
 false = 0,
 true = 1
};
# 6 "include/uapi/linux/posix_types.h" 2
# 25 "include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "arch/arm64/include/uapi/asm/posix_types.h" 1




typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


# 1 "include/uapi/asm-generic/posix_types.h" 1
# 15 "include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 59 "include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_old_dev_t;
# 72 "include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;

typedef __kernel_long_t __kernel_time_t;

typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 10 "arch/arm64/include/uapi/asm/posix_types.h" 2
# 37 "include/uapi/linux/posix_types.h" 2
# 15 "include/uapi/linux/types.h" 2
# 29 "include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ulong_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;
# 46 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
# 55 "include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 125 "include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 145 "include/linux/types.h"
typedef u32 dma_addr_t;


typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;




typedef u32 phys_addr_t;


typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;
# 178 "include/linux/types.h"
struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;



 unsigned long f_tinode;

 char f_fname[6];
 char f_fpack[6];
};
# 220 "include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);

typedef void (*swap_func_t)(void *a, void *b, int size);

typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
typedef int (*cmp_func_t)(const void *a, const void *b);
# 6 "include/linux/kasan-checks.h" 2
# 22 "include/linux/kasan-checks.h"
static inline bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 40 "include/linux/kasan-checks.h"
static inline bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 27 "include/asm-generic/rwonce.h" 2
# 1 "include/linux/kcsan-checks.h" 1
# 13 "include/linux/kcsan-checks.h"
# 1 "include/linux/compiler_attributes.h" 1
# 14 "include/linux/kcsan-checks.h" 2
# 148 "include/linux/kcsan-checks.h"
static inline void __kcsan_check_access(const volatile void *ptr, size_t size,
     int type) { }

static inline void kcsan_disable_current(void) { }
static inline void kcsan_enable_current(void) { }
static inline void kcsan_enable_current_nowarn(void) { }
static inline void kcsan_nestable_atomic_begin(void) { }
static inline void kcsan_nestable_atomic_end(void) { }
static inline void kcsan_flat_atomic_begin(void) { }
static inline void kcsan_flat_atomic_end(void) { }
static inline void kcsan_atomic_next(int n) { }
static inline void kcsan_set_access_mask(unsigned long mask) { }

struct kcsan_scoped_access { };

static inline struct kcsan_scoped_access *
kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
     struct kcsan_scoped_access *sa) { return sa; }
static inline void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
# 184 "include/linux/kcsan-checks.h"
static inline void kcsan_check_access(const volatile void *ptr, size_t size,
          int type) { }
static inline void __kcsan_enable_current(void) { }
static inline void __kcsan_disable_current(void) { }
# 28 "include/asm-generic/rwonce.h" 2
# 64 "include/asm-generic/rwonce.h"
static __no_sanitize_or_inline
unsigned long __read_once_word_nocheck(const void *addr)
{
 return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
}
# 82 "include/asm-generic/rwonce.h"
static __no_kasan_or_inline
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 72 "arch/arm64/include/asm/rwonce.h" 2
# 249 "include/linux/compiler.h" 2
# 6 "include/linux/init.h" 2
# 116 "include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);
# 127 "include/linux/init.h"
typedef initcall_t initcall_entry_t;

static inline initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return *entry;
}


extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;
# 161 "include/linux/init.h"
extern void (*late_time_init)(void);

extern bool initcall_debug;
# 303 "include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 352 "include/linux/init.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) parse_early_param(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) parse_early_options(char *cmdline);
# 8 "kernel/evl/init.c" 2
# 1 "include/linux/module.h" 1
# 12 "include/linux/module.h"
# 1 "include/linux/list.h" 1






# 1 "include/linux/poison.h" 1
# 8 "include/linux/list.h" 2
# 1 "include/linux/const.h" 1



# 1 "include/vdso/const.h" 1




# 1 "include/uapi/linux/const.h" 1
# 6 "include/vdso/const.h" 2
# 5 "include/linux/const.h" 2
# 9 "include/linux/list.h" 2
# 1 "include/linux/kernel.h" 1




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 6 "include/linux/kernel.h" 2
# 1 "include/linux/align.h" 1
# 7 "include/linux/kernel.h" 2
# 1 "include/linux/limits.h" 1




# 1 "include/uapi/linux/limits.h" 1
# 6 "include/linux/limits.h" 2

# 1 "include/vdso/limits.h" 1
# 8 "include/linux/limits.h" 2
# 8 "include/linux/kernel.h" 2
# 1 "include/linux/linkage.h" 1





# 1 "include/linux/stringify.h" 1
# 7 "include/linux/linkage.h" 2
# 1 "include/linux/export.h" 1
# 72 "include/linux/export.h"

# 72 "include/linux/export.h"
struct kernel_symbol {
 unsigned long value;
 const char *name;
 const char *namespace;
};
# 8 "include/linux/linkage.h" 2
# 1 "arch/arm64/include/asm/linkage.h" 1
# 9 "include/linux/linkage.h" 2
# 9 "include/linux/kernel.h" 2



# 1 "include/linux/bitops.h" 1





# 1 "include/linux/bits.h" 1





# 1 "include/vdso/bits.h" 1
# 7 "include/linux/bits.h" 2
# 22 "include/linux/bits.h"
# 1 "include/linux/build_bug.h" 1
# 23 "include/linux/bits.h" 2
# 7 "include/linux/bitops.h" 2

# 1 "include/uapi/linux/kernel.h" 1




# 1 "include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "include/uapi/linux/kernel.h" 2
# 9 "include/linux/bitops.h" 2
# 23 "include/linux/bitops.h"
extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "arch/arm64/include/asm/bitops.h" 1
# 14 "arch/arm64/include/asm/bitops.h"
# 1 "include/asm-generic/bitops/builtin-__ffs.h" 1
# 11 "include/asm-generic/bitops/builtin-__ffs.h"
static inline __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 return __builtin_ctzl(word);
}
# 15 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/builtin-ffs.h" 1
# 16 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/builtin-__fls.h" 1
# 11 "include/asm-generic/bitops/builtin-__fls.h"
static inline __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 return (sizeof(word) * 8) - 1 - __builtin_clzl(word);
}
# 17 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/builtin-fls.h" 1
# 12 "include/asm-generic/bitops/builtin-fls.h"
static inline __attribute__((__always_inline__)) int fls(unsigned int x)
{
 return x ? sizeof(x) * 8 - __builtin_clz(x) : 0;
}
# 18 "arch/arm64/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/ffz.h" 1
# 20 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/fls64.h" 1
# 19 "include/asm-generic/bitops/fls64.h"
static inline __attribute__((__always_inline__)) int fls64(__u64 x)
{
 __u32 h = x >> 32;
 if (h)
  return fls(h) + 32;
 return fls(x);
}
# 21 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/find.h" 1




extern unsigned long _find_next_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long nbits,
  unsigned long start, unsigned long invert, unsigned long le);
extern unsigned long _find_first_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_first_zero_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_last_bit(const unsigned long *addr, unsigned long size);
# 22 "include/asm-generic/bitops/find.h"
static inline
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
       unsigned long offset)
{
 if (
# 26 "include/asm-generic/bitops/find.h" 3 4
    (__builtin_constant_p(
# 26 "include/asm-generic/bitops/find.h"
    size
# 26 "include/asm-generic/bitops/find.h" 3 4
    ) && (
# 26 "include/asm-generic/bitops/find.h"
    size
# 26 "include/asm-generic/bitops/find.h" 3 4
    ) <= 32 && (
# 26 "include/asm-generic/bitops/find.h"
    size
# 26 "include/asm-generic/bitops/find.h" 3 4
    ) > 0)
# 26 "include/asm-generic/bitops/find.h"
                           ) {
  unsigned long val;

  if (unlikely(offset >= size))
   return size;

  val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (
# 32 "include/asm-generic/bitops/find.h" 3 4
               32 
# 32 "include/asm-generic/bitops/find.h"
               - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 0);
}
# 51 "include/asm-generic/bitops/find.h"
static inline
unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset)
{
 if (
# 56 "include/asm-generic/bitops/find.h" 3 4
    (__builtin_constant_p(
# 56 "include/asm-generic/bitops/find.h"
    size
# 56 "include/asm-generic/bitops/find.h" 3 4
    ) && (
# 56 "include/asm-generic/bitops/find.h"
    size
# 56 "include/asm-generic/bitops/find.h" 3 4
    ) <= 32 && (
# 56 "include/asm-generic/bitops/find.h"
    size
# 56 "include/asm-generic/bitops/find.h" 3 4
    ) > 0)
# 56 "include/asm-generic/bitops/find.h"
                           ) {
  unsigned long val;

  if (unlikely(offset >= size))
   return size;

  val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (
# 62 "include/asm-generic/bitops/find.h" 3 4
                         32 
# 62 "include/asm-generic/bitops/find.h"
                         - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr1, addr2, size, offset, 0UL, 0);
}
# 80 "include/asm-generic/bitops/find.h"
static inline
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset)
{
 if (
# 84 "include/asm-generic/bitops/find.h" 3 4
    (__builtin_constant_p(
# 84 "include/asm-generic/bitops/find.h"
    size
# 84 "include/asm-generic/bitops/find.h" 3 4
    ) && (
# 84 "include/asm-generic/bitops/find.h"
    size
# 84 "include/asm-generic/bitops/find.h" 3 4
    ) <= 32 && (
# 84 "include/asm-generic/bitops/find.h"
    size
# 84 "include/asm-generic/bitops/find.h" 3 4
    ) > 0)
# 84 "include/asm-generic/bitops/find.h"
                           ) {
  unsigned long val;

  if (unlikely(offset >= size))
   return size;

  val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (
# 90 "include/asm-generic/bitops/find.h" 3 4
                32 
# 90 "include/asm-generic/bitops/find.h"
                - 1 - (size - 1)))));
  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 0);
}
# 158 "include/asm-generic/bitops/find.h"
static inline
unsigned long find_last_bit(const unsigned long *addr, unsigned long size)
{
 if (
# 161 "include/asm-generic/bitops/find.h" 3 4
    (__builtin_constant_p(
# 161 "include/asm-generic/bitops/find.h"
    size
# 161 "include/asm-generic/bitops/find.h" 3 4
    ) && (
# 161 "include/asm-generic/bitops/find.h"
    size
# 161 "include/asm-generic/bitops/find.h" 3 4
    ) <= 32 && (
# 161 "include/asm-generic/bitops/find.h"
    size
# 161 "include/asm-generic/bitops/find.h" 3 4
    ) > 0)
# 161 "include/asm-generic/bitops/find.h"
                           ) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (
# 162 "include/asm-generic/bitops/find.h" 3 4
                             32 
# 162 "include/asm-generic/bitops/find.h"
                             - 1 - (size - 1)))));

  return val ? __fls(val) : size;
 }

 return _find_last_bit(addr, size);
}
# 181 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_clump8(unsigned long *clump,
          const unsigned long *addr,
          unsigned long size, unsigned long offset);
# 22 "arch/arm64/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/sched.h" 1
# 13 "include/asm-generic/bitops/sched.h"
static inline int sched_find_first_bit(const unsigned long *b)
{





 if (b[0])
  return __ffs(b[0]);
 if (b[1])
  return __ffs(b[1]) + 32;
 if (b[2])
  return __ffs(b[2]) + 64;
 return __ffs(b[3]) + 96;



}
# 24 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/hweight.h" 1




# 1 "include/asm-generic/bitops/arch_hweight.h" 1






static inline unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "include/asm-generic/bitops/hweight.h" 2
# 1 "include/asm-generic/bitops/const_hweight.h" 1
# 7 "include/asm-generic/bitops/hweight.h" 2
# 25 "arch/arm64/include/asm/bitops.h" 2

# 1 "include/asm-generic/bitops/atomic.h" 1




# 1 "include/linux/atomic.h" 1






# 1 "arch/arm64/include/asm/atomic.h" 1
# 15 "arch/arm64/include/asm/atomic.h"
# 1 "arch/arm64/include/asm/barrier.h" 1
# 54 "arch/arm64/include/asm/barrier.h"
static inline unsigned long array_index_mask_nospec(unsigned long idx,
          unsigned long sz)
{
 unsigned long mask;

 asm volatile(
 "	cmp	%1, %2\n"
 "	sbc	%0, xzr, xzr\n"
 : "=r" (mask)
 : "r" (idx), "Ir" (sz)
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return mask;
}
# 185 "arch/arm64/include/asm/barrier.h"
# 1 "include/asm-generic/barrier.h" 1
# 186 "arch/arm64/include/asm/barrier.h" 2
# 16 "arch/arm64/include/asm/atomic.h" 2
# 1 "arch/arm64/include/asm/cmpxchg.h" 1
# 14 "arch/arm64/include/asm/cmpxchg.h"
# 1 "arch/arm64/include/asm/lse.h" 1




# 1 "arch/arm64/include/asm/atomic_ll_sc.h" 1
# 111 "arch/arm64/include/asm/atomic_ll_sc.h"
static inline void __ll_sc_atomic_add(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i)); } static inline int __ll_sc_atomic_add_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_add_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline int __ll_sc_atomic_add_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_add_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_add(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_add_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline int __ll_sc_atomic_fetch_add_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_add_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; }
static inline void __ll_sc_atomic_sub(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i)); } static inline int __ll_sc_atomic_sub_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_sub_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline int __ll_sc_atomic_sub_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_sub_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_sub(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_sub_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline int __ll_sc_atomic_fetch_sub_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_sub_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; }
# 122 "arch/arm64/include/asm/atomic_ll_sc.h"
static inline void __ll_sc_atomic_and(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "and" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "and" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline int __ll_sc_atomic_fetch_and(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_and_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline int __ll_sc_atomic_fetch_and_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_and_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }
static inline void __ll_sc_atomic_or(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "or" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "orr" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline int __ll_sc_atomic_fetch_or(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_or_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline int __ll_sc_atomic_fetch_or_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_or_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }
static inline void __ll_sc_atomic_xor(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "xor" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "eor" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline int __ll_sc_atomic_fetch_xor(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_xor_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline int __ll_sc_atomic_fetch_xor_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_xor_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }





static inline void __ll_sc_atomic_andnot(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "andnot" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "bic" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline int __ll_sc_atomic_fetch_andnot(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline int __ll_sc_atomic_fetch_andnot_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline int __ll_sc_atomic_fetch_andnot_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }
# 210 "arch/arm64/include/asm/atomic_ll_sc.h"
static inline void __ll_sc_atomic64_add(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i)); } static inline long __ll_sc_atomic64_add_return(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_add_return_relaxed(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_add_return_acquire(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_add_return_release(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_add(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_add_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_fetch_add_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_add_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; }
static inline void __ll_sc_atomic64_sub(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i)); } static inline long __ll_sc_atomic64_sub_return(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_sub_return_relaxed(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_sub_return_acquire(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_sub_return_release(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_sub(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_sub_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; }
# 221 "arch/arm64/include/asm/atomic_ll_sc.h"
static inline void __ll_sc_atomic64_and(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "and" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "and" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline long __ll_sc_atomic64_fetch_and(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_and_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_fetch_and_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_and_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }
static inline void __ll_sc_atomic64_or(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "or" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "orr" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline long __ll_sc_atomic64_fetch_or(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_or_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_fetch_or_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_or_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }
static inline void __ll_sc_atomic64_xor(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "xor" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "eor" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline long __ll_sc_atomic64_fetch_xor(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_xor_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }





static inline void __ll_sc_atomic64_andnot(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "andnot" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "bic" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline long __ll_sc_atomic64_fetch_andnot(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline long __ll_sc_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline long __ll_sc_atomic64_fetch_andnot_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }






static inline s64
__ll_sc_atomic64_dec_if_positive(atomic64_t *v)
{
 s64 result;
 unsigned long tmp;

 asm volatile("// atomic64_dec_if_positive\n"
 "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	subs	%0, %0, #1\n" "	b.lt	2f\n" "	stlxr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	dmb	ish\n" "2:"
# 252 "arch/arm64/include/asm/atomic_ll_sc.h"
 : "=&r" (result), "=&r" (tmp), "+Q" (v->counter)
 :
 : "cc", "memory");

 return result;
}
# 299 "arch/arm64/include/asm/atomic_ll_sc.h"
static inline u8 __ll_sc__cmpxchg_case_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "" "r" (old), [new] "r" (new) : ); return oldval; }
static inline u16 __ll_sc__cmpxchg_case_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "" "r" (old), [new] "r" (new) : ); return oldval; }
static inline u32 __ll_sc__cmpxchg_case_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "" "r" (old), [new] "r" (new) : ); return oldval; }
static inline u64 __ll_sc__cmpxchg_case_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : ); return oldval; }
static inline u8 __ll_sc__cmpxchg_case_acq_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u16 __ll_sc__cmpxchg_case_acq_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u32 __ll_sc__cmpxchg_case_acq_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u64 __ll_sc__cmpxchg_case_acq_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u8 __ll_sc__cmpxchg_case_rel_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u16 __ll_sc__cmpxchg_case_rel_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u32 __ll_sc__cmpxchg_case_rel_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u64 __ll_sc__cmpxchg_case_rel_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u8 __ll_sc__cmpxchg_case_mb_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u16 __ll_sc__cmpxchg_case_mb_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u32 __ll_sc__cmpxchg_case_mb_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline u64 __ll_sc__cmpxchg_case_mb_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
# 347 "arch/arm64/include/asm/atomic_ll_sc.h"
static inline long __ll_sc__cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "" "\n" "2:" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : ); return ret; }
static inline long __ll_sc__cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "_mb" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "l" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "dmb ish" "\n" "2:" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : "memory"); return ret; }
# 6 "arch/arm64/include/asm/lse.h" 2
# 41 "arch/arm64/include/asm/lse.h"
static inline bool system_uses_lse_atomics(void) { return false; }
# 15 "arch/arm64/include/asm/cmpxchg.h" 2
# 45 "arch/arm64/include/asm/cmpxchg.h"
static inline u8 __xchg_case_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : ); return ret; }
static inline u16 __xchg_case_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : ); return ret; }
static inline u32 __xchg_case_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : ); return ret; }
static inline u64 __xchg_case_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : ); return ret; }
static inline u8 __xchg_case_acq_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u16 __xchg_case_acq_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u32 __xchg_case_acq_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u64 __xchg_case_acq_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u8 __xchg_case_rel_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u16 __xchg_case_rel_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u32 __xchg_case_rel_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u64 __xchg_case_rel_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u8 __xchg_case_mb_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u16 __xchg_case_mb_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u32 __xchg_case_mb_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline u64 __xchg_case_mb_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
# 85 "arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) unsigned long __xchg(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_8(x, ptr); case 2: return __xchg_case_16(x, ptr); case 4: return __xchg_case_32(x, ptr); case 8: return __xchg_case_64(x, ptr); default: do { } while (0); } unreachable(); }
static inline __attribute__((__always_inline__)) unsigned long __xchg_acq(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_acq_8(x, ptr); case 2: return __xchg_case_acq_16(x, ptr); case 4: return __xchg_case_acq_32(x, ptr); case 8: return __xchg_case_acq_64(x, ptr); default: do { } while (0); } unreachable(); }
static inline __attribute__((__always_inline__)) unsigned long __xchg_rel(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_rel_8(x, ptr); case 2: return __xchg_case_rel_16(x, ptr); case 4: return __xchg_case_rel_32(x, ptr); case 8: return __xchg_case_rel_64(x, ptr); default: do { } while (0); } unreachable(); }
static inline __attribute__((__always_inline__)) unsigned long __xchg_mb(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_mb_8(x, ptr); case 2: return __xchg_case_mb_16(x, ptr); case 4: return __xchg_case_mb_32(x, ptr); case 8: return __xchg_case_mb_64(x, ptr); default: do { } while (0); } unreachable(); }
# 115 "arch/arm64/include/asm/cmpxchg.h"
static inline u8 __cmpxchg_case_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_8(ptr, old, new); }
static inline u16 __cmpxchg_case_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_16(ptr, old, new); }
static inline u32 __cmpxchg_case_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_32(ptr, old, new); }
static inline u64 __cmpxchg_case_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_64(ptr, old, new); }
static inline u8 __cmpxchg_case_acq_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_acq_8(ptr, old, new); }
static inline u16 __cmpxchg_case_acq_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_acq_16(ptr, old, new); }
static inline u32 __cmpxchg_case_acq_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_acq_32(ptr, old, new); }
static inline u64 __cmpxchg_case_acq_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_acq_64(ptr, old, new); }
static inline u8 __cmpxchg_case_rel_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_rel_8(ptr, old, new); }
static inline u16 __cmpxchg_case_rel_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_rel_16(ptr, old, new); }
static inline u32 __cmpxchg_case_rel_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_rel_32(ptr, old, new); }
static inline u64 __cmpxchg_case_rel_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_rel_64(ptr, old, new); }
static inline u8 __cmpxchg_case_mb_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_mb_8(ptr, old, new); }
static inline u16 __cmpxchg_case_mb_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_mb_16(ptr, old, new); }
static inline u32 __cmpxchg_case_mb_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_mb_32(ptr, old, new); }
static inline u64 __cmpxchg_case_mb_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_mb_64(ptr, old, new); }
# 145 "arch/arm64/include/asm/cmpxchg.h"
static inline long __cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { return __ll_sc__cmpxchg_double(old1, old2, new1, new2, ptr); }
static inline long __cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { return __ll_sc__cmpxchg_double_mb(old1, old2, new1, new2, ptr); }
# 172 "arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) unsigned long __cmpxchg(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_8(ptr, old, new); case 2: return __cmpxchg_case_16(ptr, old, new); case 4: return __cmpxchg_case_32(ptr, old, new); case 8: return __cmpxchg_case_64(ptr, old, new); default: do { } while (0); } unreachable(); }
static inline __attribute__((__always_inline__)) unsigned long __cmpxchg_acq(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_acq_8(ptr, old, new); case 2: return __cmpxchg_case_acq_16(ptr, old, new); case 4: return __cmpxchg_case_acq_32(ptr, old, new); case 8: return __cmpxchg_case_acq_64(ptr, old, new); default: do { } while (0); } unreachable(); }
static inline __attribute__((__always_inline__)) unsigned long __cmpxchg_rel(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_rel_8(ptr, old, new); case 2: return __cmpxchg_case_rel_16(ptr, old, new); case 4: return __cmpxchg_case_rel_32(ptr, old, new); case 8: return __cmpxchg_case_rel_64(ptr, old, new); default: do { } while (0); } unreachable(); }
static inline __attribute__((__always_inline__)) unsigned long __cmpxchg_mb(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_mb_8(ptr, old, new); case 2: return __cmpxchg_case_mb_16(ptr, old, new); case 4: return __cmpxchg_case_mb_32(ptr, old, new); case 8: return __cmpxchg_case_mb_64(ptr, old, new); default: do { } while (0); } unreachable(); }
# 250 "arch/arm64/include/asm/cmpxchg.h"
static inline void __cmpwait_case_8(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "b" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline void __cmpwait_case_16(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "h" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline void __cmpwait_case_32(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline void __cmpwait_case_64(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "" "[tmp], %[v]\n" "	eor	%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	cbnz	%" "" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
# 278 "arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) void __cmpwait(volatile void *ptr, unsigned long val, int size) { switch (size) { case 1: return __cmpwait_case_8(ptr, (u8)val); case 2: return __cmpwait_case_16(ptr, (u16)val); case 4: return __cmpwait_case_32(ptr, val); case 8: return __cmpwait_case_64(ptr, val); default: do { } while (0); } unreachable(); }
# 17 "arch/arm64/include/asm/atomic.h" 2
# 25 "arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) void arch_atomic_andnot(int i, atomic_t *v) { __ll_sc_atomic_andnot(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic_or(int i, atomic_t *v) { __ll_sc_atomic_or(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic_xor(int i, atomic_t *v) { __ll_sc_atomic_xor(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic_add(int i, atomic_t *v) { __ll_sc_atomic_add(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic_and(int i, atomic_t *v) { __ll_sc_atomic_and(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic_sub(int i, atomic_t *v) { __ll_sc_atomic_sub(i, v); }
# 46 "arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) int arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_andnot_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_andnot_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_andnot(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_fetch_or_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_or_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_or_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_or(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_fetch_xor_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_xor_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_xor_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_xor(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_fetch_add_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_add_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_add_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_add(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_fetch_and_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_and_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_and_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_and(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_fetch_sub_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_sub_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_sub_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_fetch_sub(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_add_return_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_add_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_add_return_acquire(int i, atomic_t *v) { return __ll_sc_atomic_add_return_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_add_return_release(int i, atomic_t *v) { return __ll_sc_atomic_add_return_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_add_return(int i, atomic_t *v) { return __ll_sc_atomic_add_return(i, v); }
static inline __attribute__((__always_inline__)) int arch_atomic_sub_return_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_sub_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_sub_return_acquire(int i, atomic_t *v) { return __ll_sc_atomic_sub_return_acquire(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_sub_return_release(int i, atomic_t *v) { return __ll_sc_atomic_sub_return_release(i, v); } static inline __attribute__((__always_inline__)) int arch_atomic_sub_return(int i, atomic_t *v) { return __ll_sc_atomic_sub_return(i, v); }
# 64 "arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) void arch_atomic64_andnot(long i, atomic64_t *v) { __ll_sc_atomic64_andnot(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic64_or(long i, atomic64_t *v) { __ll_sc_atomic64_or(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic64_xor(long i, atomic64_t *v) { __ll_sc_atomic64_xor(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic64_add(long i, atomic64_t *v) { __ll_sc_atomic64_add(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic64_and(long i, atomic64_t *v) { __ll_sc_atomic64_and(i, v); }
static inline __attribute__((__always_inline__)) void arch_atomic64_sub(long i, atomic64_t *v) { __ll_sc_atomic64_sub(i, v); }
# 85 "arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_andnot(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_or_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_or_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_or_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_or(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_xor_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_xor_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_xor_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_xor(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_add_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_add_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_add_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_add(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_and_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_and_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_and_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_and(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_sub_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_sub_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_sub_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_fetch_sub(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_add_return_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_add_return_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_add_return_release(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_add_return(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return(i, v); }
static inline __attribute__((__always_inline__)) long arch_atomic64_sub_return_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_sub_return_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return_acquire(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_sub_return_release(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return_release(i, v); } static inline __attribute__((__always_inline__)) long arch_atomic64_sub_return(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return(i, v); }




static inline __attribute__((__always_inline__)) long arch_atomic64_dec_if_positive(atomic64_t *v)
{
 return __ll_sc_atomic64_dec_if_positive(v);
}
# 8 "include/linux/atomic.h" 2
# 81 "include/linux/atomic.h"
# 1 "include/linux/atomic-arch-fallback.h" 1
# 151 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) int
arch_atomic_read_acquire(const atomic_t *v)
{
 return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { } while (0); barrier(); (typeof(*&(v)->counter))___p1; });
}




static inline __attribute__((__always_inline__)) void
arch_atomic_set_release(atomic_t *v, int i)
{
 do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 337 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) void
arch_atomic_inc(atomic_t *v)
{
 arch_atomic_add(1, v);
}
# 353 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) int
arch_atomic_inc_return(atomic_t *v)
{
 return arch_atomic_add_return(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_inc_return_acquire(atomic_t *v)
{
 return arch_atomic_add_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_inc_return_release(atomic_t *v)
{
 return arch_atomic_add_return_release(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_inc_return_relaxed(atomic_t *v)
{
 return arch_atomic_add_return_relaxed(1, v);
}
# 434 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_inc(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_acquire(atomic_t *v)
{
 return arch_atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_release(atomic_t *v)
{
 return arch_atomic_fetch_add_release(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_add_relaxed(1, v);
}
# 508 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) void
arch_atomic_dec(atomic_t *v)
{
 arch_atomic_sub(1, v);
}
# 524 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) int
arch_atomic_dec_return(atomic_t *v)
{
 return arch_atomic_sub_return(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_dec_return_acquire(atomic_t *v)
{
 return arch_atomic_sub_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_dec_return_release(atomic_t *v)
{
 return arch_atomic_sub_return_release(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_dec_return_relaxed(atomic_t *v)
{
 return arch_atomic_sub_return_relaxed(1, v);
}
# 605 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_dec(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_acquire(atomic_t *v)
{
 return arch_atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_release(atomic_t *v)
{
 return arch_atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_sub_relaxed(1, v);
}
# 986 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}
# 1085 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_sub_and_test(int i, atomic_t *v)
{
 return arch_atomic_sub_return(i, v) == 0;
}
# 1102 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_dec_and_test(atomic_t *v)
{
 return arch_atomic_dec_return(v) == 0;
}
# 1119 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_inc_and_test(atomic_t *v)
{
 return arch_atomic_inc_return(v) == 0;
}
# 1137 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_add_negative(int i, atomic_t *v)
{
 return arch_atomic_add_return(i, v) < 0;
}
# 1155 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) int
arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (unlikely(c == u))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + a));

 return c;
}
# 1180 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 return arch_atomic_fetch_add_unless(v, a, u) != u;
}
# 1196 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic_inc_not_zero(atomic_t *v)
{
 return arch_atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic_inc_unless_negative(atomic_t *v)
{
 int c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (unlikely(c < 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__always_inline__)) bool
arch_atomic_dec_unless_positive(atomic_t *v)
{
 int c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (unlikely(c > 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}




static inline __attribute__((__always_inline__)) int
arch_atomic_dec_if_positive(atomic_t *v)
{
 int dec, c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  dec = c - 1;
  if (unlikely(dec < 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, dec));

 return dec;
}
# 1258 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) s64
arch_atomic64_read_acquire(const atomic64_t *v)
{
 return ({ typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) ___p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { } while (0); barrier(); (typeof(*&(v)->counter))___p1; });
}




static inline __attribute__((__always_inline__)) void
arch_atomic64_set_release(atomic64_t *v, s64 i)
{
 do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 1444 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) void
arch_atomic64_inc(atomic64_t *v)
{
 arch_atomic64_add(1, v);
}
# 1460 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) s64
arch_atomic64_inc_return(atomic64_t *v)
{
 return arch_atomic64_add_return(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_acquire(atomic64_t *v)
{
 return arch_atomic64_add_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_release(atomic64_t *v)
{
 return arch_atomic64_add_return_release(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_add_return_relaxed(1, v);
}
# 1541 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_add_acquire(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_release(atomic64_t *v)
{
 return arch_atomic64_fetch_add_release(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_add_relaxed(1, v);
}
# 1615 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) void
arch_atomic64_dec(atomic64_t *v)
{
 arch_atomic64_sub(1, v);
}
# 1631 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) s64
arch_atomic64_dec_return(atomic64_t *v)
{
 return arch_atomic64_sub_return(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_acquire(atomic64_t *v)
{
 return arch_atomic64_sub_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_release(atomic64_t *v)
{
 return arch_atomic64_sub_return_release(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_relaxed(atomic64_t *v)
{
 return arch_atomic64_sub_return_relaxed(1, v);
}
# 1712 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_acquire(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_release(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_release(1, v);
}




static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(1, v);
}
# 2093 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((o)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
 if (unlikely(r != o))
  *old = r;
 return likely(r == o);
}
# 2192 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return arch_atomic64_sub_return(i, v) == 0;
}
# 2209 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_dec_and_test(atomic64_t *v)
{
 return arch_atomic64_dec_return(v) == 0;
}
# 2226 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_inc_and_test(atomic64_t *v)
{
 return arch_atomic64_inc_return(v) == 0;
}
# 2244 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_add_negative(s64 i, atomic64_t *v)
{
 return arch_atomic64_add_return(i, v) < 0;
}
# 2262 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 s64 c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (unlikely(c == u))
   break;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + a));

 return c;
}
# 2287 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return arch_atomic64_fetch_add_unless(v, a, u) != u;
}
# 2303 "include/linux/atomic-arch-fallback.h"
static inline __attribute__((__always_inline__)) bool
arch_atomic64_inc_not_zero(atomic64_t *v)
{
 return arch_atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__always_inline__)) bool
arch_atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (unlikely(c < 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__always_inline__)) bool
arch_atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));

 do {
  if (unlikely(c > 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 82 "include/linux/atomic.h" 2
# 1 "include/asm-generic/atomic-instrumented.h" 1
# 22 "include/asm-generic/atomic-instrumented.h"
# 1 "include/linux/instrumented.h" 1
# 24 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, 0);
}
# 39 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 0));
}
# 54 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 1) | (1 << 0));
}
# 69 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, (1 << 2));
}
# 84 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0));
}
# 99 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
}
# 115 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void
instrument_copy_to_user(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 kcsan_check_access(from, n, 0);
}
# 132 "include/linux/instrumented.h"
static inline __attribute__((__always_inline__)) void
instrument_copy_from_user(const void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 kcsan_check_access(to, n, (1 << 0));
}
# 23 "include/asm-generic/atomic-instrumented.h" 2

static inline __attribute__((__always_inline__)) int
atomic_read(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}



static inline __attribute__((__always_inline__)) int
atomic_read_acquire(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read_acquire(v);
}



static inline __attribute__((__always_inline__)) void
atomic_set(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 do { *(volatile typeof(((v)->counter)) *)&(((v)->counter)) = ((i)); } while (0);
}



static inline __attribute__((__always_inline__)) void
atomic_set_release(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set_release(v, i);
}



static inline __attribute__((__always_inline__)) void
atomic_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}



static inline __attribute__((__always_inline__)) int
atomic_add_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) void
atomic_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}



static inline __attribute__((__always_inline__)) int
atomic_sub_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) void
atomic_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_inc(v);
}




static inline __attribute__((__always_inline__)) int
atomic_inc_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return(v);
}




static inline __attribute__((__always_inline__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_acquire(v);
}




static inline __attribute__((__always_inline__)) int
atomic_inc_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_release(v);
}




static inline __attribute__((__always_inline__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_relaxed(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_acquire(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_release(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_relaxed(v);
}




static inline __attribute__((__always_inline__)) void
atomic_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_dec(v);
}




static inline __attribute__((__always_inline__)) int
atomic_dec_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return(v);
}




static inline __attribute__((__always_inline__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_acquire(v);
}




static inline __attribute__((__always_inline__)) int
atomic_dec_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_release(v);
}




static inline __attribute__((__always_inline__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_relaxed(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_acquire(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_release(v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_relaxed(v);
}



static inline __attribute__((__always_inline__)) void
atomic_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}



static inline __attribute__((__always_inline__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) void
atomic_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) void
atomic_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}



static inline __attribute__((__always_inline__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) void
atomic_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}



static inline __attribute__((__always_inline__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_acquire(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_release(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_xchg(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_acquire(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_release(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_relaxed(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}




static inline __attribute__((__always_inline__)) bool
atomic_dec_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}




static inline __attribute__((__always_inline__)) bool
atomic_inc_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}




static inline __attribute__((__always_inline__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}




static inline __attribute__((__always_inline__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_unless(v, a, u);
}




static inline __attribute__((__always_inline__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_unless(v, a, u);
}




static inline __attribute__((__always_inline__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_not_zero(v);
}




static inline __attribute__((__always_inline__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_unless_negative(v);
}




static inline __attribute__((__always_inline__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_unless_positive(v);
}




static inline __attribute__((__always_inline__)) int
atomic_dec_if_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_if_positive(v);
}



static inline __attribute__((__always_inline__)) s64
atomic64_read(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return (*(const volatile typeof( _Generic(((v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((v)->counter))) *)&((v)->counter));
}



static inline __attribute__((__always_inline__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read_acquire(v);
}



static inline __attribute__((__always_inline__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 do { *(volatile typeof(((v)->counter)) *)&(((v)->counter)) = ((i)); } while (0);
}



static inline __attribute__((__always_inline__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set_release(v, i);
}



static inline __attribute__((__always_inline__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}



static inline __attribute__((__always_inline__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}



static inline __attribute__((__always_inline__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) void
atomic64_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_inc_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_acquire(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_release(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_relaxed(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_acquire(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_release(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_relaxed(v);
}




static inline __attribute__((__always_inline__)) void
atomic64_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_dec_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_acquire(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_release(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_relaxed(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_acquire(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_release(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_relaxed(v);
}



static inline __attribute__((__always_inline__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}



static inline __attribute__((__always_inline__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}



static inline __attribute__((__always_inline__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}



static inline __attribute__((__always_inline__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_acquire(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_release(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_acquire(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_release(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_relaxed(v, old, new);
}




static inline __attribute__((__always_inline__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}




static inline __attribute__((__always_inline__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}




static inline __attribute__((__always_inline__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}




static inline __attribute__((__always_inline__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_unless(v, a, u);
}




static inline __attribute__((__always_inline__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}




static inline __attribute__((__always_inline__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_not_zero(v);
}




static inline __attribute__((__always_inline__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_unless_negative(v);
}




static inline __attribute__((__always_inline__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_unless_positive(v);
}




static inline __attribute__((__always_inline__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_if_positive(v);
}
# 83 "include/linux/atomic.h" 2




# 1 "include/asm-generic/atomic-long.h" 1
# 18 "include/asm-generic/atomic-long.h"
typedef atomic_t atomic_long_t;
# 520 "include/asm-generic/atomic-long.h"
static inline __attribute__((__always_inline__)) long
atomic_long_read(const atomic_long_t *v)
{
 return atomic_read(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 return atomic_read_acquire(v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 atomic_set(v, i);
}

static inline __attribute__((__always_inline__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 atomic_set_release(v, i);
}

static inline __attribute__((__always_inline__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 atomic_add(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 return atomic_add_return(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return atomic_add_return_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return atomic_add_return_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return atomic_add_return_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return atomic_fetch_add(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_add_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return atomic_fetch_add_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_add_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 atomic_sub(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 return atomic_sub_return(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return atomic_sub_return_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return atomic_sub_return_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return atomic_sub_return_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return atomic_fetch_sub(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_sub_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return atomic_fetch_sub_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_inc(atomic_long_t *v)
{
 atomic_inc(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 return atomic_inc_return(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return atomic_inc_return_acquire(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 return atomic_inc_return_release(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return atomic_inc_return_relaxed(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 return atomic_fetch_inc(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return atomic_fetch_inc_release(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_dec(atomic_long_t *v)
{
 atomic_dec(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 return atomic_dec_return(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return atomic_dec_return_acquire(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 return atomic_dec_return_release(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return atomic_dec_return_relaxed(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 return atomic_fetch_dec(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return atomic_fetch_dec_release(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 atomic_and(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return atomic_fetch_and(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_and_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return atomic_fetch_and_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_and_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 atomic_andnot(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 atomic_or(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return atomic_fetch_or(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_or_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return atomic_fetch_or_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_or_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 atomic_xor(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return atomic_fetch_xor(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return atomic_fetch_xor_acquire(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return atomic_fetch_xor_release(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return atomic_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 return atomic_xchg(v, i);
}

static inline __attribute__((__always_inline__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return atomic_xchg_acquire(v, i);
}

static inline __attribute__((__always_inline__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return atomic_xchg_release(v, i);
}

static inline __attribute__((__always_inline__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return atomic_xchg_relaxed(v, i);
}

static inline __attribute__((__always_inline__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg(v, old, new);
}

static inline __attribute__((__always_inline__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__always_inline__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg_release(v, old, new);
}

static inline __attribute__((__always_inline__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return atomic_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg(v, (int *)old, new);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg_acquire(v, (int *)old, new);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg_release(v, (int *)old, new);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return atomic_try_cmpxchg_relaxed(v, (int *)old, new);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return atomic_sub_and_test(i, v);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 return atomic_dec_and_test(v);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 return atomic_inc_and_test(v);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 return atomic_add_negative(i, v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return atomic_add_unless(v, a, u);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 return atomic_inc_not_zero(v);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return atomic_inc_unless_negative(v);
}

static inline __attribute__((__always_inline__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return atomic_dec_unless_positive(v);
}

static inline __attribute__((__always_inline__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 return atomic_dec_if_positive(v);
}
# 88 "include/linux/atomic.h" 2
# 6 "include/asm-generic/bitops/atomic.h" 2
# 14 "include/asm-generic/bitops/atomic.h"
static inline __attribute__((__always_inline__)) void set_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 
# 16 "include/asm-generic/bitops/atomic.h" 3 4
     32
# 16 "include/asm-generic/bitops/atomic.h"
     );
 atomic_long_or(((((1UL))) << ((nr) % 
# 17 "include/asm-generic/bitops/atomic.h" 3 4
               32
# 17 "include/asm-generic/bitops/atomic.h"
               )), (atomic_long_t *)p);
}

static inline __attribute__((__always_inline__)) void clear_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 
# 22 "include/asm-generic/bitops/atomic.h" 3 4
     32
# 22 "include/asm-generic/bitops/atomic.h"
     );
 atomic_long_andnot(((((1UL))) << ((nr) % 
# 23 "include/asm-generic/bitops/atomic.h" 3 4
                   32
# 23 "include/asm-generic/bitops/atomic.h"
                   )), (atomic_long_t *)p);
}

static inline __attribute__((__always_inline__)) void change_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 
# 28 "include/asm-generic/bitops/atomic.h" 3 4
     32
# 28 "include/asm-generic/bitops/atomic.h"
     );
 atomic_long_xor(((((1UL))) << ((nr) % 
# 29 "include/asm-generic/bitops/atomic.h" 3 4
                32
# 29 "include/asm-generic/bitops/atomic.h"
                )), (atomic_long_t *)p);
}

static inline int test_and_set_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 
# 35 "include/asm-generic/bitops/atomic.h" 3 4
                     32
# 35 "include/asm-generic/bitops/atomic.h"
                     ));

 p += ((nr) / 
# 37 "include/asm-generic/bitops/atomic.h" 3 4
     32
# 37 "include/asm-generic/bitops/atomic.h"
     );
 if (({ do { } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); }) & mask)
  return 1;

 old = atomic_long_fetch_or(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

static inline int test_and_clear_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 
# 48 "include/asm-generic/bitops/atomic.h" 3 4
                     32
# 48 "include/asm-generic/bitops/atomic.h"
                     ));

 p += ((nr) / 
# 50 "include/asm-generic/bitops/atomic.h" 3 4
     32
# 50 "include/asm-generic/bitops/atomic.h"
     );
 if (!(({ do { } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); }) & mask))
  return 0;

 old = atomic_long_fetch_andnot(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

static inline int test_and_change_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 
# 61 "include/asm-generic/bitops/atomic.h" 3 4
                     32
# 61 "include/asm-generic/bitops/atomic.h"
                     ));

 p += ((nr) / 
# 63 "include/asm-generic/bitops/atomic.h" 3 4
     32
# 63 "include/asm-generic/bitops/atomic.h"
     );
 old = atomic_long_fetch_xor(mask, (atomic_long_t *)p);
 return !!(old & mask);
}
# 27 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/lock.h" 1
# 18 "include/asm-generic/bitops/lock.h"
static inline int test_and_set_bit_lock(unsigned int nr,
     volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 
# 22 "include/asm-generic/bitops/lock.h" 3 4
                     32
# 22 "include/asm-generic/bitops/lock.h"
                     ));

 p += ((nr) / 
# 24 "include/asm-generic/bitops/lock.h" 3 4
     32
# 24 "include/asm-generic/bitops/lock.h"
     );
 if (({ do { } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); }) & mask)
  return 1;

 old = atomic_long_fetch_or_acquire(mask, (atomic_long_t *)p);
 return !!(old & mask);
}
# 40 "include/asm-generic/bitops/lock.h"
static inline void clear_bit_unlock(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 
# 42 "include/asm-generic/bitops/lock.h" 3 4
     32
# 42 "include/asm-generic/bitops/lock.h"
     );
 atomic_long_fetch_andnot_release(((((1UL))) << ((nr) % 
# 43 "include/asm-generic/bitops/lock.h" 3 4
                                 32
# 43 "include/asm-generic/bitops/lock.h"
                                 )), (atomic_long_t *)p);
}
# 57 "include/asm-generic/bitops/lock.h"
static inline void __clear_bit_unlock(unsigned int nr,
          volatile unsigned long *p)
{
 unsigned long old;

 p += ((nr) / 
# 62 "include/asm-generic/bitops/lock.h" 3 4
     32
# 62 "include/asm-generic/bitops/lock.h"
     );
 old = ({ do { } while (0); (*(const volatile typeof( _Generic((*p), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*p))) *)&(*p)); });
 old &= ~((((1UL))) << ((nr) % 
# 64 "include/asm-generic/bitops/lock.h" 3 4
        32
# 64 "include/asm-generic/bitops/lock.h"
        ));
 atomic_long_set_release((atomic_long_t *)p, old);
}
# 78 "include/asm-generic/bitops/lock.h"
static inline bool clear_bit_unlock_is_negative_byte(unsigned int nr,
           volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 
# 82 "include/asm-generic/bitops/lock.h" 3 4
                     32
# 82 "include/asm-generic/bitops/lock.h"
                     ));

 p += ((nr) / 
# 84 "include/asm-generic/bitops/lock.h" 3 4
     32
# 84 "include/asm-generic/bitops/lock.h"
     );
 old = atomic_long_fetch_andnot_release(mask, (atomic_long_t *)p);
 return !!(old & ((((1UL))) << (7)));
}
# 28 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/non-atomic.h" 1
# 16 "include/asm-generic/bitops/non-atomic.h"
static inline void __set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 18 "include/asm-generic/bitops/non-atomic.h" 3 4
                     32
# 18 "include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 19 "include/asm-generic/bitops/non-atomic.h" 3 4
                                             32
# 19 "include/asm-generic/bitops/non-atomic.h"
                                             );

 *p |= mask;
}

static inline void __clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 26 "include/asm-generic/bitops/non-atomic.h" 3 4
                     32
# 26 "include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 27 "include/asm-generic/bitops/non-atomic.h" 3 4
                                             32
# 27 "include/asm-generic/bitops/non-atomic.h"
                                             );

 *p &= ~mask;
}
# 41 "include/asm-generic/bitops/non-atomic.h"
static inline void __change_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 43 "include/asm-generic/bitops/non-atomic.h" 3 4
                     32
# 43 "include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 44 "include/asm-generic/bitops/non-atomic.h" 3 4
                                             32
# 44 "include/asm-generic/bitops/non-atomic.h"
                                             );

 *p ^= mask;
}
# 58 "include/asm-generic/bitops/non-atomic.h"
static inline int __test_and_set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 60 "include/asm-generic/bitops/non-atomic.h" 3 4
                     32
# 60 "include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 61 "include/asm-generic/bitops/non-atomic.h" 3 4
                                             32
# 61 "include/asm-generic/bitops/non-atomic.h"
                                             );
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 77 "include/asm-generic/bitops/non-atomic.h"
static inline int __test_and_clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 79 "include/asm-generic/bitops/non-atomic.h" 3 4
                     32
# 79 "include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 80 "include/asm-generic/bitops/non-atomic.h" 3 4
                                             32
# 80 "include/asm-generic/bitops/non-atomic.h"
                                             );
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}


static inline int __test_and_change_bit(int nr,
         volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 
# 91 "include/asm-generic/bitops/non-atomic.h" 3 4
                     32
# 91 "include/asm-generic/bitops/non-atomic.h"
                     ));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 
# 92 "include/asm-generic/bitops/non-atomic.h" 3 4
                                             32
# 92 "include/asm-generic/bitops/non-atomic.h"
                                             );
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}






static inline int test_bit(int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 
# 106 "include/asm-generic/bitops/non-atomic.h" 3 4
                   32
# 106 "include/asm-generic/bitops/non-atomic.h"
                   )] >> (nr & (
# 106 "include/asm-generic/bitops/non-atomic.h" 3 4
                                           32
# 106 "include/asm-generic/bitops/non-atomic.h"
                                                        -1)));
}
# 29 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/le.h" 1






# 1 "arch/arm64/include/uapi/asm/byteorder.h" 1
# 23 "arch/arm64/include/uapi/asm/byteorder.h"
# 1 "include/linux/byteorder/little_endian.h" 1




# 1 "include/uapi/linux/byteorder/little_endian.h" 1
# 13 "include/uapi/linux/byteorder/little_endian.h"
# 1 "include/linux/swab.h" 1




# 1 "include/uapi/linux/swab.h" 1







# 1 "/usr/include/x86_64-linux-gnu/asm/swab.h" 1 3 4








# 8 "/usr/include/x86_64-linux-gnu/asm/swab.h" 3 4
static __inline__ __u32 __arch_swab32(__u32 val)
{
 __asm__("bswapl %0" : "=r" (val) : "0" (val));
 return val;
}


static __inline__ __u64 __arch_swab64(__u64 val)
{
# 31 "/usr/include/x86_64-linux-gnu/asm/swab.h" 3 4
 __asm__("bswapq %0" : "=r" (val) : "0" (val));
 return val;

}
# 9 "include/uapi/linux/swab.h" 2
# 48 "include/uapi/linux/swab.h"

# 48 "include/uapi/linux/swab.h"
static inline __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return 
# 60 "include/uapi/linux/swab.h" 3 4
       __arch_swab32
# 60 "include/uapi/linux/swab.h"
                    (val);



}

static inline __attribute__((__const__)) __u64 __fswab64(__u64 val)
{

 return 
# 69 "include/uapi/linux/swab.h" 3 4
       __arch_swab64
# 69 "include/uapi/linux/swab.h"
                    (val);







}

static inline __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "include/uapi/linux/swab.h"
static inline __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__builtin_constant_p((__u64)(y)) ? ((__u64)( (((__u64)(y) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(y) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(y) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(y) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(y) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(y) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(y) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(y) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(y));



}
# 171 "include/uapi/linux/swab.h"
static inline __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "include/linux/swab.h" 2
# 14 "include/uapi/linux/byteorder/little_endian.h" 2
# 44 "include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "include/linux/byteorder/little_endian.h" 2





# 1 "include/linux/byteorder/generic.h" 1
# 144 "include/linux/byteorder/generic.h"
static inline void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}


static inline void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}

static inline void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__builtin_constant_p((__u32)((src[i]))) ? ((__u32)( (((__u32)((src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)((src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)((src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32((src[i]))));
}

static inline void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (__builtin_constant_p((__u32)(( __u32)(__be32)(src[i]))) ? ((__u32)( (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(src[i])));
}
# 12 "include/linux/byteorder/little_endian.h" 2
# 24 "arch/arm64/include/uapi/asm/byteorder.h" 2
# 8 "include/asm-generic/bitops/le.h" 2






static inline unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_next_zero_bit((addr), (size), 0);
}
# 83 "include/asm-generic/bitops/le.h"
static inline int test_bit_le(int nr, const void *addr)
{
 return test_bit(nr ^ 0, addr);
}

static inline void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ 0, addr);
}

static inline void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ 0, addr);
}

static inline int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ 0, addr);
}

static inline int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ 0, addr);
}
# 30 "arch/arm64/include/asm/bitops.h" 2
# 1 "include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 31 "arch/arm64/include/asm/bitops.h" 2
# 33 "include/linux/bitops.h" 2
# 68 "include/linux/bitops.h"
static inline int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
}






static inline __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 168 "include/linux/bitops.h"
static inline __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline int get_count_order(unsigned int count)
{
 if (count == 0)
  return -1;

 return fls(--count);
}







static inline int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 return (int)fls_long(--l);
}
# 221 "include/linux/bitops.h"
static inline unsigned long __ffs64(u64 word)
{

 if (((u32)word) == 0UL)
  return __ffs((u32)(word >> 32)) + 32;



 return __ffs((unsigned long)word);
}







static inline __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  __set_bit(nr, addr);
 else
  __clear_bit(nr, addr);
}
# 13 "include/linux/kernel.h" 2
# 1 "include/linux/log2.h" 1
# 21 "include/linux/log2.h"
static inline __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "include/linux/log2.h"
static inline __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 198 "include/linux/log2.h"
static inline __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 225 "include/linux/log2.h"
static inline __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 14 "include/linux/kernel.h" 2
# 1 "include/linux/math.h" 1




# 1 "arch/arm64/include/generated/asm/div64.h" 1
# 1 "include/asm-generic/div64.h" 1
# 177 "include/asm-generic/div64.h"
static inline uint64_t __arch_xprod_64(const uint64_t m, uint64_t n, bool bias)
{
 uint32_t m_lo = m;
 uint32_t m_hi = m >> 32;
 uint32_t n_lo = n;
 uint32_t n_hi = n >> 32;
 uint64_t res;
 uint32_t res_lo, res_hi, tmp;

 if (!bias) {
  res = ((uint64_t)m_lo * n_lo) >> 32;
 } else if (!(m & ((1ULL << 63) | (1ULL << 31)))) {

  res = (m + (uint64_t)m_lo * n_lo) >> 32;
 } else {
  res = m + (uint64_t)m_lo * n_lo;
  res_lo = res >> 32;
  res_hi = (res_lo < m_hi);
  res = res_lo | ((uint64_t)res_hi << 32);
 }

 if (!(m & ((1ULL << 63) | (1ULL << 31)))) {

  res += (uint64_t)m_lo * n_hi;
  res += (uint64_t)m_hi * n_lo;
  res >>= 32;
 } else {
  res += (uint64_t)m_lo * n_hi;
  tmp = res >> 32;
  res += (uint64_t)m_hi * n_lo;
  res_lo = res >> 32;
  res_hi = (res_lo < tmp);
  res = res_lo | ((uint64_t)res_hi << 32);
 }

 res += (uint64_t)m_hi * n_hi;

 return res;
}



extern uint32_t __div64_32(uint64_t *dividend, uint32_t divisor);
# 1 "arch/arm64/include/generated/asm/div64.h" 2
# 6 "include/linux/math.h" 2
# 160 "include/linux/math.h"
static inline u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);


u32 int_sqrt64(u64 x);
# 15 "include/linux/kernel.h" 2
# 1 "include/linux/minmax.h" 1
# 16 "include/linux/kernel.h" 2
# 1 "include/linux/typecheck.h" 1
# 17 "include/linux/kernel.h" 2
# 1 "include/linux/printk.h" 1






# 1 "include/linux/kern_levels.h" 1
# 8 "include/linux/printk.h" 2

# 1 "include/linux/cache.h" 1





# 1 "arch/arm64/include/asm/cache.h" 1







# 1 "arch/arm64/include/asm/cputype.h" 1
# 144 "arch/arm64/include/asm/cputype.h"
# 1 "arch/arm64/include/asm/sysreg.h" 1
# 1176 "arch/arm64/include/asm/sysreg.h"
# 1 "arch/arm64/include/asm/alternative.h" 1




# 1 "arch/arm64/include/asm/alternative-macros.h" 1




# 1 "arch/arm64/include/generated/asm/cpucaps.h" 1
# 6 "arch/arm64/include/asm/alternative-macros.h" 2
# 6 "arch/arm64/include/asm/alternative.h" 2







struct alt_instr {
 s32 orig_offset;
 s32 alt_offset;
 u16 cpufeature;
 u8 orig_len;
 u8 alt_len;
};

typedef void (*alternative_cb_t)(struct alt_instr *alt,
     __le32 *origptr, __le32 *updptr, int nr_inst);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) apply_boot_alternatives(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) apply_alternatives_all(void);
bool alternative_is_applied(u16 cpufeature);




static inline void apply_alternatives_module(void *start, size_t length) { }
# 1177 "arch/arm64/include/asm/sysreg.h" 2
# 145 "arch/arm64/include/asm/cputype.h" 2
# 157 "arch/arm64/include/asm/cputype.h"
struct midr_range {
 u32 model;
 u32 rv_min;
 u32 rv_max;
};
# 174 "arch/arm64/include/asm/cputype.h"
static inline bool midr_is_cpu_model_range(u32 midr, u32 model, u32 rv_min,
        u32 rv_max)
{
 u32 _model = midr & ((0xff << 24) | (0xfff << 4) | (0xf << 16));
 u32 rv = midr & (0xf | (0xf << 20));

 return _model == model && rv >= rv_min && rv <= rv_max;
}

static inline bool is_midr_in_range(u32 midr, struct midr_range const *range)
{
 return midr_is_cpu_model_range(midr, range->model,
           range->rv_min, range->rv_max);
}

static inline bool
is_midr_in_range_list(u32 midr, struct midr_range const *ranges)
{
 while (ranges->model)
  if (is_midr_in_range(midr, ranges++))
   return true;
 return false;
}






static inline u32 __attribute__((__const__)) read_cpuid_id(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline u64 __attribute__((__const__)) read_cpuid_mpidr(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((5) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline unsigned int __attribute__((__const__)) read_cpuid_implementor(void)
{
 return (((read_cpuid_id()) & (0xff << 24)) >> 24);
}

static inline unsigned int __attribute__((__const__)) read_cpuid_part_number(void)
{
 return (((read_cpuid_id()) & (0xfff << 4)) >> 4);
}

static inline u32 __attribute__((__const__)) read_cpuid_cachetype(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((3) << 16) | ((0) << 12) | ((0) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}
# 9 "arch/arm64/include/asm/cache.h" 2
# 64 "arch/arm64/include/asm/cache.h"
extern unsigned long __icache_flags;





static inline int icache_is_aliasing(void)
{
 return test_bit(0, &__icache_flags);
}

static inline __attribute__((__always_inline__)) int icache_is_vpipt(void)
{
 return test_bit(1, &__icache_flags);
}

static inline u32 cache_type_cwg(void)
{
 return (read_cpuid_cachetype() >> 24) & 15;
}



static inline int cache_line_size_of_cpu(void)
{
 u32 cwg = cache_type_cwg();

 return cwg ? 4 << cwg : (128);
}

int cache_line_size(void);
# 112 "arch/arm64/include/asm/cache.h"
static inline u32 __attribute__((__const__)) read_cpuid_effective_cachetype(void)
{
 u32 ctr = read_cpuid_cachetype();

 if (!(ctr & ((((1UL))) << (28)))) {
  u64 clidr = ({ u64 __val; asm volatile("mrs %0, " "clidr_el1" : "=r" (__val)); __val; });

  if ((((clidr) >> 24) & 0x7) == 0 ||
      ((((clidr) >> 21) & 0x7) == 0 && (((clidr) >> 27) & 0x7) == 0))
   ctr |= ((((1UL))) << (28));
 }

 return ctr;
}
# 7 "include/linux/cache.h" 2
# 10 "include/linux/printk.h" 2
# 1 "include/linux/ratelimit_types.h" 1





# 1 "include/uapi/linux/param.h" 1




# 1 "arch/arm64/include/uapi/asm/param.h" 1
# 22 "arch/arm64/include/uapi/asm/param.h"
# 1 "include/asm-generic/param.h" 1




# 1 "include/uapi/asm-generic/param.h" 1
# 6 "include/asm-generic/param.h" 2
# 23 "arch/arm64/include/uapi/asm/param.h" 2
# 6 "include/uapi/linux/param.h" 2
# 7 "include/linux/ratelimit_types.h" 2
# 1 "include/linux/spinlock_types.h" 1
# 15 "include/linux/spinlock_types.h"
# 1 "include/linux/spinlock_types_up.h" 1
# 25 "include/linux/spinlock_types_up.h"
typedef struct { } arch_spinlock_t;





typedef struct {

} arch_rwlock_t;
# 16 "include/linux/spinlock_types.h" 2


# 1 "include/linux/lockdep_types.h" 1
# 17 "include/linux/lockdep_types.h"
enum lockdep_wait_type {
 LD_WAIT_INV = 0,

 LD_WAIT_FREE,
 LD_WAIT_SPIN,




 LD_WAIT_CONFIG = LD_WAIT_SPIN,

 LD_WAIT_SLEEP,

 LD_WAIT_MAX,
};

enum lockdep_lock_type {
 LD_LOCK_NORMAL = 0,
 LD_LOCK_PERCPU,
 LD_LOCK_MAX,
};
# 197 "include/linux/lockdep_types.h"
struct lock_class_key { };




struct lockdep_map { };

struct pin_cookie { };
# 19 "include/linux/spinlock_types.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;







} raw_spinlock_t;
# 71 "include/linux/spinlock_types.h"
typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 82 "include/linux/spinlock_types.h"
 };
} spinlock_t;
# 212 "include/linux/spinlock_types.h"
typedef raw_spinlock_t hard_spinlock_t;

typedef raw_spinlock_t hybrid_spinlock_t;
# 244 "include/linux/spinlock_types.h"
# 1 "include/linux/rwlock_types.h" 1
# 11 "include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;







} rwlock_t;
# 245 "include/linux/spinlock_types.h" 2
# 8 "include/linux/ratelimit_types.h" 2







struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "include/linux/ratelimit_types.h"
extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 11 "include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];

extern int oops_in_progress;



static inline int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 65 "include/linux/printk.h"
extern int console_printk[];






static inline void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 148 "include/linux/printk.h"
static inline __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
void early_printk(const char *s, ...) { }
# 158 "include/linux/printk.h"
static inline void printk_nmi_enter(void) { }
static inline void printk_nmi_exit(void) { }
static inline void printk_nmi_direct_enter(void) { }
static inline void printk_nmi_direct_exit(void) { }



struct dev_printk_info;







static inline __attribute__((__cold__))
void raw_puts(const char *s, size_t len) { }
static inline __attribute__((__cold__))
void raw_vprintk(const char *s, va_list ap) { }
static inline __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
void raw_printk(const char *s, ...) { }
# 228 "include/linux/printk.h"
static inline __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *s, va_list args)
{
 return 0;
}
static inline __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int printk(const char *s, ...)
{
 return 0;
}
static inline __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int printk_deferred(const char *s, ...)
{
 return 0;
}
static inline int printk_ratelimit(void)
{
 return 0;
}
static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec)
{
 return false;
}

static inline void wake_up_klogd(void)
{
}

static inline char *log_buf_addr_get(void)
{
 return ((void *)0);
}

static inline u32 log_buf_len_get(void)
{
 return 0;
}

static inline void log_buf_vmcoreinfo_setup(void)
{
}

static inline void setup_log_buf(int early)
{
}

static inline __attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...)
{
}

static inline void dump_stack_print_info(const char *log_lvl)
{
}

static inline void show_regs_print_info(const char *log_lvl)
{
}

static inline void dump_stack(void)
{
}

static inline void printk_safe_flush(void)
{
}

static inline void printk_safe_flush_on_panic(void)
{
}


extern int kptr_restrict;
# 580 "include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);





static inline void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii)
{
}
static inline void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
     const void *buf, size_t len)
{
}
# 619 "include/linux/printk.h"
static inline void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 18 "include/linux/kernel.h" 2

# 1 "include/linux/static_call_types.h" 1
# 32 "include/linux/static_call_types.h"
struct static_call_site {
 s32 addr;
 s32 key;
};
# 94 "include/linux/static_call_types.h"
struct static_call_key {
 void *func;
};
# 20 "include/linux/kernel.h" 2

# 1 "include/asm-generic/irq_pipeline.h" 1
# 9 "include/asm-generic/irq_pipeline.h"
# 1 "include/linux/kconfig.h" 1




# 1 "include/generated/autoconf.h" 1
# 6 "include/linux/kconfig.h" 2
# 10 "include/asm-generic/irq_pipeline.h" 2




unsigned long inband_irq_save(void);
void inband_irq_restore(unsigned long flags);
void inband_irq_enable(void);
void inband_irq_disable(void);
int inband_irqs_disabled(void);
# 34 "include/asm-generic/irq_pipeline.h"
void irq_pipeline_nmi_enter(void);
void irq_pipeline_nmi_exit(void);
# 87 "include/asm-generic/irq_pipeline.h"
static inline void check_inband_stage(void) { }
static inline int check_hard_irqs_disabled(void) { return 0; }


extern bool irq_pipeline_oopsing;

static inline __attribute__((__always_inline__)) bool irqs_pipelined(void)
{
 return 1;
}

static inline __attribute__((__always_inline__)) bool irq_pipeline_debug(void)
{
 return 0 &&
  !irq_pipeline_oopsing;
}

static inline __attribute__((__always_inline__)) bool irq_pipeline_debug_locking(void)
{
 return 0;
}
# 22 "include/linux/kernel.h" 2
# 75 "include/linux/kernel.h"
struct completion;
struct pt_regs;
struct user;
# 159 "include/linux/kernel.h"
  static inline void ___might_sleep(const char *file, int line,
       int preempt_offset) { }
  static inline void __might_sleep(const char *file, int line,
       int preempt_offset) { }
# 178 "include/linux/kernel.h"
static inline void might_fault(void) { }


extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
extern bool oops_may_print(void);
void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));


int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 214 "include/linux/kernel.h"
static inline int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 242 "include/linux/kernel.h"
static inline int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}
# 329 "include/linux/kernel.h"
extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int init_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);


extern unsigned int sysctl_oops_all_cpu_backtrace;




extern void bust_spinlocks(int yes);
extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;
extern unsigned long panic_on_taint;
extern bool panic_on_taint_nousertaint;
extern int sysctl_panic_on_rcu_stall;
extern int sysctl_max_rcu_stall_to_panic;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
extern const char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;
# 460 "include/linux/kernel.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

extern const char hex_asc[];



static inline char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 516 "include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};
# 666 "include/linux/kernel.h"
static inline void tracing_start(void) { }
static inline void tracing_stop(void) { }
static inline void trace_dump_stack(int skip) { }

static inline void tracing_on(void) { }
static inline void tracing_off(void) { }
static inline int tracing_is_on(void) { return 0; }
static inline void tracing_snapshot(void) { }
static inline void tracing_snapshot_alloc(void) { }

static inline __attribute__((__format__(printf, 1, 2)))
int trace_printk(const char *fmt, ...)
{
 return 0;
}
static __attribute__((__format__(printf, 1, 0))) inline int
ftrace_vprintk(const char *fmt, va_list ap)
{
 return 0;
}
static inline void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
# 10 "include/linux/list.h" 2
# 33 "include/linux/list.h"
static inline void INIT_LIST_HEAD(struct list_head *list)
{
 do { do { } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 list->prev = list;
}







static inline bool __list_add_valid(struct list_head *new,
    struct list_head *prev,
    struct list_head *next)
{
 return true;
}
static inline bool __list_del_entry_valid(struct list_head *entry)
{
 return true;
}
# 63 "include/linux/list.h"
static inline void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 do { do { } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
}
# 84 "include/linux/list.h"
static inline void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 98 "include/linux/list.h"
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 110 "include/linux/list.h"
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 do { do { } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 124 "include/linux/list.h"
static inline void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}

static inline void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}







static inline void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + 0);
 entry->prev = ((void *) 0x122 + 0);
}
# 158 "include/linux/list.h"
static inline void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}
# 174 "include/linux/list.h"
static inline void list_replace_init(struct list_head *old,
         struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 240 "include/linux/list.h"
static inline void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline int list_empty(const struct list_head *head)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
}
# 296 "include/linux/list.h"
static inline void list_del_init_careful(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = entry;
 do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&entry->next) *)&(*&entry->next) = (entry); } while (0); } while (0); } while (0);
}
# 316 "include/linux/list.h"
static inline int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = ({ typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) ___p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) *)&(*&head->next)); }); do { } while (0); barrier(); (typeof(*&head->next))___p1; });
 return (next == head) && (next == head->prev);
}





static inline void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 343 "include/linux/list.h"
static inline void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 389 "include/linux/list.h"
static inline void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 417 "include/linux/list.h"
static inline void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 478 "include/linux/list.h"
static inline void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 495 "include/linux/list.h"
static inline void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 792 "include/linux/list.h"
static inline void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}
# 806 "include/linux/list.h"
static inline int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}
# 819 "include/linux/list.h"
static inline int hlist_unhashed_lockless(const struct hlist_node *h)
{
 return !({ do { } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}





static inline int hlist_empty(const struct hlist_head *h)
{
 return !({ do { } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
}

static inline void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 do { do { } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (next)
  do { do { } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}
# 850 "include/linux/list.h"
static inline void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}







static inline void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}
# 879 "include/linux/list.h"
static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 do { do { } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
 if (first)
  do { do { } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
}






static inline void hlist_add_before(struct hlist_node *n,
        struct hlist_node *next)
{
 do { do { } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
}






static inline void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 do { do { } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
 do { do { } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);

 if (n->next)
  do { do { } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 927 "include/linux/list.h"
static inline void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}





static inline bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}
# 949 "include/linux/list.h"
static inline bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}
# 963 "include/linux/list.h"
static inline void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 13 "include/linux/module.h" 2
# 1 "include/linux/stat.h" 1





# 1 "arch/arm64/include/asm/stat.h" 1







# 1 "arch/arm64/include/generated/uapi/asm/stat.h" 1
# 1 "include/uapi/asm-generic/stat.h" 1
# 24 "include/uapi/asm-generic/stat.h"
struct stat {
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned long st_rdev;
 unsigned long __pad1;
 long st_size;
 int st_blksize;
 int __pad2;
 long st_blocks;
 long st_atime;
 unsigned long st_atime_nsec;
 long st_mtime;
 unsigned long st_mtime_nsec;
 long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned int __unused4;
 unsigned int __unused5;
};
# 1 "arch/arm64/include/generated/uapi/asm/stat.h" 2
# 9 "arch/arm64/include/asm/stat.h" 2



# 1 "include/linux/time.h" 1





# 1 "include/linux/math64.h" 1





# 1 "include/vdso/math64.h" 1




static inline __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 7 "include/linux/math64.h" 2
# 1 "arch/arm64/include/generated/asm/div64.h" 1
# 8 "include/linux/math64.h" 2
# 89 "include/linux/math64.h"
static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = ({ uint32_t __base = (divisor); uint32_t __rem; (void)(((typeof((dividend)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (dividend) & (__base - 1); (dividend) >>= ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((7 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (dividend); (dividend) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (dividend); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (dividend); __rem = __n_lo - __res_lo * __base; } else if (likely(((dividend) >> 32) == 0)) { __rem = (uint32_t)(dividend) % __base; (dividend) = (uint32_t)(dividend) / __base; } else __rem = __div64_32(&(dividend), __base); __rem; });
 return dividend;
}



extern s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder);



extern u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder);



extern u64 div64_u64(u64 dividend, u64 divisor);



extern s64 div64_s64(s64 dividend, s64 divisor);
# 124 "include/linux/math64.h"
static inline u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 137 "include/linux/math64.h"
static inline s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);





static inline u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}





static inline u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}



static inline u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}
# 238 "include/linux/math64.h"
static inline u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; (void)(((typeof((rh.ll)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (rh.ll) & (__base - 1); (rh.ll) >>= ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((7 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (rh.ll); (rh.ll) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (rh.ll); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (rh.ll); __rem = __n_lo - __res_lo * __base; } else if (likely(((rh.ll) >> 32) == 0)) { __rem = (uint32_t)(rh.ll) % __base; (rh.ll) = (uint32_t)(rh.ll) / __base; } else __rem = __div64_32(&(rh.ll), __base); __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; (void)(((typeof((rl.ll)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (rl.ll) & (__base - 1); (rl.ll) >>= ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((7 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (rl.ll); (rl.ll) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (rl.ll); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (rl.ll); __rem = __n_lo - __res_lo * __base; } else if (likely(((rl.ll) >> 32) == 0)) { __rem = (uint32_t)(rl.ll) % __base; (rl.ll) = (uint32_t)(rl.ll) / __base; } else __rem = __div64_32(&(rl.ll), __base); __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}


u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
# 7 "include/linux/time.h" 2
# 1 "include/linux/time64.h" 1





# 1 "include/vdso/time64.h" 1
# 7 "include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;

# 1 "include/uapi/linux/time.h" 1





# 1 "include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_old_timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};

struct __kernel_old_itimerval {
 struct __kernel_old_timeval it_interval;
 struct __kernel_old_timeval it_value;
};

struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "include/uapi/linux/time.h" 2




struct timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 __kernel_old_time_t tv_sec;
 __kernel_suseconds_t tv_usec;
};

struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};


struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 12 "include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 41 "include/linux/time64.h"
static inline int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 125 "include/linux/time64.h"
static inline s64 timespec64_to_ns(const struct timespec64 *ts)
{

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return ((s64)~((u64)1 << 63));

 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 150 "include/linux/time64.h"
static inline __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 8 "include/linux/time.h" 2

extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);


extern void clear_itimer(void);




extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);

# 1 "include/linux/time32.h" 1
# 13 "include/linux/time32.h"
# 1 "include/linux/timex.h" 1
# 56 "include/linux/timex.h"
# 1 "include/uapi/linux/timex.h" 1
# 56 "include/uapi/linux/timex.h"
# 1 "include/linux/time.h" 1
# 57 "include/uapi/linux/timex.h" 2
# 65 "include/uapi/linux/timex.h"
struct timex {
 unsigned int modes;
 __kernel_long_t offset;
 __kernel_long_t freq;
 __kernel_long_t maxerror;
 __kernel_long_t esterror;
 int status;
 __kernel_long_t constant;
 __kernel_long_t precision;
 __kernel_long_t tolerance;


 struct timeval time;
 __kernel_long_t tick;

 __kernel_long_t ppsfreq;
 __kernel_long_t jitter;
 int shift;
 __kernel_long_t stabil;
 __kernel_long_t jitcnt;
 __kernel_long_t calcnt;
 __kernel_long_t errcnt;
 __kernel_long_t stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};


struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "include/linux/timex.h" 2
# 65 "include/linux/timex.h"
# 1 "arch/arm64/include/asm/timex.h" 1







# 1 "arch/arm64/include/asm/arch_timer.h" 1
# 12 "arch/arm64/include/asm/arch_timer.h"
# 1 "arch/arm64/include/asm/hwcap.h" 1







# 1 "arch/arm64/include/uapi/asm/hwcap.h" 1
# 9 "arch/arm64/include/asm/hwcap.h" 2
# 1 "arch/arm64/include/asm/cpufeature.h" 1
# 11 "arch/arm64/include/asm/cpufeature.h"
# 1 "arch/arm64/include/asm/hwcap.h" 1
# 12 "arch/arm64/include/asm/cpufeature.h" 2







# 1 "include/linux/bug.h" 1




# 1 "arch/arm64/include/asm/bug.h" 1
# 12 "arch/arm64/include/asm/bug.h"
# 1 "arch/arm64/include/asm/asm-bug.h" 1







# 1 "arch/arm64/include/asm/brk-imm.h" 1
# 9 "arch/arm64/include/asm/asm-bug.h" 2
# 13 "arch/arm64/include/asm/bug.h" 2
# 26 "arch/arm64/include/asm/bug.h"
# 1 "include/asm-generic/bug.h" 1





# 1 "include/linux/instrumentation.h" 1
# 7 "include/asm-generic/bug.h" 2
# 25 "include/asm-generic/bug.h"
struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 93 "include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 1, 2))) void __warn_printk(const char *fmt, ...);
# 111 "include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 27 "arch/arm64/include/asm/bug.h" 2
# 6 "include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "include/linux/bug.h"
static inline int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

void bug_get_file_line(struct bug_entry *bug, const char **file,
         unsigned int *line);

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

void generic_bug_clear_once(void);
# 80 "include/linux/bug.h"
static inline __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 20 "arch/arm64/include/asm/cpufeature.h" 2
# 1 "include/linux/jump_label.h" 1
# 79 "include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 102 "include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 117 "include/linux/jump_label.h"
# 1 "arch/arm64/include/asm/jump_label.h" 1
# 14 "arch/arm64/include/asm/jump_label.h"
# 1 "arch/arm64/include/asm/insn.h" 1
# 31 "arch/arm64/include/asm/insn.h"
enum aarch64_insn_encoding_class {
 AARCH64_INSN_CLS_UNKNOWN,
 AARCH64_INSN_CLS_DP_IMM,
 AARCH64_INSN_CLS_DP_REG,
 AARCH64_INSN_CLS_DP_FPSIMD,
 AARCH64_INSN_CLS_LDST,
 AARCH64_INSN_CLS_BR_SYS,

};

enum aarch64_insn_hint_cr_op {
 AARCH64_INSN_HINT_NOP = 0x0 << 5,
 AARCH64_INSN_HINT_YIELD = 0x1 << 5,
 AARCH64_INSN_HINT_WFE = 0x2 << 5,
 AARCH64_INSN_HINT_WFI = 0x3 << 5,
 AARCH64_INSN_HINT_SEV = 0x4 << 5,
 AARCH64_INSN_HINT_SEVL = 0x5 << 5,

 AARCH64_INSN_HINT_XPACLRI = 0x07 << 5,
 AARCH64_INSN_HINT_PACIA_1716 = 0x08 << 5,
 AARCH64_INSN_HINT_PACIB_1716 = 0x0A << 5,
 AARCH64_INSN_HINT_AUTIA_1716 = 0x0C << 5,
 AARCH64_INSN_HINT_AUTIB_1716 = 0x0E << 5,
 AARCH64_INSN_HINT_PACIAZ = 0x18 << 5,
 AARCH64_INSN_HINT_PACIASP = 0x19 << 5,
 AARCH64_INSN_HINT_PACIBZ = 0x1A << 5,
 AARCH64_INSN_HINT_PACIBSP = 0x1B << 5,
 AARCH64_INSN_HINT_AUTIAZ = 0x1C << 5,
 AARCH64_INSN_HINT_AUTIASP = 0x1D << 5,
 AARCH64_INSN_HINT_AUTIBZ = 0x1E << 5,
 AARCH64_INSN_HINT_AUTIBSP = 0x1F << 5,

 AARCH64_INSN_HINT_ESB = 0x10 << 5,
 AARCH64_INSN_HINT_PSB = 0x11 << 5,
 AARCH64_INSN_HINT_TSB = 0x12 << 5,
 AARCH64_INSN_HINT_CSDB = 0x14 << 5,

 AARCH64_INSN_HINT_BTI = 0x20 << 5,
 AARCH64_INSN_HINT_BTIC = 0x22 << 5,
 AARCH64_INSN_HINT_BTIJ = 0x24 << 5,
 AARCH64_INSN_HINT_BTIJC = 0x26 << 5,
};

enum aarch64_insn_imm_type {
 AARCH64_INSN_IMM_ADR,
 AARCH64_INSN_IMM_26,
 AARCH64_INSN_IMM_19,
 AARCH64_INSN_IMM_16,
 AARCH64_INSN_IMM_14,
 AARCH64_INSN_IMM_12,
 AARCH64_INSN_IMM_9,
 AARCH64_INSN_IMM_7,
 AARCH64_INSN_IMM_6,
 AARCH64_INSN_IMM_S,
 AARCH64_INSN_IMM_R,
 AARCH64_INSN_IMM_N,
 AARCH64_INSN_IMM_MAX
};

enum aarch64_insn_register_type {
 AARCH64_INSN_REGTYPE_RT,
 AARCH64_INSN_REGTYPE_RN,
 AARCH64_INSN_REGTYPE_RT2,
 AARCH64_INSN_REGTYPE_RM,
 AARCH64_INSN_REGTYPE_RD,
 AARCH64_INSN_REGTYPE_RA,
 AARCH64_INSN_REGTYPE_RS,
};

enum aarch64_insn_register {
 AARCH64_INSN_REG_0 = 0,
 AARCH64_INSN_REG_1 = 1,
 AARCH64_INSN_REG_2 = 2,
 AARCH64_INSN_REG_3 = 3,
 AARCH64_INSN_REG_4 = 4,
 AARCH64_INSN_REG_5 = 5,
 AARCH64_INSN_REG_6 = 6,
 AARCH64_INSN_REG_7 = 7,
 AARCH64_INSN_REG_8 = 8,
 AARCH64_INSN_REG_9 = 9,
 AARCH64_INSN_REG_10 = 10,
 AARCH64_INSN_REG_11 = 11,
 AARCH64_INSN_REG_12 = 12,
 AARCH64_INSN_REG_13 = 13,
 AARCH64_INSN_REG_14 = 14,
 AARCH64_INSN_REG_15 = 15,
 AARCH64_INSN_REG_16 = 16,
 AARCH64_INSN_REG_17 = 17,
 AARCH64_INSN_REG_18 = 18,
 AARCH64_INSN_REG_19 = 19,
 AARCH64_INSN_REG_20 = 20,
 AARCH64_INSN_REG_21 = 21,
 AARCH64_INSN_REG_22 = 22,
 AARCH64_INSN_REG_23 = 23,
 AARCH64_INSN_REG_24 = 24,
 AARCH64_INSN_REG_25 = 25,
 AARCH64_INSN_REG_26 = 26,
 AARCH64_INSN_REG_27 = 27,
 AARCH64_INSN_REG_28 = 28,
 AARCH64_INSN_REG_29 = 29,
 AARCH64_INSN_REG_FP = 29,
 AARCH64_INSN_REG_30 = 30,
 AARCH64_INSN_REG_LR = 30,
 AARCH64_INSN_REG_ZR = 31,
 AARCH64_INSN_REG_SP = 31
};

enum aarch64_insn_special_register {
 AARCH64_INSN_SPCLREG_SPSR_EL1 = 0xC200,
 AARCH64_INSN_SPCLREG_ELR_EL1 = 0xC201,
 AARCH64_INSN_SPCLREG_SP_EL0 = 0xC208,
 AARCH64_INSN_SPCLREG_SPSEL = 0xC210,
 AARCH64_INSN_SPCLREG_CURRENTEL = 0xC212,
 AARCH64_INSN_SPCLREG_DAIF = 0xDA11,
 AARCH64_INSN_SPCLREG_NZCV = 0xDA10,
 AARCH64_INSN_SPCLREG_FPCR = 0xDA20,
 AARCH64_INSN_SPCLREG_DSPSR_EL0 = 0xDA28,
 AARCH64_INSN_SPCLREG_DLR_EL0 = 0xDA29,
 AARCH64_INSN_SPCLREG_SPSR_EL2 = 0xE200,
 AARCH64_INSN_SPCLREG_ELR_EL2 = 0xE201,
 AARCH64_INSN_SPCLREG_SP_EL1 = 0xE208,
 AARCH64_INSN_SPCLREG_SPSR_INQ = 0xE218,
 AARCH64_INSN_SPCLREG_SPSR_ABT = 0xE219,
 AARCH64_INSN_SPCLREG_SPSR_UND = 0xE21A,
 AARCH64_INSN_SPCLREG_SPSR_FIQ = 0xE21B,
 AARCH64_INSN_SPCLREG_SPSR_EL3 = 0xF200,
 AARCH64_INSN_SPCLREG_ELR_EL3 = 0xF201,
 AARCH64_INSN_SPCLREG_SP_EL2 = 0xF210
};

enum aarch64_insn_variant {
 AARCH64_INSN_VARIANT_32BIT,
 AARCH64_INSN_VARIANT_64BIT
};

enum aarch64_insn_condition {
 AARCH64_INSN_COND_EQ = 0x0,
 AARCH64_INSN_COND_NE = 0x1,
 AARCH64_INSN_COND_CS = 0x2,
 AARCH64_INSN_COND_CC = 0x3,
 AARCH64_INSN_COND_MI = 0x4,
 AARCH64_INSN_COND_PL = 0x5,
 AARCH64_INSN_COND_VS = 0x6,
 AARCH64_INSN_COND_VC = 0x7,
 AARCH64_INSN_COND_HI = 0x8,
 AARCH64_INSN_COND_LS = 0x9,
 AARCH64_INSN_COND_GE = 0xa,
 AARCH64_INSN_COND_LT = 0xb,
 AARCH64_INSN_COND_GT = 0xc,
 AARCH64_INSN_COND_LE = 0xd,
 AARCH64_INSN_COND_AL = 0xe,
};

enum aarch64_insn_branch_type {
 AARCH64_INSN_BRANCH_NOLINK,
 AARCH64_INSN_BRANCH_LINK,
 AARCH64_INSN_BRANCH_RETURN,
 AARCH64_INSN_BRANCH_COMP_ZERO,
 AARCH64_INSN_BRANCH_COMP_NONZERO,
};

enum aarch64_insn_size_type {
 AARCH64_INSN_SIZE_8,
 AARCH64_INSN_SIZE_16,
 AARCH64_INSN_SIZE_32,
 AARCH64_INSN_SIZE_64,
};

enum aarch64_insn_ldst_type {
 AARCH64_INSN_LDST_LOAD_REG_OFFSET,
 AARCH64_INSN_LDST_STORE_REG_OFFSET,
 AARCH64_INSN_LDST_LOAD_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_LOAD_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_LOAD_EX,
 AARCH64_INSN_LDST_STORE_EX,
};

enum aarch64_insn_adsb_type {
 AARCH64_INSN_ADSB_ADD,
 AARCH64_INSN_ADSB_SUB,
 AARCH64_INSN_ADSB_ADD_SETFLAGS,
 AARCH64_INSN_ADSB_SUB_SETFLAGS
};

enum aarch64_insn_movewide_type {
 AARCH64_INSN_MOVEWIDE_ZERO,
 AARCH64_INSN_MOVEWIDE_KEEP,
 AARCH64_INSN_MOVEWIDE_INVERSE
};

enum aarch64_insn_bitfield_type {
 AARCH64_INSN_BITFIELD_MOVE,
 AARCH64_INSN_BITFIELD_MOVE_UNSIGNED,
 AARCH64_INSN_BITFIELD_MOVE_SIGNED
};

enum aarch64_insn_data1_type {
 AARCH64_INSN_DATA1_REVERSE_16,
 AARCH64_INSN_DATA1_REVERSE_32,
 AARCH64_INSN_DATA1_REVERSE_64,
};

enum aarch64_insn_data2_type {
 AARCH64_INSN_DATA2_UDIV,
 AARCH64_INSN_DATA2_SDIV,
 AARCH64_INSN_DATA2_LSLV,
 AARCH64_INSN_DATA2_LSRV,
 AARCH64_INSN_DATA2_ASRV,
 AARCH64_INSN_DATA2_RORV,
};

enum aarch64_insn_data3_type {
 AARCH64_INSN_DATA3_MADD,
 AARCH64_INSN_DATA3_MSUB,
};

enum aarch64_insn_logic_type {
 AARCH64_INSN_LOGIC_AND,
 AARCH64_INSN_LOGIC_BIC,
 AARCH64_INSN_LOGIC_ORR,
 AARCH64_INSN_LOGIC_ORN,
 AARCH64_INSN_LOGIC_EOR,
 AARCH64_INSN_LOGIC_EON,
 AARCH64_INSN_LOGIC_AND_SETFLAGS,
 AARCH64_INSN_LOGIC_BIC_SETFLAGS
};

enum aarch64_insn_prfm_type {
 AARCH64_INSN_PRFM_TYPE_PLD,
 AARCH64_INSN_PRFM_TYPE_PLI,
 AARCH64_INSN_PRFM_TYPE_PST,
};

enum aarch64_insn_prfm_target {
 AARCH64_INSN_PRFM_TARGET_L1,
 AARCH64_INSN_PRFM_TARGET_L2,
 AARCH64_INSN_PRFM_TARGET_L3,
};

enum aarch64_insn_prfm_policy {
 AARCH64_INSN_PRFM_POLICY_KEEP,
 AARCH64_INSN_PRFM_POLICY_STRM,
};

enum aarch64_insn_adr_type {
 AARCH64_INSN_ADR_TYPE_ADRP,
 AARCH64_INSN_ADR_TYPE_ADR,
};
# 293 "arch/arm64/include/asm/insn.h"
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_adr(u32 code) { do { } while (0); return (code & (0x9F000000)) == (0x10000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_adr_value(void) { return (0x10000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_adrp(u32 code) { do { } while (0); return (code & (0x9F000000)) == (0x90000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_adrp_value(void) { return (0x90000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_prfm(u32 code) { do { } while (0); return (code & (0x3FC00000)) == (0x39800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_prfm_value(void) { return (0x39800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_prfm_lit(u32 code) { do { } while (0); return (code & (0xFF000000)) == (0xD8000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_prfm_lit_value(void) { return (0xD8000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_str_reg(u32 code) { do { } while (0); return (code & (0x3FE0EC00)) == (0x38206800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_str_reg_value(void) { return (0x38206800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ldadd(u32 code) { do { } while (0); return (code & (0x3F20FC00)) == (0x38200000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ldadd_value(void) { return (0x38200000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ldr_reg(u32 code) { do { } while (0); return (code & (0x3FE0EC00)) == (0x38606800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ldr_reg_value(void) { return (0x38606800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ldr_lit(u32 code) { do { } while (0); return (code & (0xBF000000)) == (0x18000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ldr_lit_value(void) { return (0x18000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ldrsw_lit(u32 code) { do { } while (0); return (code & (0xFF000000)) == (0x98000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ldrsw_lit_value(void) { return (0x98000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_exclusive(u32 code) { do { } while (0); return (code & (0x3F800000)) == (0x08000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_exclusive_value(void) { return (0x08000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_load_ex(u32 code) { do { } while (0); return (code & (0x3F400000)) == (0x08400000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_load_ex_value(void) { return (0x08400000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_store_ex(u32 code) { do { } while (0); return (code & (0x3F400000)) == (0x08000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_store_ex_value(void) { return (0x08000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_stp_post(u32 code) { do { } while (0); return (code & (0x7FC00000)) == (0x28800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_post_value(void) { return (0x28800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ldp_post(u32 code) { do { } while (0); return (code & (0x7FC00000)) == (0x28C00000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_post_value(void) { return (0x28C00000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_stp_pre(u32 code) { do { } while (0); return (code & (0x7FC00000)) == (0x29800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_pre_value(void) { return (0x29800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ldp_pre(u32 code) { do { } while (0); return (code & (0x7FC00000)) == (0x29C00000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_pre_value(void) { return (0x29C00000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_add_imm(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x11000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_add_imm_value(void) { return (0x11000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_adds_imm(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x31000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_adds_imm_value(void) { return (0x31000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_sub_imm(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x51000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_sub_imm_value(void) { return (0x51000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_subs_imm(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x71000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_subs_imm_value(void) { return (0x71000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_movn(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x12800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_movn_value(void) { return (0x12800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_sbfm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x13000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_sbfm_value(void) { return (0x13000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_bfm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x33000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_bfm_value(void) { return (0x33000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_movz(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x52800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_movz_value(void) { return (0x52800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ubfm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x53000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ubfm_value(void) { return (0x53000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_movk(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x72800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_movk_value(void) { return (0x72800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_add(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x0B000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_add_value(void) { return (0x0B000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_adds(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x2B000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_adds_value(void) { return (0x2B000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_sub(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x4B000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_sub_value(void) { return (0x4B000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_subs(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x6B000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_subs_value(void) { return (0x6B000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_madd(u32 code) { do { } while (0); return (code & (0x7FE08000)) == (0x1B000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_madd_value(void) { return (0x1B000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_msub(u32 code) { do { } while (0); return (code & (0x7FE08000)) == (0x1B008000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_msub_value(void) { return (0x1B008000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_udiv(u32 code) { do { } while (0); return (code & (0x7FE0FC00)) == (0x1AC00800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_udiv_value(void) { return (0x1AC00800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_sdiv(u32 code) { do { } while (0); return (code & (0x7FE0FC00)) == (0x1AC00C00); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_sdiv_value(void) { return (0x1AC00C00); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_lslv(u32 code) { do { } while (0); return (code & (0x7FE0FC00)) == (0x1AC02000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_lslv_value(void) { return (0x1AC02000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_lsrv(u32 code) { do { } while (0); return (code & (0x7FE0FC00)) == (0x1AC02400); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_lsrv_value(void) { return (0x1AC02400); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_asrv(u32 code) { do { } while (0); return (code & (0x7FE0FC00)) == (0x1AC02800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_asrv_value(void) { return (0x1AC02800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_rorv(u32 code) { do { } while (0); return (code & (0x7FE0FC00)) == (0x1AC02C00); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_rorv_value(void) { return (0x1AC02C00); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_rev16(u32 code) { do { } while (0); return (code & (0x7FFFFC00)) == (0x5AC00400); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_rev16_value(void) { return (0x5AC00400); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_rev32(u32 code) { do { } while (0); return (code & (0x7FFFFC00)) == (0x5AC00800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_rev32_value(void) { return (0x5AC00800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_rev64(u32 code) { do { } while (0); return (code & (0x7FFFFC00)) == (0x5AC00C00); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_rev64_value(void) { return (0x5AC00C00); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_and(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x0A000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_and_value(void) { return (0x0A000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_bic(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x0A200000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_bic_value(void) { return (0x0A200000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_orr(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x2A000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_orr_value(void) { return (0x2A000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_orn(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x2A200000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_orn_value(void) { return (0x2A200000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_eor(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x4A000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_eor_value(void) { return (0x4A000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_eon(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x4A200000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_eon_value(void) { return (0x4A200000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ands(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x6A000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ands_value(void) { return (0x6A000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_bics(u32 code) { do { } while (0); return (code & (0x7F200000)) == (0x6A200000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_bics_value(void) { return (0x6A200000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_and_imm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x12000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_and_imm_value(void) { return (0x12000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_orr_imm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x32000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_orr_imm_value(void) { return (0x32000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_eor_imm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x52000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_eor_imm_value(void) { return (0x52000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ands_imm(u32 code) { do { } while (0); return (code & (0x7F800000)) == (0x72000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ands_imm_value(void) { return (0x72000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_extr(u32 code) { do { } while (0); return (code & (0x7FA00000)) == (0x13800000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_extr_value(void) { return (0x13800000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_b(u32 code) { do { } while (0); return (code & (0xFC000000)) == (0x14000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_b_value(void) { return (0x14000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_bl(u32 code) { do { } while (0); return (code & (0xFC000000)) == (0x94000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_bl_value(void) { return (0x94000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_cbz(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x34000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_cbz_value(void) { return (0x34000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_cbnz(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x35000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_cbnz_value(void) { return (0x35000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_tbz(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x36000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_tbz_value(void) { return (0x36000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_tbnz(u32 code) { do { } while (0); return (code & (0x7F000000)) == (0x37000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_tbnz_value(void) { return (0x37000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_bcond(u32 code) { do { } while (0); return (code & (0xFF000010)) == (0x54000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_bcond_value(void) { return (0x54000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_svc(u32 code) { do { } while (0); return (code & (0xFFE0001F)) == (0xD4000001); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_svc_value(void) { return (0xD4000001); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_hvc(u32 code) { do { } while (0); return (code & (0xFFE0001F)) == (0xD4000002); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_hvc_value(void) { return (0xD4000002); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_smc(u32 code) { do { } while (0); return (code & (0xFFE0001F)) == (0xD4000003); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_smc_value(void) { return (0xD4000003); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_brk(u32 code) { do { } while (0); return (code & (0xFFE0001F)) == (0xD4200000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_brk_value(void) { return (0xD4200000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_exception(u32 code) { do { } while (0); return (code & (0xFF000000)) == (0xD4000000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_exception_value(void) { return (0xD4000000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_hint(u32 code) { do { } while (0); return (code & (0xFFFFF01F)) == (0xD503201F); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_hint_value(void) { return (0xD503201F); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_br(u32 code) { do { } while (0); return (code & (0xFFFFFC1F)) == (0xD61F0000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_br_value(void) { return (0xD61F0000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_br_auth(u32 code) { do { } while (0); return (code & (0xFEFFF800)) == (0xD61F0800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_br_auth_value(void) { return (0xD61F0800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_blr(u32 code) { do { } while (0); return (code & (0xFFFFFC1F)) == (0xD63F0000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_blr_value(void) { return (0xD63F0000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_blr_auth(u32 code) { do { } while (0); return (code & (0xFEFFF800)) == (0xD63F0800); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_blr_auth_value(void) { return (0xD63F0800); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ret(u32 code) { do { } while (0); return (code & (0xFFFFFC1F)) == (0xD65F0000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ret_value(void) { return (0xD65F0000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_ret_auth(u32 code) { do { } while (0); return (code & (0xFFFFFBFF)) == (0xD65F0BFF); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_ret_auth_value(void) { return (0xD65F0BFF); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_eret(u32 code) { do { } while (0); return (code & (0xFFFFFFFF)) == (0xD69F03E0); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_eret_value(void) { return (0xD69F03E0); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_eret_auth(u32 code) { do { } while (0); return (code & (0xFFFFFBFF)) == (0xD69F0BFF); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_eret_auth_value(void) { return (0xD69F0BFF); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_mrs(u32 code) { do { } while (0); return (code & (0xFFF00000)) == (0xD5300000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_mrs_value(void) { return (0xD5300000); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_msr_imm(u32 code) { do { } while (0); return (code & (0xFFF8F01F)) == (0xD500401F); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_msr_imm_value(void) { return (0xD500401F); }
static inline __attribute__((__always_inline__)) bool aarch64_insn_is_msr_reg(u32 code) { do { } while (0); return (code & (0xFFF00000)) == (0xD5100000); } static inline __attribute__((__always_inline__)) u32 aarch64_insn_get_msr_reg_value(void) { return (0xD5100000); }



bool aarch64_insn_is_steppable_hint(u32 insn);
bool aarch64_insn_is_branch_imm(u32 insn);

static inline bool aarch64_insn_is_adr_adrp(u32 insn)
{
 return aarch64_insn_is_adr(insn) || aarch64_insn_is_adrp(insn);
}

int aarch64_insn_read(void *addr, u32 *insnp);
int aarch64_insn_write(void *addr, u32 insn);
enum aarch64_insn_encoding_class aarch64_get_insn_class(u32 insn);
bool aarch64_insn_uses_literal(u32 insn);
bool aarch64_insn_is_branch(u32 insn);
u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type type, u32 insn);
u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type type,
      u32 insn, u64 imm);
u32 aarch64_insn_decode_register(enum aarch64_insn_register_type type,
      u32 insn);
u32 aarch64_insn_gen_branch_imm(unsigned long pc, unsigned long addr,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_comp_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_register reg,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_cond_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_condition cond);
u32 aarch64_insn_gen_hint(enum aarch64_insn_hint_cr_op op);
u32 aarch64_insn_gen_nop(void);
u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register reg,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register reg,
        enum aarch64_insn_register base,
        enum aarch64_insn_register offset,
        enum aarch64_insn_size_type size,
        enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register reg1,
         enum aarch64_insn_register reg2,
         enum aarch64_insn_register base,
         int offset,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register reg,
       enum aarch64_insn_register base,
       enum aarch64_insn_register state,
       enum aarch64_insn_size_type size,
       enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_ldadd(enum aarch64_insn_register result,
      enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_stadd(enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register dst,
     enum aarch64_insn_register src,
     int imm, enum aarch64_insn_variant variant,
     enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_adr(unsigned long pc, unsigned long addr,
    enum aarch64_insn_register reg,
    enum aarch64_insn_adr_type type);
u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register dst,
         enum aarch64_insn_register src,
         int immr, int imms,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_bitfield_type type);
u32 aarch64_insn_gen_movewide(enum aarch64_insn_register dst,
         int imm, int shift,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_movewide_type type);
u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_data1(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data1_type type);
u32 aarch64_insn_gen_data2(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data2_type type);
u32 aarch64_insn_gen_data3(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg1,
      enum aarch64_insn_register reg2,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data3_type type);
u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_logic_type type);
u32 aarch64_insn_gen_move_reg(enum aarch64_insn_register dst,
         enum aarch64_insn_register src,
         enum aarch64_insn_variant variant);
u32 aarch64_insn_gen_logical_immediate(enum aarch64_insn_logic_type type,
           enum aarch64_insn_variant variant,
           enum aarch64_insn_register Rn,
           enum aarch64_insn_register Rd,
           u64 imm);
u32 aarch64_insn_gen_extr(enum aarch64_insn_variant variant,
     enum aarch64_insn_register Rm,
     enum aarch64_insn_register Rn,
     enum aarch64_insn_register Rd,
     u8 lsb);
u32 aarch64_insn_gen_prefetch(enum aarch64_insn_register base,
         enum aarch64_insn_prfm_type type,
         enum aarch64_insn_prfm_target target,
         enum aarch64_insn_prfm_policy policy);
s32 aarch64_get_branch_offset(u32 insn);
u32 aarch64_set_branch_offset(u32 insn, s32 offset);

int aarch64_insn_patch_text_nosync(void *addr, u32 insn);
int aarch64_insn_patch_text(void *addrs[], u32 insns[], int cnt);

s32 aarch64_insn_adrp_get_offset(u32 insn);
u32 aarch64_insn_adrp_set_offset(u32 insn, s32 offset);

bool aarch32_insn_is_wide(u32 insn);





u32 aarch64_insn_extract_system_reg(u32 insn);
u32 aarch32_insn_extract_reg_num(u32 insn, int offset);
u32 aarch32_insn_mcr_extract_opc2(u32 insn);
u32 aarch32_insn_mcr_extract_crm(u32 insn);

typedef bool (pstate_check_t)(unsigned long);
extern pstate_check_t * const aarch32_opcode_cond_checks[16];
# 15 "arch/arm64/include/asm/jump_label.h" 2



static inline __attribute__((__always_inline__)) bool arch_static_branch(struct static_key *key,
            bool branch)
{
 asm goto("1:	nop					\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		3			\n\t" "	.long		1b - ., %l[l_yes] - .	\n\t" "	.quad		%c0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : l_yes)






                                                ;

 return false;
l_yes:
 return true;
}

static inline __attribute__((__always_inline__)) bool arch_static_branch_jump(struct static_key *key,
          bool branch)
{
 asm goto("1:	b		%l[l_yes]		\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		3			\n\t" "	.long		1b - ., %l[l_yes] - .	\n\t" "	.quad		%c0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : l_yes)






                                                ;

 return false;
l_yes:
 return true;
}
# 118 "include/linux/jump_label.h" 2




struct jump_entry {
 s32 code;
 s32 target;
 long key;
};

static inline unsigned long jump_entry_code(const struct jump_entry *entry)
{
 return (unsigned long)&entry->code + entry->code;
}

static inline unsigned long jump_entry_target(const struct jump_entry *entry)
{
 return (unsigned long)&entry->target + entry->target;
}

static inline struct static_key *jump_entry_key(const struct jump_entry *entry)
{
 long offset = entry->key & ~3L;

 return (struct static_key *)((unsigned long)&entry->key + offset);
}
# 164 "include/linux/jump_label.h"
static inline bool jump_entry_is_branch(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 1UL;
}

static inline bool jump_entry_is_init(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 2UL;
}

static inline void jump_entry_set_init(struct jump_entry *entry)
{
 entry->key |= 2;
}






enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 198 "include/linux/jump_label.h"
static inline __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern bool arch_jump_label_transform_queue(struct jump_entry *entry,
         enum jump_label_type type);
extern void arch_jump_label_transform_apply(void);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 346 "include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 400 "include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 21 "arch/arm64/include/asm/cpufeature.h" 2
# 37 "arch/arm64/include/asm/cpufeature.h"
enum ftr_type {
 FTR_EXACT,
 FTR_LOWER_SAFE,
 FTR_HIGHER_SAFE,
 FTR_HIGHER_OR_ZERO_SAFE,
};
# 56 "arch/arm64/include/asm/cpufeature.h"
struct arm64_ftr_bits {
 bool sign;
 bool visible;
 bool strict;
 enum ftr_type type;
 u8 shift;
 u8 width;
 s64 safe_val;
};
# 83 "arch/arm64/include/asm/cpufeature.h"
struct arm64_ftr_override {
 u64 val;
 u64 mask;
};






struct arm64_ftr_reg {
 const char *name;
 u64 strict_mask;
 u64 user_mask;
 u64 sys_val;
 u64 user_val;
 struct arm64_ftr_override *override;
 const struct arm64_ftr_bits *ftr_bits;
};

extern struct arm64_ftr_reg arm64_ftr_reg_ctrel0;
# 328 "arch/arm64/include/asm/cpufeature.h"
struct arm64_cpu_capabilities {
 const char *desc;
 u16 capability;
 u16 type;
 bool (*matches)(const struct arm64_cpu_capabilities *caps, int scope);
# 345 "arch/arm64/include/asm/cpufeature.h"
 void (*cpu_enable)(const struct arm64_cpu_capabilities *cap);
 union {
  struct {
   struct midr_range midr_range;
   const struct arm64_midr_revidr {
    u32 midr_rv;
    u32 revidr_mask;
   } * const fixed_revs;
  };

  const struct midr_range *midr_range_list;
  struct {
   u32 sys_reg;
   u8 field_pos;
   u8 min_field_value;
   u8 hwcap_type;
   bool sign;
   unsigned long hwcap;
  };
 };
# 377 "arch/arm64/include/asm/cpufeature.h"
 const struct arm64_cpu_capabilities *match_list;
};

static inline int cpucap_default_scope(const struct arm64_cpu_capabilities *cap)
{
 return cap->type & (((u16)((((1UL))) << (1))) | ((u16)((((1UL))) << (0))) | ((u16)((((1UL))) << (2))));
}






static inline bool
cpucap_multi_entry_cap_matches(const struct arm64_cpu_capabilities *entry,
          int scope)
{
 const struct arm64_cpu_capabilities *caps;

 for (caps = entry->match_list; caps->matches; caps++)
  if (caps->matches(caps, scope))
   return true;

 return false;
}

static inline __attribute__((__always_inline__)) bool is_vhe_hyp_code(void)
{

 return 0;
}

static inline __attribute__((__always_inline__)) bool is_nvhe_hyp_code(void)
{

 return 0;
}

static inline __attribute__((__always_inline__)) bool is_hyp_code(void)
{
 return is_vhe_hyp_code() || is_nvhe_hyp_code();
}

extern unsigned long cpu_hwcaps[(((61) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
extern struct static_key_false cpu_hwcap_keys[61];
extern struct static_key_false arm64_const_caps_ready;



extern unsigned long boot_capabilities[((((61 + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];




bool this_cpu_has_cap(unsigned int cap);
void cpu_set_feature(unsigned int num);
bool cpu_have_feature(unsigned int num);
unsigned long cpu_get_elf_hwcap(void);
unsigned long cpu_get_elf_hwcap2(void);




static inline __attribute__((__always_inline__)) bool system_capabilities_finalized(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_true)) branch = !arch_static_branch(&(&arm64_const_caps_ready)->key, true); else if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_false)) branch = !arch_static_branch_jump(&(&arm64_const_caps_ready)->key, true); else branch = ____wrong_branch_error(); likely_notrace(branch); });
}






static inline bool cpus_have_cap(unsigned int num)
{
 if (num >= 61)
  return false;
 return test_bit(num, cpu_hwcaps);
}
# 465 "arch/arm64/include/asm/cpufeature.h"
static inline __attribute__((__always_inline__)) bool __cpus_have_const_cap(int num)
{
 if (num >= 61)
  return false;
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[num]), struct static_key_true)) branch = arch_static_branch_jump(&(&cpu_hwcap_keys[num])->key, false); else if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[num]), struct static_key_false)) branch = arch_static_branch(&(&cpu_hwcap_keys[num])->key, false); else branch = ____wrong_branch_error(); unlikely_notrace(branch); });
}
# 480 "arch/arm64/include/asm/cpufeature.h"
static inline __attribute__((__always_inline__)) bool cpus_have_final_cap(int num)
{
 if (system_capabilities_finalized())
  return __cpus_have_const_cap(num);
 else
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/cpufeature.h\"; .popsection; .long 14472b - 14470b; .short 485; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0);
}
# 499 "arch/arm64/include/asm/cpufeature.h"
static inline __attribute__((__always_inline__)) bool cpus_have_const_cap(int num)
{
 if (is_hyp_code())
  return cpus_have_final_cap(num);
 else if (system_capabilities_finalized())
  return __cpus_have_const_cap(num);
 else
  return cpus_have_cap(num);
}

static inline void cpus_set_cap(unsigned int num)
{
 if (num >= 61) {
  printk("\001" "4" "Attempt to set an illegal CPU capability (%d >= %d)\n", num, 61)
                    ;
 } else {
  __set_bit(num, cpu_hwcaps);
 }
}

static inline int __attribute__((__const__))
cpuid_feature_extract_signed_field_width(u64 features, int field, int width)
{
 return (s64)(features << (64 - width - field)) >> (64 - width);
}

static inline int __attribute__((__const__))
cpuid_feature_extract_signed_field(u64 features, int field)
{
 return cpuid_feature_extract_signed_field_width(features, field, 4);
}

static inline __attribute__((__always_inline__)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field_width(u64 features, int field, int width)
{
 return (u64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((__always_inline__)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field(u64 features, int field)
{
 return cpuid_feature_extract_unsigned_field_width(features, field, 4);
}






static inline u64 __attribute__((__const__))
cpuid_feature_cap_perfmon_field(u64 features, int field, u64 cap)
{
 u64 val = cpuid_feature_extract_unsigned_field(features, field);
 u64 mask = ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((field) > (field + 3)) * 0l)) : (int *)8))), (field) > (field + 3), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (field)) + 1) & (~(((0ULL))) >> (
# 552 "arch/arm64/include/asm/cpufeature.h" 3 4
           64 
# 552 "arch/arm64/include/asm/cpufeature.h"
           - 1 - (field + 3)))));


 if (val == 0xf)
  val = 0;

 if (val > cap) {
  features &= ~mask;
  features |= (cap << field) & mask;
 }

 return features;
}

static inline u64 arm64_ftr_mask(const struct arm64_ftr_bits *ftrp)
{
 return (u64)((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((ftrp->shift) > (ftrp->shift + ftrp->width - 1)) * 0l)) : (int *)8))), (ftrp->shift) > (ftrp->shift + ftrp->width - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (ftrp->shift)) + 1) & (~(((0UL))) >> (
# 568 "arch/arm64/include/asm/cpufeature.h" 3 4
            32 
# 568 "arch/arm64/include/asm/cpufeature.h"
            - 1 - (ftrp->shift + ftrp->width - 1)))));
}

static inline u64 arm64_ftr_reg_user_value(const struct arm64_ftr_reg *reg)
{
 return (reg->user_val | (reg->sys_val & reg->user_mask));
}

static inline int __attribute__((__const__))
cpuid_feature_extract_field_width(u64 features, int field, int width, bool sign)
{
 return (sign) ?
  cpuid_feature_extract_signed_field_width(features, field, width) :
  cpuid_feature_extract_unsigned_field_width(features, field, width);
}

static inline int __attribute__((__const__))
cpuid_feature_extract_field(u64 features, int field, bool sign)
{
 return cpuid_feature_extract_field_width(features, field, 4, sign);
}

static inline s64 arm64_ftr_value(const struct arm64_ftr_bits *ftrp, u64 val)
{
 return (s64)cpuid_feature_extract_field_width(val, ftrp->shift, ftrp->width, ftrp->sign);
}

static inline bool id_aa64mmfr0_mixed_endian_el0(u64 mmfr0)
{
 return cpuid_feature_extract_unsigned_field(mmfr0, 8) == 0x1 ||
  cpuid_feature_extract_unsigned_field(mmfr0, 16) == 0x1;
}

static inline bool id_aa64pfr0_32bit_el1(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 4);

 return val == 0x2;
}

static inline bool id_aa64pfr0_32bit_el0(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 0);

 return val == 0x2;
}

static inline bool id_aa64pfr0_sve(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 32);

 return val > 0;
}

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_cpu_features(void);
void check_local_cpu_capabilities(void);

u64 read_sanitised_ftr_reg(u32 id);
u64 __read_sysreg_by_encoding(u32 sys_id);

static inline bool cpu_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; }));
}

static inline bool system_supports_32bit_el0(void)
{
 return cpus_have_const_cap(1);
}

static inline bool system_supports_4kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      28);

 return val == 0x0;
}

static inline bool system_supports_64kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      24);

 return val == 0x0;
}

static inline bool system_supports_16kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      20);

 return val == 0x1;
}

static inline bool system_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))));
}

static inline bool system_supports_mixed_endian(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      8);

 return val == 0x1;
}

static inline __attribute__((__always_inline__)) bool system_supports_fpsimd(void)
{
 return !cpus_have_const_cap(22);
}

static inline bool system_uses_hw_pan(void)
{
 return 1 &&
  cpus_have_const_cap(24);
}

static inline bool system_uses_ttbr0_pan(void)
{
 return 0 &&
  !system_uses_hw_pan();
}

static inline __attribute__((__always_inline__)) bool system_supports_sve(void)
{
 return 1 &&
  cpus_have_const_cap(40);
}

static inline __attribute__((__always_inline__)) bool system_supports_cnp(void)
{
 return 1 &&
  cpus_have_const_cap(10);
}

static inline bool system_supports_address_auth(void)
{
 return 1 &&
  cpus_have_const_cap(3);
}

static inline bool system_supports_generic_auth(void)
{
 return 1 &&
  cpus_have_const_cap(16);
}

static inline bool system_has_full_ptr_auth(void)
{
 return system_supports_address_auth() && system_supports_generic_auth();
}

static inline __attribute__((__always_inline__)) bool system_uses_irq_prio_masking(void)
{
 return 0 &&
        cpus_have_const_cap(19);
}

static inline bool system_supports_mte(void)
{
 return 0 &&
  cpus_have_const_cap(35);
}

static inline bool system_has_prio_mask_debugging(void)
{
 return 0 &&
        system_uses_irq_prio_masking();
}

static inline bool system_supports_bti(void)
{
 return 1 && cpus_have_const_cap(0);
}

static inline bool system_supports_tlb_range(void)
{
 return 1 &&
  cpus_have_const_cap(30);
}

extern int do_emulate_mrs(struct pt_regs *regs, u32 sys_reg, u32 rt);

static inline u32 id_aa64mmfr0_parange_to_phys_shift(int parange)
{
 switch (parange) {
 case 0: return 32;
 case 1: return 36;
 case 2: return 40;
 case 3: return 42;
 case 4: return 44;
 case 5: return 48;
 case 6: return 52;







 default: return 48;
 }
}


static inline bool cpu_has_hw_af(void)
{
 u64 mmfr1;

 if (!1)
  return false;

 mmfr1 = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
 return cpuid_feature_extract_unsigned_field(mmfr1,
      0);
}

static inline bool cpu_has_pan(void)
{
 u64 mmfr1 = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
 return cpuid_feature_extract_unsigned_field(mmfr1,
          20);
}



extern bool cpu_has_amu_feat(int cpu);
# 820 "arch/arm64/include/asm/cpufeature.h"
extern int get_cpu_with_amu_feat(void);

static inline unsigned int get_vmid_bits(u64 mmfr1)
{
 int vmid_bits;

 vmid_bits = cpuid_feature_extract_unsigned_field(mmfr1,
      4);
 if (vmid_bits == 2)
  return 16;





 return 8;
}

extern struct arm64_ftr_override id_aa64mmfr1_override;
extern struct arm64_ftr_override id_aa64pfr1_override;
extern struct arm64_ftr_override id_aa64isar1_override;

u32 get_kvm_ipa_limit(void);
void dump_cpu_features(void);
# 10 "arch/arm64/include/asm/hwcap.h" 2
# 119 "arch/arm64/include/asm/hwcap.h"
extern unsigned int compat_elf_hwcap, compat_elf_hwcap2;


enum {
 CAP_HWCAP = 1,

 CAP_COMPAT_HWCAP,
 CAP_COMPAT_HWCAP2,

};
# 13 "arch/arm64/include/asm/arch_timer.h" 2





# 1 "include/linux/smp.h" 1
# 10 "include/linux/smp.h"
# 1 "include/linux/errno.h" 1




# 1 "include/uapi/linux/errno.h" 1
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "include/uapi/asm-generic/errno.h" 1 3 4




# 1 "include/uapi/asm-generic/errno-base.h" 1 3 4
# 6 "include/uapi/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "include/uapi/linux/errno.h" 2
# 6 "include/linux/errno.h" 2
# 11 "include/linux/smp.h" 2


# 1 "include/linux/cpumask.h" 1
# 11 "include/linux/cpumask.h"
# 1 "include/linux/threads.h" 1
# 12 "include/linux/cpumask.h" 2
# 1 "include/linux/bitmap.h" 1
# 10 "include/linux/bitmap.h"
# 1 "include/linux/string.h" 1
# 11 "include/linux/string.h"
# 1 "include/uapi/linux/string.h" 1







# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4

# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 90 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 153 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 225 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 302 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 329 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 384 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 409 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 427 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int 
# 104 "/usr/include/strings.h"
          __builtin_ffs(
# 104 "/usr/include/strings.h" 3 4
          int __i
# 104 "/usr/include/strings.h"
          ) 
# 104 "/usr/include/strings.h" 3 4
                        __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 498 "/usr/include/string.h" 3 4

# 9 "include/uapi/linux/string.h" 2
# 12 "include/linux/string.h" 2


# 13 "include/linux/string.h"
extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "arch/arm64/include/asm/string.h" 1
# 10 "arch/arm64/include/asm/string.h"
extern char *strrchr(const char *, int c);


extern char *strchr(const char *, int c);


extern int strcmp(const char *, const char *);


extern int strncmp(const char *, const char *, __kernel_size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *, __kernel_size_t);


extern int memcmp(const void *, const void *, size_t);


extern void *memchr(const void *, int, __kernel_size_t);



extern void *memcpy(void *, const void *, __kernel_size_t);
extern void *__memcpy(void *, const void *, __kernel_size_t);


extern void *memmove(void *, const void *, __kernel_size_t);
extern void *__memmove(void *, const void *, __kernel_size_t);


extern void *memset(void *, int, __kernel_size_t);
extern void *__memset(void *, int, __kernel_size_t);
# 22 "include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);
# 55 "include/linux/string.h"
extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);





extern char * strchrnul(const char *,int);

extern char * strnchrnul(const char *, size_t, int);

extern char * strnchr(const char *, size_t, int);




extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);
# 95 "include/linux/string.h"
extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);



extern void *memset32(uint32_t *, uint32_t, __kernel_size_t);



extern void *memset64(uint64_t *, uint64_t, __kernel_size_t);


static inline void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (
# 126 "include/linux/string.h" 3 4
    32 
# 126 "include/linux/string.h"
                  == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (
# 134 "include/linux/string.h" 3 4
    32 
# 134 "include/linux/string.h"
                  == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 154 "include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);





extern int bcmp(const void *,const void *,__kernel_size_t);





static inline void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
}


void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
extern int kstrtobool(const char *s, bool *res);
static inline int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}

int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 211 "include/linux/string.h"
extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);

int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);






static inline bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
# 242 "include/linux/string.h"
static inline void memzero_explicit(void *s, size_t count)
{
 memset(s, 0, count);
 barrier_data(s);
}






static inline const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}




void fortify_panic(const char *name) __attribute__((__noreturn__)) __attribute__((__cold__));
void __read_overflow(void) ;
void __read_overflow2(void) ;
void __read_overflow3(void) ;
void __write_overflow(void) ;
# 280 "include/linux/string.h"
static inline void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  memcpy(dest, src, count);
  memset(dest + count, pad, dest_len - count);
 } else
  memcpy(dest, src, dest_len);
}
# 305 "include/linux/string.h"
static 
# 305 "include/linux/string.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 305 "include/linux/string.h"
                      size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 11 "include/linux/bitmap.h" 2


struct device;
# 124 "include/linux/bitmap.h"
unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
void bitmap_free(const unsigned long *bitmap);


unsigned long *devm_bitmap_alloc(struct device *dev,
     unsigned int nbits, gfp_t flags);
unsigned long *devm_bitmap_zalloc(struct device *dev,
      unsigned int nbits, gfp_t flags);





int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
void __bitmap_complement(unsigned long *dst, const unsigned long *src,
    unsigned int nbits);
void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
     unsigned int shift, unsigned int nbits);
void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
void bitmap_cut(unsigned long *dst, const unsigned long *src,
  unsigned int first, unsigned int cut, unsigned int nbits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
    const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_replace(unsigned long *dst,
        const unsigned long *old, const unsigned long *new,
        const unsigned long *mask, unsigned int nbits);
int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_subset(const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
void __bitmap_set(unsigned long *map, unsigned int start, int len);
void __bitmap_clear(unsigned long *map, unsigned int start, int len);

unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 190 "include/linux/bitmap.h"
static inline unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *dst, int nbits);
int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);






unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);




static inline void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 
# 259 "include/linux/bitmap.h" 3 4
            32
# 259 "include/linux/bitmap.h"
                         )
  dst[nbits / 
# 260 "include/linux/bitmap.h" 3 4
             32
# 260 "include/linux/bitmap.h"
                          ] &= (~0UL >> (-(nbits) & (
# 260 "include/linux/bitmap.h" 3 4
                               32 
# 260 "include/linux/bitmap.h"
                               - 1)));
}
# 281 "include/linux/bitmap.h"
static inline int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 284 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 284 "include/linux/bitmap.h"
    nbits
# 284 "include/linux/bitmap.h" 3 4
    ) && (
# 284 "include/linux/bitmap.h"
    nbits
# 284 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 284 "include/linux/bitmap.h"
    nbits
# 284 "include/linux/bitmap.h" 3 4
    ) > 0)
# 284 "include/linux/bitmap.h"
                            )
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (
# 285 "include/linux/bitmap.h" 3 4
                                32 
# 285 "include/linux/bitmap.h"
                                - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 292 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 292 "include/linux/bitmap.h"
    nbits
# 292 "include/linux/bitmap.h" 3 4
    ) && (
# 292 "include/linux/bitmap.h"
    nbits
# 292 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 292 "include/linux/bitmap.h"
    nbits
# 292 "include/linux/bitmap.h" 3 4
    ) > 0)
# 292 "include/linux/bitmap.h"
                            )
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 301 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 301 "include/linux/bitmap.h"
    nbits
# 301 "include/linux/bitmap.h" 3 4
    ) && (
# 301 "include/linux/bitmap.h"
    nbits
# 301 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 301 "include/linux/bitmap.h"
    nbits
# 301 "include/linux/bitmap.h" 3 4
    ) > 0)
# 301 "include/linux/bitmap.h"
                            )
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 310 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 310 "include/linux/bitmap.h"
    nbits
# 310 "include/linux/bitmap.h" 3 4
    ) && (
# 310 "include/linux/bitmap.h"
    nbits
# 310 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 310 "include/linux/bitmap.h"
    nbits
# 310 "include/linux/bitmap.h" 3 4
    ) > 0)
# 310 "include/linux/bitmap.h"
                            )
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (
# 311 "include/linux/bitmap.h" 3 4
                                   32 
# 311 "include/linux/bitmap.h"
                                   - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if (
# 318 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 318 "include/linux/bitmap.h"
    nbits
# 318 "include/linux/bitmap.h" 3 4
    ) && (
# 318 "include/linux/bitmap.h"
    nbits
# 318 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 318 "include/linux/bitmap.h"
    nbits
# 318 "include/linux/bitmap.h" 3 4
    ) > 0)
# 318 "include/linux/bitmap.h"
                            )
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 331 "include/linux/bitmap.h"
static inline int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 334 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 334 "include/linux/bitmap.h"
    nbits
# 334 "include/linux/bitmap.h" 3 4
    ) && (
# 334 "include/linux/bitmap.h"
    nbits
# 334 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 334 "include/linux/bitmap.h"
    nbits
# 334 "include/linux/bitmap.h" 3 4
    ) > 0)
# 334 "include/linux/bitmap.h"
                            )
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (
# 335 "include/linux/bitmap.h" 3 4
                            32 
# 335 "include/linux/bitmap.h"
                            - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 351 "include/linux/bitmap.h"
static inline bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!
# 356 "include/linux/bitmap.h" 3 4
     (__builtin_constant_p(
# 356 "include/linux/bitmap.h"
     nbits
# 356 "include/linux/bitmap.h" 3 4
     ) && (
# 356 "include/linux/bitmap.h"
     nbits
# 356 "include/linux/bitmap.h" 3 4
     ) <= 32 && (
# 356 "include/linux/bitmap.h"
     nbits
# 356 "include/linux/bitmap.h" 3 4
     ) > 0)
# 356 "include/linux/bitmap.h"
                             )
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (
# 359 "include/linux/bitmap.h" 3 4
                                     32 
# 359 "include/linux/bitmap.h"
                                     - 1))));
}

static inline int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 365 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 365 "include/linux/bitmap.h"
    nbits
# 365 "include/linux/bitmap.h" 3 4
    ) && (
# 365 "include/linux/bitmap.h"
    nbits
# 365 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 365 "include/linux/bitmap.h"
    nbits
# 365 "include/linux/bitmap.h" 3 4
    ) > 0)
# 365 "include/linux/bitmap.h"
                            )
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (
# 366 "include/linux/bitmap.h" 3 4
                           32 
# 366 "include/linux/bitmap.h"
                           - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if (
# 374 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 374 "include/linux/bitmap.h"
    nbits
# 374 "include/linux/bitmap.h" 3 4
    ) && (
# 374 "include/linux/bitmap.h"
    nbits
# 374 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 374 "include/linux/bitmap.h"
    nbits
# 374 "include/linux/bitmap.h" 3 4
    ) > 0)
# 374 "include/linux/bitmap.h"
                            )
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (
# 375 "include/linux/bitmap.h" 3 4
                                32 
# 375 "include/linux/bitmap.h"
                                - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline bool bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if (
# 382 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 382 "include/linux/bitmap.h"
    nbits
# 382 "include/linux/bitmap.h" 3 4
    ) && (
# 382 "include/linux/bitmap.h"
    nbits
# 382 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 382 "include/linux/bitmap.h"
    nbits
# 382 "include/linux/bitmap.h" 3 4
    ) > 0)
# 382 "include/linux/bitmap.h"
                            )
  return ! (*src & (~0UL >> (-(nbits) & (
# 383 "include/linux/bitmap.h" 3 4
                  32 
# 383 "include/linux/bitmap.h"
                  - 1))));

 return find_next_bit((src), (nbits), 0) == nbits;
}

static inline bool bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if (
# 390 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 390 "include/linux/bitmap.h"
    nbits
# 390 "include/linux/bitmap.h" 3 4
    ) && (
# 390 "include/linux/bitmap.h"
    nbits
# 390 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 390 "include/linux/bitmap.h"
    nbits
# 390 "include/linux/bitmap.h" 3 4
    ) > 0)
# 390 "include/linux/bitmap.h"
                            )
  return ! (~(*src) & (~0UL >> (-(nbits) & (
# 391 "include/linux/bitmap.h" 3 4
                     32 
# 391 "include/linux/bitmap.h"
                     - 1))));

 return find_next_zero_bit((src), (nbits), 0) == nbits;
}

static 
# 396 "include/linux/bitmap.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 396 "include/linux/bitmap.h"
                      int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if (
# 398 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 398 "include/linux/bitmap.h"
    nbits
# 398 "include/linux/bitmap.h" 3 4
    ) && (
# 398 "include/linux/bitmap.h"
    nbits
# 398 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 398 "include/linux/bitmap.h"
    nbits
# 398 "include/linux/bitmap.h" 3 4
    ) > 0)
# 398 "include/linux/bitmap.h"
                            )
  return hweight_long(*src & (~0UL >> (-(nbits) & (
# 399 "include/linux/bitmap.h" 3 4
                            32 
# 399 "include/linux/bitmap.h"
                            - 1))));
 return __bitmap_weight(src, nbits);
}

static 
# 403 "include/linux/bitmap.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 403 "include/linux/bitmap.h"
                      void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static 
# 417 "include/linux/bitmap.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 417 "include/linux/bitmap.h"
                      void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if (
# 434 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 434 "include/linux/bitmap.h"
    nbits
# 434 "include/linux/bitmap.h" 3 4
    ) && (
# 434 "include/linux/bitmap.h"
    nbits
# 434 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 434 "include/linux/bitmap.h"
    nbits
# 434 "include/linux/bitmap.h" 3 4
    ) > 0)
# 434 "include/linux/bitmap.h"
                            )
  *dst = (*src & (~0UL >> (-(nbits) & (
# 435 "include/linux/bitmap.h" 3 4
                32 
# 435 "include/linux/bitmap.h"
                - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if (
# 443 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 443 "include/linux/bitmap.h"
    nbits
# 443 "include/linux/bitmap.h" 3 4
    ) && (
# 443 "include/linux/bitmap.h"
    nbits
# 443 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 443 "include/linux/bitmap.h"
    nbits
# 443 "include/linux/bitmap.h" 3 4
    ) > 0)
# 443 "include/linux/bitmap.h"
                            )
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (
# 444 "include/linux/bitmap.h" 3 4
                          32 
# 444 "include/linux/bitmap.h"
                          - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline void bitmap_replace(unsigned long *dst,
      const unsigned long *old,
      const unsigned long *new,
      const unsigned long *mask,
      unsigned int nbits)
{
 if (
# 455 "include/linux/bitmap.h" 3 4
    (__builtin_constant_p(
# 455 "include/linux/bitmap.h"
    nbits
# 455 "include/linux/bitmap.h" 3 4
    ) && (
# 455 "include/linux/bitmap.h"
    nbits
# 455 "include/linux/bitmap.h" 3 4
    ) <= 32 && (
# 455 "include/linux/bitmap.h"
    nbits
# 455 "include/linux/bitmap.h" 3 4
    ) > 0)
# 455 "include/linux/bitmap.h"
                            )
  *dst = (*old & ~(*mask)) | (*new & *mask);
 else
  __bitmap_replace(dst, old, new, mask, nbits);
}

static inline void bitmap_next_clear_region(unsigned long *bitmap,
         unsigned int *rs, unsigned int *re,
         unsigned int end)
{
 *rs = find_next_zero_bit(bitmap, end, *rs);
 *re = find_next_bit(bitmap, end, *rs + 1);
}

static inline void bitmap_next_set_region(unsigned long *bitmap,
       unsigned int *rs, unsigned int *re,
       unsigned int end)
{
 *rs = find_next_bit(bitmap, end, *rs);
 *re = find_next_zero_bit(bitmap, end, *rs + 1);
}
# 539 "include/linux/bitmap.h"
static inline void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 555 "include/linux/bitmap.h"
static inline unsigned long bitmap_get_value8(const unsigned long *map,
           unsigned long start)
{
 const size_t index = ((start) / 
# 558 "include/linux/bitmap.h" 3 4
                     32
# 558 "include/linux/bitmap.h"
                     );
 const unsigned long offset = start % 
# 559 "include/linux/bitmap.h" 3 4
                                     32
# 559 "include/linux/bitmap.h"
                                                  ;

 return (map[index] >> offset) & 0xFF;
}







static inline void bitmap_set_value8(unsigned long *map, unsigned long value,
         unsigned long start)
{
 const size_t index = ((start) / 
# 573 "include/linux/bitmap.h" 3 4
                     32
# 573 "include/linux/bitmap.h"
                     );
 const unsigned long offset = start % 
# 574 "include/linux/bitmap.h" 3 4
                                     32
# 574 "include/linux/bitmap.h"
                                                  ;

 map[index] &= ~(0xFFUL << offset);
 map[index] |= value << offset;
}
# 13 "include/linux/cpumask.h" 2




typedef struct cpumask { unsigned long bits[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 39 "include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 90 "include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_dying_mask;






extern atomic_t __num_online_cpus;

extern cpumask_t cpus_booted_once_mask;

static inline void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{



}


static inline unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)256));
 return cpu;
}
# 193 "include/linux/cpumask.h"
static inline unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_next_bit((((srcp)->bits)), (((unsigned int)256)), 0);
}







static inline unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), ((unsigned int)256));
}

unsigned int __attribute__((__pure__)) cpumask_next(int n, const struct cpumask *srcp);
# 218 "include/linux/cpumask.h"
static inline unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)256), n+1);
}

int __attribute__((__pure__)) cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int __attribute__((__pure__)) cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
int cpumask_any_and_distribute(const struct cpumask *src1p,
          const struct cpumask *src2p);
int cpumask_any_distribute(const struct cpumask *srcp);
# 257 "include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 309 "include/linux/cpumask.h"
static inline void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 __set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 __clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 342 "include/linux/cpumask.h"
static inline int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 356 "include/linux/cpumask.h"
static inline int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 370 "include/linux/cpumask.h"
static inline int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)256));
}





static inline void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)256));
}
# 401 "include/linux/cpumask.h"
static inline int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)256));
}







static inline void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)256));
}







static inline void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)256));
}
# 444 "include/linux/cpumask.h"
static inline int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)256));
}






static inline void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)256));
}






static inline bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)256));
}







static inline bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)256));
}






static inline bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)256));
}
# 509 "include/linux/cpumask.h"
static inline int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)256));
}





static inline bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)256));
}





static inline bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)256));
}





static inline unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)256));
}







static inline void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)256));
}







static inline void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)256));
}






static inline void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)256));
}
# 620 "include/linux/cpumask.h"
static inline int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)256));
}
# 634 "include/linux/cpumask.h"
static inline int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)256));
}
# 648 "include/linux/cpumask.h"
static inline int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)256));
}
# 660 "include/linux/cpumask.h"
static inline int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)256));
}




static inline unsigned int cpumask_size(void)
{
 return (((((unsigned int)256)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 733 "include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline void free_cpumask_var(cpumask_var_t mask)
{
}

static inline void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 793 "include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 256);
}

static inline void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline void
set_cpu_dying(unsigned int cpu, bool dying)
{
 if (dying)
  cpumask_set_cpu(cpu, &__cpu_dying_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_dying_mask);
}
# 854 "include/linux/cpumask.h"
static inline int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 866 "include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[
# 867 "include/linux/cpumask.h" 3 4
               32
# 867 "include/linux/cpumask.h"
                            +1][(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 
# 871 "include/linux/cpumask.h" 3 4
                                                  32
# 871 "include/linux/cpumask.h"
                                                               ];
 p -= cpu / 
# 872 "include/linux/cpumask.h" 3 4
           32
# 872 "include/linux/cpumask.h"
                        ;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 885 "include/linux/cpumask.h"
static inline unsigned int num_online_cpus(void)
{
 return atomic_read(&__num_online_cpus);
}




static inline bool cpu_online(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_online_mask));
}

static inline bool cpu_possible(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_possible_mask));
}

static inline bool cpu_present(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_present_mask));
}

static inline bool cpu_active(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_active_mask));
}

static inline bool cpu_dying(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_dying_mask));
}
# 979 "include/linux/cpumask.h"
static inline ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 14 "include/linux/smp.h" 2

# 1 "include/linux/smp_types.h" 1




# 1 "include/linux/llist.h" 1
# 54 "include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 69 "include/linux/llist.h"
static inline void init_llist_head(struct llist_head *list)
{
 list->first = 
# 71 "include/linux/llist.h" 3 4
              ((void *)0)
# 71 "include/linux/llist.h"
                  ;
}
# 187 "include/linux/llist.h"
static inline bool llist_empty(const struct llist_head *head)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((head->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->first))) *)&(head->first)); }) == 
# 189 "include/linux/llist.h" 3 4
                                 ((void *)0)
# 189 "include/linux/llist.h"
                                     ;
}

static inline struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);

static inline bool __llist_add_batch(struct llist_node *new_first,
         struct llist_node *new_last,
         struct llist_head *head)
{
 new_last->next = head->first;
 head->first = new_first;
 return new_last->next == 
# 207 "include/linux/llist.h" 3 4
                         ((void *)0)
# 207 "include/linux/llist.h"
                             ;
}
# 217 "include/linux/llist.h"
static inline bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}

static inline bool __llist_add(struct llist_node *new, struct llist_head *head)
{
 return __llist_add_batch(new, new, head);
}
# 235 "include/linux/llist.h"
static inline struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg_mb((unsigned long)(
# 237 "include/linux/llist.h" 3 4
       ((void *)0)
# 237 "include/linux/llist.h"
       ), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); });
}

static inline struct llist_node *__llist_del_all(struct llist_head *head)
{
 struct llist_node *first = head->first;

 head->first = 
# 244 "include/linux/llist.h" 3 4
              ((void *)0)
# 244 "include/linux/llist.h"
                  ;
 return first;
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 6 "include/linux/smp_types.h" 2

enum {
 CSD_FLAG_LOCK = 0x01,

 IRQ_WORK_PENDING = 0x01,
 IRQ_WORK_BUSY = 0x02,
 IRQ_WORK_LAZY = 0x04,
 IRQ_WORK_HARD_IRQ = 0x08,

 IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),

 CSD_TYPE_ASYNC = 0x00,
 CSD_TYPE_SYNC = 0x10,
 CSD_TYPE_IRQ_WORK = 0x20,
 CSD_TYPE_TTWU = 0x30,

 CSD_FLAG_TYPE_MASK = 0xF0,
};
# 58 "include/linux/smp_types.h"
struct __call_single_node {
 struct llist_node llist;
 union {
  unsigned int u_flags;
  atomic_t a_flags;
 };

 u16 src, dst;

};
# 16 "include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
typedef bool (*smp_cond_func_t)(int cpu, void *info);




struct __call_single_data {
 struct __call_single_node node;
 smp_call_func_t func;
 void *info;
};





typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));
# 45 "include/linux/smp.h"
extern void __smp_call_single_queue(int cpu, struct llist_node *node);


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);

void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
      void *info, bool wait, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, struct __call_single_data *csd);





void panic_smp_self_stop(void);
void nmi_panic_self_stop(struct pt_regs *regs);
void crash_smp_send_stop(void);




static inline void on_each_cpu(smp_call_func_t func, void *info, int wait)
{
 on_each_cpu_cond_mask(
# 71 "include/linux/smp.h" 3 4
                      ((void *)0)
# 71 "include/linux/smp.h"
                          , func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 90 "include/linux/smp.h"
static inline void on_each_cpu_mask(const struct cpumask *mask,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(
# 93 "include/linux/smp.h" 3 4
                      ((void *)0)
# 93 "include/linux/smp.h"
                          , func, info, wait, mask);
}







static inline void on_each_cpu_cond(smp_cond_func_t cond_func,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(cond_func, func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}



# 1 "include/linux/preempt.h" 1
# 88 "include/linux/preempt.h"
# 1 "arch/arm64/include/asm/preempt.h" 1




# 1 "include/linux/thread_info.h" 1
# 13 "include/linux/thread_info.h"
# 1 "include/linux/restart_block.h" 1
# 12 "include/linux/restart_block.h"
struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 unsigned long arch_data;
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 14 "include/linux/thread_info.h" 2
# 22 "include/linux/thread_info.h"
# 1 "arch/arm64/include/asm/current.h" 1
# 9 "arch/arm64/include/asm/current.h"
struct task_struct;





static 
# 15 "arch/arm64/include/asm/current.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 15 "arch/arm64/include/asm/current.h"
                      struct task_struct *get_current(void)
{
 unsigned long sp_el0;

 asm ("mrs %0, sp_el0" : "=r" (sp_el0));

 return (struct task_struct *)sp_el0;
}
# 23 "include/linux/thread_info.h" 2
# 32 "include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};
# 59 "include/linux/thread_info.h"
# 1 "arch/arm64/include/asm/thread_info.h" 1
# 15 "arch/arm64/include/asm/thread_info.h"
struct task_struct;

# 1 "include/dovetail/thread_info.h" 1
# 10 "include/dovetail/thread_info.h"
struct oob_thread_state {
};
# 18 "arch/arm64/include/asm/thread_info.h" 2
# 1 "arch/arm64/include/asm/memory.h" 1
# 14 "arch/arm64/include/asm/memory.h"
# 1 "include/linux/sizes.h" 1
# 15 "arch/arm64/include/asm/memory.h" 2
# 1 "arch/arm64/include/asm/page-def.h" 1
# 16 "arch/arm64/include/asm/memory.h" 2
# 178 "arch/arm64/include/asm/memory.h"
# 1 "include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

extern void dump_page(struct page *page, const char *reason);
extern void __dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 179 "arch/arm64/include/asm/memory.h" 2



extern u64 vabits_actual;

extern s64 memstart_addr;




extern u64 kimage_vaddr;


extern u64 kimage_voffset;

static inline unsigned long kaslr_offset(void)
{
 return kimage_vaddr - ((((((-((((1UL))) << ((((48))) - 1)))) + (0x08000000))) + (0x08000000)));
}
# 239 "arch/arm64/include/asm/memory.h"
static inline const void *__tag_set(const void *addr, u8 tag)
{
 u64 __addr = (u64)addr & ~0UL;
 return (const void *)(__addr | 0UL);
}
# 304 "arch/arm64/include/asm/memory.h"
static inline phys_addr_t virt_to_phys(const volatile void *x)
{
 return ({ phys_addr_t __x = (phys_addr_t)(((unsigned long)(x))); (((u64)(__x) - ((-((((1UL))) << ((48)))))) < (((-((((1UL))) << ((((48))) - 1)))) - ((-((((1UL))) << ((48))))))) ? (((__x) - ((-((((1UL))) << ((48)))))) + ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) : ((__x) - kimage_voffset); });
}


static inline void *phys_to_virt(phys_addr_t x)
{
 return (void *)(((unsigned long)((x) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 375 "arch/arm64/include/asm/memory.h"
void dump_mem_limit(void);
# 389 "arch/arm64/include/asm/memory.h"
# 1 "include/asm-generic/memory_model.h" 1




# 1 "include/linux/pfn.h" 1
# 13 "include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "include/asm-generic/memory_model.h" 2
# 390 "arch/arm64/include/asm/memory.h" 2
# 19 "arch/arm64/include/asm/thread_info.h" 2
# 1 "arch/arm64/include/asm/stack_pointer.h" 1







register unsigned long current_stack_pointer asm ("sp");
# 20 "arch/arm64/include/asm/thread_info.h" 2





struct thread_info {
 unsigned long flags;
 unsigned long local_flags;



 union {
  u64 preempt_count;
  struct {




   u32 count;
   u32 need_resched;

  } preempt;
 };




 struct oob_thread_state oob_state;
};
# 57 "arch/arm64/include/asm/thread_info.h"
void arch_setup_new_exec(void);


void arch_release_task_struct(struct task_struct *tsk);
int arch_dup_task_struct(struct task_struct *dst,
    struct task_struct *src);
# 60 "include/linux/thread_info.h" 2
# 6 "arch/arm64/include/asm/preempt.h" 2




static inline int preempt_count(void)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->preempt.count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->preempt.count))) *)&(((struct thread_info *)get_current())->preempt.count)); });
}

static inline void preempt_count_set(u64 pc)
{

 do { do { } while (0); do { *(volatile typeof(((struct thread_info *)get_current())->preempt.count) *)&(((struct thread_info *)get_current())->preempt.count) = (pc); } while (0); } while (0);
}
# 29 "arch/arm64/include/asm/preempt.h"
static inline void set_preempt_need_resched(void)
{
 ((struct thread_info *)get_current())->preempt.need_resched = 0;
}

static inline void clear_preempt_need_resched(void)
{
 ((struct thread_info *)get_current())->preempt.need_resched = 1;
}

static inline bool test_preempt_need_resched(void)
{
 return !((struct thread_info *)get_current())->preempt.need_resched;
}

static inline void __preempt_count_add(int val)
{
 u32 pc = ({ do { } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->preempt.count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->preempt.count))) *)&(((struct thread_info *)get_current())->preempt.count)); });
 pc += val;
 do { do { } while (0); do { *(volatile typeof(((struct thread_info *)get_current())->preempt.count) *)&(((struct thread_info *)get_current())->preempt.count) = (pc); } while (0); } while (0);
}

static inline void __preempt_count_sub(int val)
{
 u32 pc = ({ do { } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->preempt.count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->preempt.count))) *)&(((struct thread_info *)get_current())->preempt.count)); });
 pc -= val;
 do { do { } while (0); do { *(volatile typeof(((struct thread_info *)get_current())->preempt.count) *)&(((struct thread_info *)get_current())->preempt.count) = (pc); } while (0); } while (0);
}

static inline bool __preempt_count_dec_and_test(void)
{
 struct thread_info *ti = ((struct thread_info *)get_current());
 u64 pc = ({ do { } while (0); (*(const volatile typeof( _Generic((ti->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ti->preempt_count))) *)&(ti->preempt_count)); });


 do { do { } while (0); do { *(volatile typeof(ti->preempt.count) *)&(ti->preempt.count) = (--pc); } while (0); } while (0);
# 73 "arch/arm64/include/asm/preempt.h"
 return !pc || !({ do { } while (0); (*(const volatile typeof( _Generic((ti->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ti->preempt_count))) *)&(ti->preempt_count)); });
}

static inline bool should_resched(int preempt_offset)
{
 u64 pc = ({ do { } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->preempt_count))) *)&(((struct thread_info *)get_current())->preempt_count)); });
 return pc == preempt_offset;
}


void preempt_schedule(void);

void preempt_schedule_notrace(void);
# 89 "include/linux/preempt.h" 2
# 299 "include/linux/preempt.h"
struct preempt_notifier;
# 315 "include/linux/preempt.h"
struct preempt_ops {
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);
};
# 328 "include/linux/preempt.h"
struct preempt_notifier {
 struct hlist_node link;
 struct preempt_ops *ops;
};

void preempt_notifier_inc(void);
void preempt_notifier_dec(void);
void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}
# 404 "include/linux/preempt.h"
extern void migrate_disable(void);
extern void migrate_enable(void);
# 416 "include/linux/preempt.h"
static 
# 416 "include/linux/preempt.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 416 "include/linux/preempt.h"
                      bool running_inband(void)
{
 return ((preempt_count() & (((1UL << (1))-1) << (((((0 + 8) + 8) + 4) + 4) + 1))) >> (((((0 + 8) + 8) + 4) + 4) + 1)) == 0;
}

static 
# 421 "include/linux/preempt.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 421 "include/linux/preempt.h"
                      bool running_oob(void)
{
 return !running_inband();
}

unsigned long hard_preempt_disable(void);
void hard_preempt_enable(unsigned long flags);
# 111 "include/linux/smp.h" 2



# 1 "arch/arm64/include/asm/smp.h" 1
# 28 "arch/arm64/include/asm/smp.h"
# 1 "arch/arm64/include/asm/percpu.h" 1
# 14 "arch/arm64/include/asm/percpu.h"
static inline void set_my_cpu_offset(unsigned long off)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr tpidr_el1, %0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "31" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "msr tpidr_el2, %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


   :: "r" (off) : "memory");
}

static inline unsigned long __hyp_my_cpu_offset(void)
{




 return ({ u64 __val; asm volatile("mrs %0, " "tpidr_el2" : "=r" (__val)); __val; });
}

static inline unsigned long __kern_my_cpu_offset(void)
{
 unsigned long off;





 asm(".if ""1"" == 1\n" "661:\n\t" "mrs %0, tpidr_el1" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "31" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "mrs %0, tpidr_el2" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


  : "=r" (off) :
  "Q" (*(const unsigned long *)current_stack_pointer));

 return off;
}
# 122 "arch/arm64/include/asm/percpu.h"
static inline unsigned long __percpu_read_8(void *ptr) { return ({ do { } while (0); (*(const volatile typeof( _Generic((*(u8 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u8 *)ptr))) *)&(*(u8 *)ptr)); }); } static inline void __percpu_write_8(void *ptr, unsigned long val) { do { do { } while (0); do { *(volatile typeof(*(u8 *)ptr) *)&(*(u8 *)ptr) = ((u8)val); } while (0); } while (0); }
static inline unsigned long __percpu_read_16(void *ptr) { return ({ do { } while (0); (*(const volatile typeof( _Generic((*(u16 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u16 *)ptr))) *)&(*(u16 *)ptr)); }); } static inline void __percpu_write_16(void *ptr, unsigned long val) { do { do { } while (0); do { *(volatile typeof(*(u16 *)ptr) *)&(*(u16 *)ptr) = ((u16)val); } while (0); } while (0); }
static inline unsigned long __percpu_read_32(void *ptr) { return ({ do { } while (0); (*(const volatile typeof( _Generic((*(u32 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u32 *)ptr))) *)&(*(u32 *)ptr)); }); } static inline void __percpu_write_32(void *ptr, unsigned long val) { do { do { } while (0); do { *(volatile typeof(*(u32 *)ptr) *)&(*(u32 *)ptr) = ((u32)val); } while (0); } while (0); }
static inline unsigned long __percpu_read_64(void *ptr) { return ({ do { } while (0); (*(const volatile typeof( _Generic((*(u64 *)ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(u64 *)ptr))) *)&(*(u64 *)ptr)); }); } static inline void __percpu_write_64(void *ptr, unsigned long val) { do { do { } while (0); do { *(volatile typeof(*(u64 *)ptr) *)&(*(u64 *)ptr) = ((u64)val); } while (0); } while (0); }
static inline void __percpu_add_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile ("1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline void __percpu_add_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile ("1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline void __percpu_add_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile ("1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline void __percpu_add_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile ("1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "add" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline void __percpu_andnot_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile ("1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline void __percpu_andnot_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile ("1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline void __percpu_andnot_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile ("1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline void __percpu_andnot_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile ("1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "bic" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline void __percpu_or_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile ("1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline void __percpu_or_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile ("1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline void __percpu_or_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile ("1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline void __percpu_or_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile ("1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "orr" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline u8 __percpu_add_return_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 ret; asm volatile ("1:	ldxr" "b" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); return ret; } static inline u16 __percpu_add_return_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 ret; asm volatile ("1:	ldxr" "h" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); return ret; } static inline u32 __percpu_add_return_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 ret; asm volatile ("1:	ldxr" "" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); return ret; } static inline u64 __percpu_add_return_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 ret; asm volatile ("1:	ldxr" "" "\t%" "" "[ret], %[ptr]\n" "add" "\t%" "" "[ret], %" "" "[ret], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); return ret; }
# 248 "arch/arm64/include/asm/percpu.h"
# 1 "include/asm-generic/percpu.h" 1






# 1 "include/linux/percpu-defs.h" 1
# 308 "include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline void __this_cpu_preempt_check(const char *op) { }
# 8 "include/asm-generic/percpu.h" 2
# 19 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[256];
# 48 "include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 249 "arch/arm64/include/asm/percpu.h" 2
# 29 "arch/arm64/include/asm/smp.h" 2





extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) cpu_number;
# 48 "arch/arm64/include/asm/smp.h"
extern u64 __cpu_logical_map[256];
extern u64 cpu_logical_map(unsigned int cpu);

static inline void set_cpu_logical_map(unsigned int cpu, u64 hwid)
{
 __cpu_logical_map[cpu] = hwid;
}

struct seq_file;





extern void smp_init_cpus(void);




extern void set_smp_ipi_range(int ipi_base, int nr_ipi);




 void secondary_start_kernel(void);







struct secondary_data {
 void *stack;
 struct task_struct *task;
 long status;
};

extern struct secondary_data secondary_data;
extern long __early_cpu_boot_status;
extern void secondary_entry(void);

extern void arch_send_call_function_single_ipi(int cpu);
extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);




static inline void arch_send_wakeup_ipi_mask(const struct cpumask *mask)
{
 do { } while (0);
}


extern int __cpu_disable(void);

extern void __cpu_die(unsigned int cpu);
extern void cpu_die(void);
extern void cpu_die_early(void);

static inline void cpu_park_loop(void)
{
 for (;;) {
  asm volatile("wfe" : : : "memory");
  asm volatile("wfi" : : : "memory");
 }
}

static inline void update_cpu_boot_status(int val)
{
 do { do { } while (0); do { *(volatile typeof(secondary_data.status) *)&(secondary_data.status) = (val); } while (0); } while (0);

 asm volatile("dsb " "ishst" : : : "memory");
}






static inline void cpu_panic_kernel(void)
{
 update_cpu_boot_status((3));
 cpu_park_loop();
}
# 144 "arch/arm64/include/asm/smp.h"
bool cpus_are_stuck_in_kernel(void);

extern void crash_smp_send_stop(void);
extern bool smp_crash_stop_failed(void);
extern void panic_smp_self_stop(void);
# 115 "include/linux/smp.h" 2
# 124 "include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_nr_cpu_ids(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) smp_init(void);

extern int __boot_cpu_id;

static inline int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 290 "include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_thaw_secondary_cpus_begin(void);
extern void arch_thaw_secondary_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 19 "arch/arm64/include/asm/arch_timer.h" 2


# 1 "include/clocksource/arm_arch_timer.h" 1
# 9 "include/clocksource/arm_arch_timer.h"
# 1 "include/linux/timecounter.h" 1
# 30 "include/linux/timecounter.h"
struct cyclecounter {
 u64 (*read)(const struct cyclecounter *cc);
 u64 mask;
 u32 mult;
 u32 shift;
};
# 55 "include/linux/timecounter.h"
struct timecounter {
 const struct cyclecounter *cc;
 u64 cycle_last;
 u64 nsec;
 u64 mask;
 u64 frac;
};
# 70 "include/linux/timecounter.h"
static inline u64 cyclecounter_cyc2ns(const struct cyclecounter *cc,
          u64 cycles, u64 mask, u64 *frac)
{
 u64 ns = (u64) cycles;

 ns = (ns * cc->mult) + *frac;
 *frac = ns & mask;
 return ns >> cc->shift;
}





static inline void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
 tc->nsec += delta;
}
# 99 "include/linux/timecounter.h"
extern void timecounter_init(struct timecounter *tc,
        const struct cyclecounter *cc,
        u64 start_tstamp);
# 111 "include/linux/timecounter.h"
extern u64 timecounter_read(struct timecounter *tc);
# 127 "include/linux/timecounter.h"
extern u64 timecounter_cyc2time(const struct timecounter *tc,
    u64 cycle_tstamp);
# 10 "include/clocksource/arm_arch_timer.h" 2
# 25 "include/clocksource/arm_arch_timer.h"
enum arch_timer_reg {
 ARCH_TIMER_REG_CTRL,
 ARCH_TIMER_REG_TVAL,
};

enum arch_timer_ppi_nr {
 ARCH_TIMER_PHYS_SECURE_PPI,
 ARCH_TIMER_PHYS_NONSECURE_PPI,
 ARCH_TIMER_VIRT_PPI,
 ARCH_TIMER_HYP_PPI,
 ARCH_TIMER_HYP_VIRT_PPI,
 ARCH_TIMER_MAX_TIMER_PPI
};

enum arch_timer_spi_nr {
 ARCH_TIMER_PHYS_SPI,
 ARCH_TIMER_VIRT_SPI,
 ARCH_TIMER_MAX_TIMER_SPI
};
# 64 "include/clocksource/arm_arch_timer.h"
struct arch_timer_kvm_info {
 struct timecounter timecounter;
 int virtual_irq;
 int physical_irq;
};

struct arch_timer_mem_frame {
 bool valid;
 phys_addr_t cntbase;
 size_t size;
 int phys_irq;
 int virt_irq;
};

struct arch_timer_mem {
 phys_addr_t cntctlbase;
 size_t size;
 struct arch_timer_mem_frame frame[8];
};



extern u32 arch_timer_get_rate(void);
extern u64 (*arch_timer_read_counter)(void);
extern struct arch_timer_kvm_info *arch_timer_get_kvm_info(void);
extern bool arch_timer_evtstrm_available(void);
# 22 "arch/arm64/include/asm/arch_timer.h" 2
# 43 "arch/arm64/include/asm/arch_timer.h"
enum arch_timer_erratum_match_type {
 ate_match_dt,
 ate_match_local_cap_id,
 ate_match_acpi_oem_info,
};

struct clock_event_device;

struct arch_timer_erratum_workaround {
 enum arch_timer_erratum_match_type match_type;
 const void *id;
 const char *desc;
 u32 (*read_cntp_tval_el0)(void);
 u32 (*read_cntv_tval_el0)(void);
 u64 (*read_cntpct_el0)(void);
 u64 (*read_cntvct_el0)(void);
 int (*set_next_event_phys)(unsigned long, struct clock_event_device *);
 int (*set_next_event_virt)(unsigned long, struct clock_event_device *);
 bool disable_compat_vdso;
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(const struct arch_timer_erratum_workaround *) timer_unstable_counter_workaround
                                    ;


static inline notrace u32 arch_timer_read_cntp_tval_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntp_tval_el0" : "=r" (__val)); __val; });
}

static inline notrace u32 arch_timer_read_cntv_tval_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntv_tval_el0" : "=r" (__val)); __val; });
}

static inline notrace u64 arch_timer_read_cntpct_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntpct_el0" : "=r" (__val)); __val; });
}

static inline notrace u64 arch_timer_read_cntvct_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntvct_el0" : "=r" (__val)); __val; });
}
# 104 "arch/arm64/include/asm/arch_timer.h"
static 
# 104 "arch/arm64/include/asm/arch_timer.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 105 "arch/arm64/include/asm/arch_timer.h"
void arch_timer_reg_write_cp15(int access, enum arch_timer_reg reg, u32 val)
{
 if (access == 0) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntp_ctl_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  case ARCH_TIMER_REG_TVAL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntp_tval_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  }
 } else if (access == 1) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntv_ctl_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  case ARCH_TIMER_REG_TVAL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntv_tval_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  }
 }

 asm volatile("isb" : : : "memory");
}

static 
# 130 "arch/arm64/include/asm/arch_timer.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 131 "arch/arm64/include/asm/arch_timer.h"
u32 arch_timer_reg_read_cp15(int access, enum arch_timer_reg reg)
{
 if (access == 0) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   return ({ u64 __val; asm volatile("mrs %0, " "cntp_ctl_el0" : "=r" (__val)); __val; });
  case ARCH_TIMER_REG_TVAL:
   return ({ u64 _val; do { __preempt_count_add(1); barrier(); } while (0); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 138 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 138 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 138 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 138 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 138 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 138 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 138 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 138 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 138 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 138 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntp_tval_el0) ? __wa->read_cntp_tval_el0 : arch_timer_read_cntp_tval_el0; })(); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); _val; });
  }
 } else if (access == 1) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   return ({ u64 __val; asm volatile("mrs %0, " "cntv_ctl_el0" : "=r" (__val)); __val; });
  case ARCH_TIMER_REG_TVAL:
   return ({ u64 _val; do { __preempt_count_add(1); barrier(); } while (0); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 145 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 145 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 145 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 145 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 145 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 145 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 145 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 145 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 145 "arch/arm64/include/asm/arch_timer.h" 3 4
         ((void *)0)
# 145 "arch/arm64/include/asm/arch_timer.h"
         ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntv_tval_el0) ? __wa->read_cntv_tval_el0 : arch_timer_read_cntv_tval_el0; })(); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); _val; });
  }
 }

 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/arch_timer.h\"; .popsection; .long 14472b - 14470b; .short 149; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0);
}

static inline u32 arch_timer_get_cntfrq(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntfrq_el0" : "=r" (__val)); __val; });
}

static inline u32 arch_timer_get_cntkctl(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntkctl_el1" : "=r" (__val)); __val; });
}

static inline void arch_timer_set_cntkctl(u32 cntkctl)
{
 do { u64 __val = (u64)(cntkctl); asm volatile("msr " "cntkctl_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");
}

static 
# 168 "arch/arm64/include/asm/arch_timer.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 168 "arch/arm64/include/asm/arch_timer.h"
                      u64 __arch_counter_get_cntpct_stable(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 _val; do { __preempt_count_add(1); barrier(); } while (0); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 173 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 173 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 173 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 173 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 173 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 173 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 173 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 173 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 173 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 173 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntpct_el0) ? __wa->read_cntpct_el0 : arch_timer_read_cntpct_el0; })(); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); _val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static 
# 178 "arch/arm64/include/asm/arch_timer.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 178 "arch/arm64/include/asm/arch_timer.h"
                      u64 __arch_counter_get_cntpct(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 __val; asm volatile("mrs %0, " "cntpct_el0" : "=r" (__val)); __val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static 
# 188 "arch/arm64/include/asm/arch_timer.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 188 "arch/arm64/include/asm/arch_timer.h"
                      u64 __arch_counter_get_cntvct_stable(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 _val; do { __preempt_count_add(1); barrier(); } while (0); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 193 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 193 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 193 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 193 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 193 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 193 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 193 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 193 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))
# 193 "arch/arm64/include/asm/arch_timer.h" 3 4
      ((void *)0)
# 193 "arch/arm64/include/asm/arch_timer.h"
      ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntvct_el0) ? __wa->read_cntvct_el0 : arch_timer_read_cntvct_el0; })(); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); _val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static 
# 198 "arch/arm64/include/asm/arch_timer.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 198 "arch/arm64/include/asm/arch_timer.h"
                      u64 __arch_counter_get_cntvct(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 __val; asm volatile("mrs %0, " "cntvct_el0" : "=r" (__val)); __val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static inline int arch_timer_arch_init(void)
{
 return 0;
}

static inline void arch_timer_set_evtstrm_feature(void)
{
 cpu_set_feature(( __builtin_constant_p((1 << 2)) ? ( ((1 << 2)) < 2 ? 0 : ((1 << 2)) & (1ULL << 63) ? 63 : ((1 << 2)) & (1ULL << 62) ? 62 : ((1 << 2)) & (1ULL << 61) ? 61 : ((1 << 2)) & (1ULL << 60) ? 60 : ((1 << 2)) & (1ULL << 59) ? 59 : ((1 << 2)) & (1ULL << 58) ? 58 : ((1 << 2)) & (1ULL << 57) ? 57 : ((1 << 2)) & (1ULL << 56) ? 56 : ((1 << 2)) & (1ULL << 55) ? 55 : ((1 << 2)) & (1ULL << 54) ? 54 : ((1 << 2)) & (1ULL << 53) ? 53 : ((1 << 2)) & (1ULL << 52) ? 52 : ((1 << 2)) & (1ULL << 51) ? 51 : ((1 << 2)) & (1ULL << 50) ? 50 : ((1 << 2)) & (1ULL << 49) ? 49 : ((1 << 2)) & (1ULL << 48) ? 48 : ((1 << 2)) & (1ULL << 47) ? 47 : ((1 << 2)) & (1ULL << 46) ? 46 : ((1 << 2)) & (1ULL << 45) ? 45 : ((1 << 2)) & (1ULL << 44) ? 44 : ((1 << 2)) & (1ULL << 43) ? 43 : ((1 << 2)) & (1ULL << 42) ? 42 : ((1 << 2)) & (1ULL << 41) ? 41 : ((1 << 2)) & (1ULL << 40) ? 40 : ((1 << 2)) & (1ULL << 39) ? 39 : ((1 << 2)) & (1ULL << 38) ? 38 : ((1 << 2)) & (1ULL << 37) ? 37 : ((1 << 2)) & (1ULL << 36) ? 36 : ((1 << 2)) & (1ULL << 35) ? 35 : ((1 << 2)) & (1ULL << 34) ? 34 : ((1 << 2)) & (1ULL << 33) ? 33 : ((1 << 2)) & (1ULL << 32) ? 32 : ((1 << 2)) & (1ULL << 31) ? 31 : ((1 << 2)) & (1ULL << 30) ? 30 : ((1 << 2)) & (1ULL << 29) ? 29 : ((1 << 2)) & (1ULL << 28) ? 28 : ((1 << 2)) & (1ULL << 27) ? 27 : ((1 << 2)) & (1ULL << 26) ? 26 : ((1 << 2)) & (1ULL << 25) ? 25 : ((1 << 2)) & (1ULL << 24) ? 24 : ((1 << 2)) & (1ULL << 23) ? 23 : ((1 << 2)) & (1ULL << 22) ? 22 : ((1 << 2)) & (1ULL << 21) ? 21 : ((1 << 2)) & (1ULL << 20) ? 20 : ((1 << 2)) & (1ULL << 19) ? 19 : ((1 << 2)) & (1ULL << 18) ? 18 : ((1 << 2)) & (1ULL << 17) ? 17 : ((1 << 2)) & (1ULL << 16) ? 16 : ((1 << 2)) & (1ULL << 15) ? 15 : ((1 << 2)) & (1ULL << 14) ? 14 : ((1 << 2)) & (1ULL << 13) ? 13 : ((1 << 2)) & (1ULL << 12) ? 12 : ((1 << 2)) & (1ULL << 11) ? 11 : ((1 << 2)) & (1ULL << 10) ? 10 : ((1 << 2)) & (1ULL << 9) ? 9 : ((1 << 2)) & (1ULL << 8) ? 8 : ((1 << 2)) & (1ULL << 7) ? 7 : ((1 << 2)) & (1ULL << 6) ? 6 : ((1 << 2)) & (1ULL << 5) ? 5 : ((1 << 2)) & (1ULL << 4) ? 4 : ((1 << 2)) & (1ULL << 3) ? 3 : ((1 << 2)) & (1ULL << 2) ? 2 : 1) : -1));

 compat_elf_hwcap |= (1 << 21);

}

static inline bool arch_timer_have_evtstrm_feature(void)
{
 return cpu_have_feature(( __builtin_constant_p((1 << 2)) ? ( ((1 << 2)) < 2 ? 0 : ((1 << 2)) & (1ULL << 63) ? 63 : ((1 << 2)) & (1ULL << 62) ? 62 : ((1 << 2)) & (1ULL << 61) ? 61 : ((1 << 2)) & (1ULL << 60) ? 60 : ((1 << 2)) & (1ULL << 59) ? 59 : ((1 << 2)) & (1ULL << 58) ? 58 : ((1 << 2)) & (1ULL << 57) ? 57 : ((1 << 2)) & (1ULL << 56) ? 56 : ((1 << 2)) & (1ULL << 55) ? 55 : ((1 << 2)) & (1ULL << 54) ? 54 : ((1 << 2)) & (1ULL << 53) ? 53 : ((1 << 2)) & (1ULL << 52) ? 52 : ((1 << 2)) & (1ULL << 51) ? 51 : ((1 << 2)) & (1ULL << 50) ? 50 : ((1 << 2)) & (1ULL << 49) ? 49 : ((1 << 2)) & (1ULL << 48) ? 48 : ((1 << 2)) & (1ULL << 47) ? 47 : ((1 << 2)) & (1ULL << 46) ? 46 : ((1 << 2)) & (1ULL << 45) ? 45 : ((1 << 2)) & (1ULL << 44) ? 44 : ((1 << 2)) & (1ULL << 43) ? 43 : ((1 << 2)) & (1ULL << 42) ? 42 : ((1 << 2)) & (1ULL << 41) ? 41 : ((1 << 2)) & (1ULL << 40) ? 40 : ((1 << 2)) & (1ULL << 39) ? 39 : ((1 << 2)) & (1ULL << 38) ? 38 : ((1 << 2)) & (1ULL << 37) ? 37 : ((1 << 2)) & (1ULL << 36) ? 36 : ((1 << 2)) & (1ULL << 35) ? 35 : ((1 << 2)) & (1ULL << 34) ? 34 : ((1 << 2)) & (1ULL << 33) ? 33 : ((1 << 2)) & (1ULL << 32) ? 32 : ((1 << 2)) & (1ULL << 31) ? 31 : ((1 << 2)) & (1ULL << 30) ? 30 : ((1 << 2)) & (1ULL << 29) ? 29 : ((1 << 2)) & (1ULL << 28) ? 28 : ((1 << 2)) & (1ULL << 27) ? 27 : ((1 << 2)) & (1ULL << 26) ? 26 : ((1 << 2)) & (1ULL << 25) ? 25 : ((1 << 2)) & (1ULL << 24) ? 24 : ((1 << 2)) & (1ULL << 23) ? 23 : ((1 << 2)) & (1ULL << 22) ? 22 : ((1 << 2)) & (1ULL << 21) ? 21 : ((1 << 2)) & (1ULL << 20) ? 20 : ((1 << 2)) & (1ULL << 19) ? 19 : ((1 << 2)) & (1ULL << 18) ? 18 : ((1 << 2)) & (1ULL << 17) ? 17 : ((1 << 2)) & (1ULL << 16) ? 16 : ((1 << 2)) & (1ULL << 15) ? 15 : ((1 << 2)) & (1ULL << 14) ? 14 : ((1 << 2)) & (1ULL << 13) ? 13 : ((1 << 2)) & (1ULL << 12) ? 12 : ((1 << 2)) & (1ULL << 11) ? 11 : ((1 << 2)) & (1ULL << 10) ? 10 : ((1 << 2)) & (1ULL << 9) ? 9 : ((1 << 2)) & (1ULL << 8) ? 8 : ((1 << 2)) & (1ULL << 7) ? 7 : ((1 << 2)) & (1ULL << 6) ? 6 : ((1 << 2)) & (1ULL << 5) ? 5 : ((1 << 2)) & (1ULL << 4) ? 4 : ((1 << 2)) & (1ULL << 3) ? 3 : ((1 << 2)) & (1ULL << 2) ? 2 : 1) : -1));
}
# 9 "arch/arm64/include/asm/timex.h" 2







# 1 "include/asm-generic/timex.h" 1







typedef unsigned long cycles_t;
# 17 "arch/arm64/include/asm/timex.h" 2
# 66 "include/linux/timex.h" 2
# 139 "include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
# 14 "include/linux/time32.h" 2

# 1 "include/vdso/time32.h" 1




typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};
# 16 "include/linux/time32.h" 2

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);







extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 61 "include/linux/time.h" 2

static inline bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 100 "include/linux/time.h"
# 1 "include/vdso/time.h" 1






struct timens_offset {
 s64 sec;
 u64 nsec;
};
# 101 "include/linux/time.h" 2
# 13 "arch/arm64/include/asm/stat.h" 2
# 1 "arch/arm64/include/asm/compat.h" 1







# 1 "include/asm-generic/compat.h" 1





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u32 compat_ino_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef s32 compat_daddr_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;
typedef s16 compat_short_t;
typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef u16 compat_ushort_t;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u32 compat_uptr_t;
typedef u32 compat_aio_context_t;





typedef s64 compat_s64;
typedef u64 compat_u64;
# 9 "arch/arm64/include/asm/compat.h" 2







# 1 "include/linux/sched.h" 1
# 10 "include/linux/sched.h"
# 1 "include/uapi/linux/sched.h" 1
# 92 "include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
 __u64 __attribute__((aligned(8))) set_tid;
 __u64 __attribute__((aligned(8))) set_tid_size;
 __u64 __attribute__((aligned(8))) cgroup;
};
# 11 "include/linux/sched.h" 2



# 1 "include/linux/pid.h" 1




# 1 "include/linux/rculist.h" 1
# 6 "include/linux/pid.h" 2
# 1 "include/linux/wait.h" 1
# 9 "include/linux/wait.h"
# 1 "include/linux/spinlock.h" 1
# 54 "include/linux/spinlock.h"
# 1 "include/linux/irqflags.h" 1
# 17 "include/linux/irqflags.h"
# 1 "arch/arm64/include/asm/irqflags.h" 1
# 10 "arch/arm64/include/asm/irqflags.h"
# 1 "arch/arm64/include/asm/ptrace.h" 1
# 13 "arch/arm64/include/asm/ptrace.h"
# 1 "arch/arm64/include/uapi/asm/ptrace.h" 1
# 26 "arch/arm64/include/uapi/asm/ptrace.h"
# 1 "arch/arm64/include/uapi/asm/sve_context.h" 1
# 27 "arch/arm64/include/uapi/asm/ptrace.h" 2
# 88 "arch/arm64/include/uapi/asm/ptrace.h"
struct user_pt_regs {
 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;
};

struct user_fpsimd_state {
 __uint128_t vregs[32];
 __u32 fpsr;
 __u32 fpcr;
 __u32 __reserved[2];
};

struct user_hwdebug_state {
 __u32 dbg_info;
 __u32 pad;
 struct {
  __u64 addr;
  __u32 ctrl;
  __u32 pad;
 } dbg_regs[16];
};



struct user_sve_header {
 __u32 size;
 __u32 max_size;
 __u16 vl;
 __u16 max_vl;
 __u16 flags;
 __u16 __reserved;
};
# 250 "arch/arm64/include/uapi/asm/ptrace.h"
struct user_pac_mask {
 __u64 data_mask;
 __u64 insn_mask;
};



struct user_pac_address_keys {
 __uint128_t apiakey;
 __uint128_t apibkey;
 __uint128_t apdakey;
 __uint128_t apdbkey;
};

struct user_pac_generic_keys {
 __uint128_t apgakey;
};
# 14 "arch/arm64/include/asm/ptrace.h" 2
# 149 "arch/arm64/include/asm/ptrace.h"
static inline unsigned long compat_psr_to_pstate(const unsigned long psr)
{
 unsigned long pstate;

 pstate = psr & ~0x00200000;

 if (psr & 0x00200000)
  pstate |= 0x01000000;

 return pstate;
}

static inline unsigned long pstate_to_compat_psr(const unsigned long pstate)
{
 unsigned long psr;

 psr = pstate & ~0x01000000;

 if (pstate & 0x01000000)
  psr |= 0x00200000;

 return psr;
}






struct pt_regs {
 union {
  struct user_pt_regs user_regs;
  struct {
   u64 regs[31];
   u64 sp;
   u64 pc;
   u64 pstate;
  };
 };
 u64 orig_x0;




 s32 syscallno;
 u32 unused2;

 u64 sdei_ttbr1;

 u64 pmr_save;
 u64 stackframe[2];


 u64 lockdep_hardirqs;

 u64 exit_rcu : 1,
  oob_on_entry : 1,
  stalled_on_entry : 1;



};

static inline bool in_syscall(struct pt_regs const *regs)
{
 return regs->syscallno != (-1);
}

static inline void forget_syscall(struct pt_regs *regs)
{
 regs->syscallno = (-1);
}
# 254 "arch/arm64/include/asm/ptrace.h"
static inline unsigned long user_stack_pointer(struct pt_regs *regs)
{
 if ((((regs)->pstate & (0x00000010 | 0x0000000f)) == (0x00000010 | 0x00000000)))
  return regs->regs[13];
 return regs->sp;
}

extern int regs_query_register_offset(const char *name);
extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n);
# 274 "arch/arm64/include/asm/ptrace.h"
static inline u64 regs_get_register(struct pt_regs *regs, unsigned int offset)
{
 u64 val = 0;

 ({ int __ret_warn_on = !!(offset & 7); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 278; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });

 offset >>= 3;
 switch (offset) {
 case 0 ... 30:
  val = regs->regs[offset];
  break;
 case ((size_t)&((struct pt_regs *)0)->sp) >> 3:
  val = regs->sp;
  break;
 case ((size_t)&((struct pt_regs *)0)->pc) >> 3:
  val = regs->pc;
  break;
 case ((size_t)&((struct pt_regs *)0)->pstate) >> 3:
  val = regs->pstate;
  break;
 default:
  val = 0;
 }

 return val;
}





static inline unsigned long pt_regs_read_reg(const struct pt_regs *regs, int r)
{
 return (r == 31) ? 0 : regs->regs[r];
}





static inline void pt_regs_write_reg(struct pt_regs *regs, int r,
         unsigned long val)
{
 if (r != 31)
  regs->regs[r] = val;
}


static inline unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}

static inline unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->regs[0];
}

static inline void regs_set_return_value(struct pt_regs *regs, unsigned long rc)
{
 regs->regs[0] = rc;
}
# 350 "arch/arm64/include/asm/ptrace.h"
static inline unsigned long regs_get_kernel_argument(struct pt_regs *regs,
           unsigned int n)
{

 if (n < 8)
  return pt_regs_read_reg(regs, n);
 return 0;
}


struct task_struct;
int valid_user_regs(struct user_pt_regs *regs, struct task_struct *task);

static inline unsigned long instruction_pointer(struct pt_regs *regs)
{
 return regs->pc;
}
static inline void instruction_pointer_set(struct pt_regs *regs,
  unsigned long val)
{
 regs->pc = val;
}

static inline unsigned long frame_pointer(struct pt_regs *regs)
{
 return regs->regs[29];
}



static inline void procedure_link_pointer_set(struct pt_regs *regs,
        unsigned long val)
{
 ((regs)->regs[30]) = val;
}

extern unsigned long profile_pc(struct pt_regs *regs);
# 11 "arch/arm64/include/asm/irqflags.h" 2
# 31 "arch/arm64/include/asm/irqflags.h"
static inline void native_irq_enable(void)
{
 if (system_has_prio_mask_debugging()) {
  u32 pmr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });

  ({ int __ret_warn_on = !!(pmr != 0xe0 && pmr != ({ extern struct static_key_false gic_nonsecure_priorities; u8 __prio = (0xe0 & ~0x80); if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_true)) branch = arch_static_branch_jump(&(&gic_nonsecure_priorities)->key, false); else if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_false)) branch = arch_static_branch(&(&gic_nonsecure_priorities)->key, false); else branch = ____wrong_branch_error(); unlikely_notrace(branch); })) __prio = 0xa0; __prio; })); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/irqflags.h\"; .popsection; .long 14472b - 14470b; .short 36; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 }

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daifclr, #3		// native_irq_enable" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "19" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  :
  : "r" ((unsigned long) 0xe0)
  : "memory");

 do {} while (0);
}

static inline void native_irq_disable(void)
{
 if (system_has_prio_mask_debugging()) {
  u32 pmr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });

  ({ int __ret_warn_on = !!(pmr != 0xe0 && pmr != ({ extern struct static_key_false gic_nonsecure_priorities; u8 __prio = (0xe0 & ~0x80); if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_true)) branch = arch_static_branch_jump(&(&gic_nonsecure_priorities)->key, false); else if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_false)) branch = arch_static_branch(&(&gic_nonsecure_priorities)->key, false); else branch = ____wrong_branch_error(); unlikely_notrace(branch); })) __prio = 0xa0; __prio; })); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/irqflags.h\"; .popsection; .long 14472b - 14470b; .short 55; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 }

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daifset, #3		// native_irq_disable" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "19" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  :
  : "r" ((unsigned long) ({ extern struct static_key_false gic_nonsecure_priorities; u8 __prio = (0xe0 & ~0x80); if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_true)) branch = arch_static_branch_jump(&(&gic_nonsecure_priorities)->key, false); else if (__builtin_types_compatible_p(typeof(*&gic_nonsecure_priorities), struct static_key_false)) branch = arch_static_branch(&(&gic_nonsecure_priorities)->key, false); else branch = ____wrong_branch_error(); unlikely_notrace(branch); })) __prio = 0xa0; __prio; }))
  : "memory");
}

static inline void native_irq_sync(void)
{
 native_irq_enable();
 asm volatile("isb" : : : "memory");
 native_irq_disable();
}




static inline unsigned long native_save_flags(void)
{
 unsigned long flags;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "mrs	%0, daif" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "19" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  : "=&r" (flags)
  :
  : "memory");

 return flags;
}

static inline int native_irqs_disabled_flags(unsigned long flags)
{
 int res;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "and	%w0, %w1, #" "0x00000080" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "19" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "eor	%w0, %w1, #" "0xe0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  : "=&r" (res)
  : "r" ((int) flags)
  : "memory");

 return res;
}

static inline unsigned long native_irq_save(void)
{
 unsigned long flags;

 flags = native_save_flags();





 if (!native_irqs_disabled_flags(flags))
  native_irq_disable();

 return flags;
}




static inline void native_irq_restore(unsigned long flags)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daif, %0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "19" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"



  :
  : "r" (flags)
  : "memory");

 do {} while (0);
}

static inline bool native_irqs_disabled(void)
{
 unsigned long flags = native_save_flags();
 return native_irqs_disabled_flags(flags);
}

# 1 "arch/arm64/include/asm/irq_pipeline.h" 1
# 23 "arch/arm64/include/asm/irq_pipeline.h"
extern int ipi_irq_base;

static inline notrace
unsigned long arch_irqs_virtual_to_native_flags(int stalled)
{
 return (!!stalled) << 7;
}

static inline notrace
unsigned long arch_irqs_native_to_virtual_flags(unsigned long flags)
{
 return (!!native_irqs_disabled_flags(flags)) << 31;
}

static inline notrace unsigned long arch_local_irq_save(void)
{
 int stalled = inband_irq_save();
 barrier();
 return arch_irqs_virtual_to_native_flags(stalled);
}

static inline notrace void arch_local_irq_enable(void)
{
 barrier();
 inband_irq_enable();
}

static inline notrace void arch_local_irq_disable(void)
{
 inband_irq_disable();
 barrier();
}

static inline notrace unsigned long arch_local_save_flags(void)
{
 int stalled = inband_irqs_disabled();
 barrier();
 return arch_irqs_virtual_to_native_flags(stalled);
}

static inline int arch_irqs_disabled_flags(unsigned long flags)
{
 return native_irqs_disabled_flags(flags);
}

static inline notrace void arch_local_irq_restore(unsigned long flags)
{
 inband_irq_restore(arch_irqs_disabled_flags(flags));
 barrier();
}

static inline
void arch_save_timer_regs(struct pt_regs *dst, struct pt_regs *src)
{
 dst->pstate = src->pstate;
 dst->pc = src->pc;
}

static inline bool arch_steal_pipelined_tick(struct pt_regs *regs)
{
 return !!(regs->pstate & 0x00000080);
}

static inline int arch_enable_oob_stage(void)
{
 return 0;
}

extern void (*handle_arch_irq)(struct pt_regs *);

static inline void arch_handle_irq_pipelined(struct pt_regs *regs)
{
 handle_arch_irq(regs);
}
# 143 "arch/arm64/include/asm/irq_pipeline.h"
static inline int arch_irqs_disabled(void)
{
 return arch_irqs_disabled_flags(arch_local_save_flags());
}
# 146 "arch/arm64/include/asm/irqflags.h" 2
# 18 "include/linux/irqflags.h" 2
# 28 "include/linux/irqflags.h"
  static inline void lockdep_softirqs_on(unsigned long ip) { }
  static inline void lockdep_softirqs_off(unsigned long ip) { }
  static inline void lockdep_hardirqs_on_prepare(unsigned long ip) { }
  static inline void lockdep_hardirqs_on(unsigned long ip) { }
  static inline void lockdep_hardirqs_off(unsigned long ip) { }
# 55 "include/linux/spinlock.h" 2



# 1 "include/linux/bottom_half.h" 1
# 10 "include/linux/bottom_half.h"
static 
# 10 "include/linux/bottom_half.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 10 "include/linux/bottom_half.h"
                      void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 barrier();
}


static inline void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}




static inline bool local_bh_blocked(void) { return false; }
# 59 "include/linux/spinlock.h" 2
# 1 "include/linux/lockdep.h" 1
# 17 "include/linux/lockdep.h"
struct task_struct;


extern int prove_locking;
extern int lock_stat;
# 348 "include/linux/lockdep.h"
static inline void lockdep_init_task(struct task_struct *task)
{
}

static inline void lockdep_off(void)
{
}

static inline void lockdep_on(void)
{
}

static inline void lockdep_set_selftest_task(struct task_struct *task)
{
}
# 397 "include/linux/lockdep.h"
static inline void lockdep_register_key(struct lock_class_key *key)
{
}

static inline void lockdep_unregister_key(struct lock_class_key *key)
{
}







extern int lock_is_held(const void *);
extern int lockdep_is_held(const void *);
# 432 "include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 446 "include/linux/lockdep.h"
static inline void lockdep_invariant_state(bool force) {}
static inline void lockdep_free_task(struct task_struct *task) {}
# 508 "include/linux/lockdep.h"
static inline void print_irqtrace_events(struct task_struct *curr)
{
}
# 689 "include/linux/lockdep.h"
static inline void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 60 "include/linux/spinlock.h" 2

# 1 "arch/arm64/include/generated/asm/mmiowb.h" 1
# 1 "include/asm-generic/mmiowb.h" 1
# 1 "arch/arm64/include/generated/asm/mmiowb.h" 2
# 62 "include/linux/spinlock.h" 2
# 90 "include/linux/spinlock.h"
# 1 "arch/arm64/include/asm/spinlock.h" 1







# 1 "arch/arm64/include/generated/asm/qspinlock.h" 1
# 1 "include/asm-generic/qspinlock.h" 1
# 13 "include/asm-generic/qspinlock.h"
# 1 "include/asm-generic/qspinlock_types.h" 1
# 14 "include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 union {
  atomic_t val;







  struct {
   u8 locked;
   u8 pending;
  };
  struct {
   u16 locked_pending;
   u16 tail;
  };
# 43 "include/asm-generic/qspinlock_types.h"
 };
} arch_spinlock_t;
# 14 "include/asm-generic/qspinlock.h" 2
# 22 "include/asm-generic/qspinlock.h"
static 
# 22 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 22 "include/asm-generic/qspinlock.h"
                      int queued_spin_is_locked(struct qspinlock *lock)
{




 return atomic_read(&lock->val);
}
# 42 "include/asm-generic/qspinlock.h"
static 
# 42 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 42 "include/asm-generic/qspinlock.h"
                      int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static 
# 52 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 52 "include/asm-generic/qspinlock.h"
                      int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static 
# 61 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 61 "include/asm-generic/qspinlock.h"
                      int queued_spin_trylock(struct qspinlock *lock)
{
 int val = atomic_read(&lock->val);

 if (unlikely(val))
  return 0;

 return likely(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0)));
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);






static 
# 78 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 78 "include/asm-generic/qspinlock.h"
                      void queued_spin_lock(struct qspinlock *lock)
{
 int val = 0;

 if (likely(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))))
  return;

 queued_spin_lock_slowpath(lock, val);
}







static 
# 94 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 94 "include/asm-generic/qspinlock.h"
                      void queued_spin_unlock(struct qspinlock *lock)
{



 do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&lock->locked) *)&(*&lock->locked) = (0); } while (0); } while (0); } while (0);
}



static 
# 104 "include/asm-generic/qspinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 104 "include/asm-generic/qspinlock.h"
                      bool virt_spin_lock(struct qspinlock *lock)
{
 return false;
}
# 1 "arch/arm64/include/generated/asm/qspinlock.h" 2
# 9 "arch/arm64/include/asm/spinlock.h" 2
# 1 "arch/arm64/include/generated/asm/qrwlock.h" 1
# 1 "include/asm-generic/qrwlock.h" 1
# 14 "include/asm-generic/qrwlock.h"
# 1 "arch/arm64/include/asm/processor.h" 1
# 28 "arch/arm64/include/asm/processor.h"
# 1 "include/vdso/processor.h" 1
# 10 "include/vdso/processor.h"
# 1 "arch/arm64/include/asm/vdso/processor.h" 1
# 10 "arch/arm64/include/asm/vdso/processor.h"
static inline void cpu_relax(void)
{
 asm volatile("yield" ::: "memory");
}
# 11 "include/vdso/processor.h" 2
# 29 "arch/arm64/include/asm/processor.h" 2



# 1 "arch/arm64/include/asm/hw_breakpoint.h" 1
# 11 "arch/arm64/include/asm/hw_breakpoint.h"
# 1 "arch/arm64/include/asm/virt.h" 1
# 55 "arch/arm64/include/asm/virt.h"
# 1 "arch/arm64/include/asm/sections.h" 1







# 1 "include/asm-generic/sections.h" 1
# 35 "include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];


extern char __noinstr_text_start[], __noinstr_text_end[];

extern __attribute__((__externally_visible__)) const void __nosave_begin, __nosave_end;
# 70 "include/asm-generic/sections.h"
static inline int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
# 91 "include/asm-generic/sections.h"
static inline int arch_is_kernel_initmem_freed(unsigned long addr)
{
 return 0;
}
# 108 "include/asm-generic/sections.h"
static inline bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 125 "include/asm-generic/sections.h"
static inline bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 142 "include/asm-generic/sections.h"
static inline bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 156 "include/asm-generic/sections.h"
static inline bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 169 "include/asm-generic/sections.h"
static inline bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 9 "arch/arm64/include/asm/sections.h" 2

extern char __alt_instructions[], __alt_instructions_end[];
extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
extern char __hyp_text_start[], __hyp_text_end[];
extern char __hyp_rodata_start[], __hyp_rodata_end[];
extern char __hyp_reloc_begin[], __hyp_reloc_end[];
extern char __hyp_bss_start[], __hyp_bss_end[];
extern char __idmap_text_start[], __idmap_text_end[];
extern char __initdata_begin[], __initdata_end[];
extern char __inittext_begin[], __inittext_end[];
extern char __exittext_begin[], __exittext_end[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __mmuoff_data_start[], __mmuoff_data_end[];
extern char __entry_tramp_text_start[], __entry_tramp_text_end[];
# 56 "arch/arm64/include/asm/virt.h" 2
# 68 "arch/arm64/include/asm/virt.h"
extern u32 __boot_cpu_mode[2];

void __hyp_set_vectors(phys_addr_t phys_vector_base);
void __hyp_reset_vectors(void);

extern struct static_key_false kvm_protected_mode_initialized;


static inline bool is_hyp_mode_available(void)
{




 if (1 &&
     ({ bool branch; if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_true)) branch = !arch_static_branch(&(&kvm_protected_mode_initialized)->key, true); else if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_false)) branch = !arch_static_branch_jump(&(&kvm_protected_mode_initialized)->key, true); else branch = ____wrong_branch_error(); likely_notrace(branch); }))
  return true;

 return (__boot_cpu_mode[0] == (0xe12) &&
  __boot_cpu_mode[1] == (0xe12));
}


static inline bool is_hyp_mode_mismatched(void)
{




 if (1 &&
     ({ bool branch; if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_true)) branch = !arch_static_branch(&(&kvm_protected_mode_initialized)->key, true); else if (__builtin_types_compatible_p(typeof(*&kvm_protected_mode_initialized), struct static_key_false)) branch = !arch_static_branch_jump(&(&kvm_protected_mode_initialized)->key, true); else branch = ____wrong_branch_error(); likely_notrace(branch); }))
  return false;

 return __boot_cpu_mode[0] != __boot_cpu_mode[1];
}

static inline bool is_kernel_in_hyp_mode(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "CurrentEL" : "=r" (__val)); __val; }) == (2 << 2);
}

static 
# 109 "arch/arm64/include/asm/virt.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 109 "arch/arm64/include/asm/virt.h"
                      bool has_vhe(void)
{




 if (is_vhe_hyp_code())
  return true;
 else if (is_nvhe_hyp_code())
  return false;
 else
  return cpus_have_final_cap(31);
}

static 
# 123 "arch/arm64/include/asm/virt.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 123 "arch/arm64/include/asm/virt.h"
                      bool is_protected_kvm_enabled(void)
{
 if (is_vhe_hyp_code())
  return false;
 else
  return cpus_have_final_cap(33);
}
# 12 "arch/arm64/include/asm/hw_breakpoint.h" 2

struct arch_hw_breakpoint_ctrl {
 u32 __reserved : 19,
 len : 8,
 type : 2,
 privilege : 2,
 enabled : 1;
};

struct arch_hw_breakpoint {
 u64 address;
 u64 trigger;
 struct arch_hw_breakpoint_ctrl ctrl;
};







static inline u32 encode_ctrl_reg(struct arch_hw_breakpoint_ctrl ctrl)
{
 u32 val = (ctrl.len << 5) | (ctrl.type << 3) | (ctrl.privilege << 1) |
  ctrl.enabled;

 if (is_kernel_in_hyp_mode() && ctrl.privilege == 1)
  val |= (1 << 13);

 return val;
}

static inline void decode_ctrl_reg(u32 reg,
       struct arch_hw_breakpoint_ctrl *ctrl)
{
 ctrl->enabled = reg & 0x1;
 reg >>= 1;
 ctrl->privilege = reg & 0x3;
 reg >>= 2;
 ctrl->type = reg & 0x3;
 reg >>= 2;
 ctrl->len = reg & 0xff;
}
# 107 "arch/arm64/include/asm/hw_breakpoint.h"
struct task_struct;
struct notifier_block;
struct perf_event_attr;
struct perf_event;
struct pmu;

extern int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl ctrl,
      int *gen_len, int *gen_type, int *offset);
extern int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_arch_parse(struct perf_event *bp,
        const struct perf_event_attr *attr,
        struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);

extern int arch_install_hw_breakpoint(struct perf_event *bp);
extern void arch_uninstall_hw_breakpoint(struct perf_event *bp);
extern void hw_breakpoint_pmu_read(struct perf_event *bp);
extern int hw_breakpoint_slots(int type);


extern void hw_breakpoint_thread_switch(struct task_struct *next);
extern void ptrace_hw_copy_thread(struct task_struct *task);
# 140 "arch/arm64/include/asm/hw_breakpoint.h"
static inline int get_num_brps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      12);
}


static inline int get_num_wrps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      20);
}
# 33 "arch/arm64/include/asm/processor.h" 2
# 1 "arch/arm64/include/asm/kasan.h" 1
# 9 "arch/arm64/include/asm/kasan.h"
# 1 "arch/arm64/include/asm/mte-kasan.h" 1







# 1 "arch/arm64/include/asm/mte-def.h" 1
# 9 "arch/arm64/include/asm/mte-kasan.h" 2
# 99 "arch/arm64/include/asm/mte-kasan.h"
static inline u8 mte_get_ptr_tag(void *ptr)
{
 return 0xFF;
}

static inline u8 mte_get_mem_tag(void *addr)
{
 return 0xFF;
}

static inline u8 mte_get_random_tag(void)
{
 return 0xFF;
}

static inline void mte_set_mem_tag_range(void *addr, size_t size,
      u8 tag, bool init)
{
}

static inline void mte_enable_kernel_sync(void)
{
}

static inline void mte_enable_kernel_async(void)
{
}

static inline void mte_init_tags(u64 max_tag)
{
}

static inline void mte_set_report_once(bool state)
{
}

static inline bool mte_report_once(void)
{
 return false;
}
# 10 "arch/arm64/include/asm/kasan.h" 2
# 1 "arch/arm64/include/asm/pgtable-types.h" 1
# 14 "arch/arm64/include/asm/pgtable-types.h"
typedef u64 pteval_t;
typedef u64 pmdval_t;
typedef u64 pudval_t;
typedef u64 p4dval_t;
typedef u64 pgdval_t;




typedef struct { pteval_t pte; } pte_t;




typedef struct { pmdval_t pmd; } pmd_t;





typedef struct { pudval_t pud; } pud_t;




typedef struct { pgdval_t pgd; } pgd_t;



typedef struct { pteval_t pgprot; } pgprot_t;
# 52 "arch/arm64/include/asm/pgtable-types.h"
# 1 "include/asm-generic/pgtable-nop4d.h" 1
# 9 "include/asm-generic/pgtable-nop4d.h"
typedef struct { pgd_t pgd; } p4d_t;
# 22 "include/asm-generic/pgtable-nop4d.h"
static inline int pgd_none(pgd_t pgd) { return 0; }
static inline int pgd_bad(pgd_t pgd) { return 0; }
static inline int pgd_present(pgd_t pgd) { return 1; }
static inline void pgd_clear(pgd_t *pgd) { }
# 36 "include/asm-generic/pgtable-nop4d.h"
static inline p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 return (p4d_t *)pgd;
}
# 53 "arch/arm64/include/asm/pgtable-types.h" 2
# 11 "arch/arm64/include/asm/kasan.h" 2
# 43 "arch/arm64/include/asm/kasan.h"
static inline void kasan_init(void) { }
static inline void kasan_copy_shadow(pgd_t *pgdir) { }
# 34 "arch/arm64/include/asm/processor.h" 2

# 1 "arch/arm64/include/asm/pgtable-hwdef.h" 1
# 36 "arch/arm64/include/asm/processor.h" 2
# 1 "arch/arm64/include/asm/pointer_auth.h" 1





# 1 "include/uapi/linux/prctl.h" 1
# 134 "include/uapi/linux/prctl.h"
struct prctl_mm_map {
 __u64 start_code;
 __u64 end_code;
 __u64 start_data;
 __u64 end_data;
 __u64 start_brk;
 __u64 brk;
 __u64 start_stack;
 __u64 arg_start;
 __u64 arg_end;
 __u64 env_start;
 __u64 env_end;
 __u64 *auxv;
 __u32 auxv_size;
 __u32 exe_fd;
};
# 7 "arch/arm64/include/asm/pointer_auth.h" 2
# 1 "include/linux/random.h" 1
# 13 "include/linux/random.h"
# 1 "include/linux/once.h" 1







bool __do_once_start(bool *done, unsigned long *flags);
void __do_once_done(bool *done, struct static_key_true *once_key,
      unsigned long *flags);
# 14 "include/linux/random.h" 2

# 1 "include/uapi/linux/random.h" 1
# 12 "include/uapi/linux/random.h"
# 1 "include/uapi/linux/ioctl.h" 1




# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "include/asm-generic/ioctl.h" 1 3 4




# 1 "include/uapi/asm-generic/ioctl.h" 1 3 4
# 6 "include/asm-generic/ioctl.h" 2 3 4






# 11 "include/asm-generic/ioctl.h" 3 4
extern unsigned int __invalid_size_argument_for_IOC;
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "include/uapi/linux/ioctl.h" 2
# 13 "include/uapi/linux/random.h" 2
# 1 "include/linux/irqnr.h" 1




# 1 "include/uapi/linux/irqnr.h" 1
# 6 "include/linux/irqnr.h" 2



# 8 "include/linux/irqnr.h"
extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 14 "include/uapi/linux/random.h" 2
# 41 "include/uapi/linux/random.h"
struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};
# 16 "include/linux/random.h" 2

struct random_ready_callback {
 struct list_head list;
 void (*func)(struct random_ready_callback *rdy);
 struct module *owner;
};

extern void add_device_randomness(const void *, unsigned int);
extern void add_bootloader_randomness(const void *, unsigned int);
# 33 "include/linux/random.h"
static inline void add_latent_entropy(void) {}


extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value) ;
extern void add_interrupt_randomness(int irq, int irq_flags) ;

extern void get_random_bytes(void *buf, int nbytes);
extern int wait_for_random_bytes(void);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) rand_initialize(void);
extern bool rng_is_initialized(void);
extern int add_random_ready_callback(struct random_ready_callback *rdy);
extern void del_random_ready_callback(struct random_ready_callback *rdy);
extern int __attribute__((__warn_unused_result__)) get_random_bytes_arch(void *buf, int nbytes);


extern const struct file_operations random_fops, urandom_fops;


u32 get_random_u32(void);
u64 get_random_u64(void);
static inline unsigned int get_random_int(void)
{
 return get_random_u32();
}
static inline unsigned long get_random_long(void)
{



 return get_random_u32();

}
# 81 "include/linux/random.h"
static inline unsigned long get_random_canary(void)
{
 unsigned long val = get_random_long();

 return val & 0xffffffffffffff00UL;
}



static inline int get_random_bytes_wait(void *buf, int nbytes)
{
 int ret = wait_for_random_bytes();
 get_random_bytes(buf, nbytes);
 return ret;
}
# 105 "include/linux/random.h"
static inline int get_random_u32_wait(u32 *out) { int ret = wait_for_random_bytes(); if (unlikely(ret)) return ret; *out = get_random_u32(); return 0; }
static inline int get_random_u64_wait(u64 *out) { int ret = wait_for_random_bytes(); if (unlikely(ret)) return ret; *out = get_random_u64(); return 0; }
static inline int get_random_int_wait(int *out) { int ret = wait_for_random_bytes(); if (unlikely(ret)) return ret; *out = get_random_int(); return 0; }
static inline int get_random_long_wait(long *out) { int ret = wait_for_random_bytes(); if (unlikely(ret)) return ret; *out = get_random_long(); return 0; }


unsigned long randomize_page(unsigned long start, unsigned long range);






# 1 "include/linux/prandom.h" 1
# 12 "include/linux/prandom.h"
# 1 "include/linux/percpu.h" 1
# 65 "include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);
# 126 "include/linux/percpu.h"
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);





extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 146 "include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 13 "include/linux/prandom.h" 2

u32 prandom_u32(void);
void prandom_bytes(void *buf, size_t nbytes);
void prandom_seed(u32 seed);
void prandom_reseed_late(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) net_rand_noise;
# 59 "include/linux/prandom.h"
static inline void prandom_u32_add_noise(unsigned long a, unsigned long b,
      unsigned long c, unsigned long d)
{




 a ^= ({ typeof(net_rand_noise) pscr_ret__; do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 66 "include/linux/prandom.h" 3 4
     ((void *)0)
# 66 "include/linux/prandom.h"
     ; (void)__vpp_verify; } while (0); switch(sizeof(net_rand_noise)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 66 "include/linux/prandom.h" 3 4
     ((void *)0)
# 66 "include/linux/prandom.h"
     ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 66 "include/linux/prandom.h" 3 4
     ((void *)0)
# 66 "include/linux/prandom.h"
     ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 66 "include/linux/prandom.h" 3 4
     ((void *)0)
# 66 "include/linux/prandom.h"
     ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 66 "include/linux/prandom.h" 3 4
     ((void *)0)
# 66 "include/linux/prandom.h"
     ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
 ( a += b, b = rol32(b, 5), c += d, d = rol32(d, 8), b ^= a, a = rol32(a, 16), d ^= c, a += d, d = rol32(d, 7), c += b, b = rol32(b, 13), d ^= a, b ^= c, c = rol32(c, 16) );
 do { do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 68 "include/linux/prandom.h" 3 4
((void *)0)
# 68 "include/linux/prandom.h"
; (void)__vpp_verify; } while (0); switch(sizeof(net_rand_noise)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 68 "include/linux/prandom.h" 3 4
((void *)0)
# 68 "include/linux/prandom.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }) = d; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 68 "include/linux/prandom.h" 3 4
((void *)0)
# 68 "include/linux/prandom.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }) = d; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 68 "include/linux/prandom.h" 3 4
((void *)0)
# 68 "include/linux/prandom.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }) = d; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(net_rand_noise)) + 0))
# 68 "include/linux/prandom.h" 3 4
((void *)0)
# 68 "include/linux/prandom.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(net_rand_noise))) *)(&(net_rand_noise)), (__kern_my_cpu_offset())); }) = d; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

struct rnd_state {
 __u32 s1, s2, s3, s4;
};

u32 prandom_u32_state(struct rnd_state *state);
void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
void prandom_seed_full_state(struct rnd_state *pcpu_state);
# 94 "include/linux/prandom.h"
static inline u32 prandom_u32_max(u32 ep_ro)
{
 return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
}




static inline u32 __seed(u32 x, u32 m)
{
 return (x < m) ? x + m : x;
}






static inline void prandom_seed_state(struct rnd_state *state, u64 seed)
{
 u32 i = (seed >> 32) ^ (seed << 10) ^ seed;

 state->s1 = __seed(i, 2U);
 state->s2 = __seed(i, 8U);
 state->s3 = __seed(i, 16U);
 state->s4 = __seed(i, 128U);
 prandom_u32_add_noise((unsigned long)(state), (unsigned long)(i), (unsigned long)(0), (unsigned long)(0));
}


static inline u32 next_pseudo_random32(u32 seed)
{
 return seed * 1664525 + 1013904223;
}
# 119 "include/linux/random.h" 2


# 1 "arch/arm64/include/asm/archrandom.h" 1






# 1 "include/linux/arm-smccc.h" 1
# 191 "include/linux/arm-smccc.h"
enum arm_smccc_conduit {
 SMCCC_CONDUIT_NONE,
 SMCCC_CONDUIT_SMC,
 SMCCC_CONDUIT_HVC,
};
# 204 "include/linux/arm-smccc.h"
enum arm_smccc_conduit arm_smccc_1_1_get_conduit(void);
# 215 "include/linux/arm-smccc.h"
u32 arm_smccc_get_version(void);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) arm_smccc_version_init(u32 version, enum arm_smccc_conduit conduit);





struct arm_smccc_res {
 unsigned long a0;
 unsigned long a1;
 unsigned long a2;
 unsigned long a3;
};







struct arm_smccc_quirk {
 int id;
 union {
  unsigned long a6;
 } state;
};
# 255 "include/linux/arm-smccc.h"
 void __arm_smccc_smc(unsigned long a0, unsigned long a1,
   unsigned long a2, unsigned long a3, unsigned long a4,
   unsigned long a5, unsigned long a6, unsigned long a7,
   struct arm_smccc_res *res, struct arm_smccc_quirk *quirk);
# 272 "include/linux/arm-smccc.h"
 void __arm_smccc_hvc(unsigned long a0, unsigned long a1,
   unsigned long a2, unsigned long a3, unsigned long a4,
   unsigned long a5, unsigned long a6, unsigned long a7,
   struct arm_smccc_res *res, struct arm_smccc_quirk *quirk);
# 8 "arch/arm64/include/asm/archrandom.h" 2






extern bool smccc_trng_available;

static inline bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) smccc_probe_trng(void)
{
 struct arm_smccc_res res;

 ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((0) << 30) | (((4) & 0x3F) << 24) | ((0x50) & 0xFFFF)); asm volatile("hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((0) << 30) | (((4) & 0x3F) << 24) | ((0x50) & 0xFFFF)); asm volatile("smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((0) << 30) | (((4) & 0x3F) << 24) | ((0x50) & 0xFFFF)); asm ("" : : "r" (arg0) : "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
 if ((s32)res.a0 < 0)
  return false;

 return res.a0 >= 0x10000UL;
}

static inline bool __arm64_rndr(unsigned long *v)
{
 bool ok;





 asm volatile(
  "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((3) << 16) | ((2) << 12) | ((4) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" "\n"
 "	cset %w1, ne\n"
 : "=r" (*v), "=r" (ok)
 :
 : "cc");

 return ok;
}

static inline bool __attribute__((__warn_unused_result__)) arch_get_random_long(unsigned long *v)
{
 return false;
}

static inline bool __attribute__((__warn_unused_result__)) arch_get_random_int(unsigned int *v)
{
 return false;
}

static inline bool __attribute__((__warn_unused_result__)) arch_get_random_seed_long(unsigned long *v)
{
 struct arm_smccc_res res;







 if (smccc_trng_available) {
  ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile("hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile("smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm ("" : : "r" (arg0), "r" (arg1) : "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
  if ((int)res.a0 >= 0) {
   *v = res.a3;
   return true;
  }
 }







 if (cpus_have_const_cap(26) && __arm64_rndr(v))
  return true;

 return false;
}

static inline bool __attribute__((__warn_unused_result__)) arch_get_random_seed_int(unsigned int *v)
{
 struct arm_smccc_res res;
 unsigned long val;

 if (smccc_trng_available) {
  ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(32) __a1 = 32; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(32) arg1 asm("r1") = __a1; asm volatile("hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(32) __a1 = 32; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(32) arg1 asm("r1") = __a1; asm volatile("smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { typeof(32) __a1 = 32; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(32) arg1 asm("r1") = __a1; asm ("" : : "r" (arg0), "r" (arg1) : "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
  if ((int)res.a0 >= 0) {
   *v = res.a3 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (31)) * 0l)) : (int *)8))), (0) > (31), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (
# 93 "arch/arm64/include/asm/archrandom.h" 3 4
                32 
# 93 "arch/arm64/include/asm/archrandom.h"
                - 1 - (31)))));
   return true;
  }
 }

 if (cpus_have_const_cap(26)) {
  if (__arm64_rndr(&val)) {
   *v = val;
   return true;
  }
 }

 return false;
}

static inline bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __early_cpu_has_rndr(void)
{

 unsigned long ftr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
 return (ftr >> 60) & 0xf;
}

static inline bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__warn_unused_result__))
arch_get_random_seed_long_early(unsigned long *v)
{
 ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/archrandom.h\"; .popsection; .long 14472b - 14470b; .short 118; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });

 if (smccc_trng_available) {
  struct arm_smccc_res res;

  ({ int method = arm_smccc_1_1_get_conduit(); switch (method) { case SMCCC_CONDUIT_HVC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile("hvc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; case SMCCC_CONDUIT_SMC: do { register unsigned long r0 asm("r0"); register unsigned long r1 asm("r1"); register unsigned long r2 asm("r2"); register unsigned long r3 asm("r3"); typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm volatile("smc	#0" "\n" : "=r" (r0), "=r" (r1), "=r" (r2), "=r" (r3) : "r" (arg0), "r" (arg1) : "memory"); if (___res) *___res = (typeof(*___res)){r0, r1, r2, r3}; } while (0); break; default: do { typeof(64) __a1 = 64; struct arm_smccc_res *___res = &res; register unsigned long arg0 asm("r0") = (u32)((((1U)) << 31) | ((1) << 30) | (((4) & 0x3F) << 24) | ((0x53) & 0xFFFF)); register typeof(64) arg1 asm("r1") = __a1; asm ("" : : "r" (arg0), "r" (arg1) : "memory"); if (___res) ___res->a0 = -1; } while (0); method = SMCCC_CONDUIT_NONE; break; } method; });
  if ((int)res.a0 >= 0) {
   *v = res.a3;
   return true;
  }
 }

 if (__early_cpu_has_rndr() && __arm64_rndr(v))
  return true;

 return false;
}
# 122 "include/linux/random.h" 2
# 154 "include/linux/random.h"
static inline bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) arch_get_random_long_early(unsigned long *v)
{
 ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/random.h\"; .popsection; .long 14472b - 14470b; .short 156; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return arch_get_random_long(v);
}
# 8 "arch/arm64/include/asm/pointer_auth.h" 2
# 18 "arch/arm64/include/asm/pointer_auth.h"
struct ptrauth_key {
 unsigned long lo, hi;
};





struct ptrauth_keys_user {
 struct ptrauth_key apia;
 struct ptrauth_key apib;
 struct ptrauth_key apda;
 struct ptrauth_key apdb;
 struct ptrauth_key apga;
};

struct ptrauth_keys_kernel {
 struct ptrauth_key apia;
};
# 45 "arch/arm64/include/asm/pointer_auth.h"
static inline void ptrauth_keys_install_user(struct ptrauth_keys_user *keys)
{
 if (system_supports_address_auth()) {
  do { struct ptrauth_key __pki_v = (keys->apib); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((2) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((3) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apda); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apdb); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((2) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((3) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
 }

 if (system_supports_generic_auth())
  do { struct ptrauth_key __pki_v = (keys->apga); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((3) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((3) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
}

static inline void ptrauth_keys_init_user(struct ptrauth_keys_user *keys)
{
 if (system_supports_address_auth()) {
  get_random_bytes(&keys->apia, sizeof(keys->apia));
  get_random_bytes(&keys->apib, sizeof(keys->apib));
  get_random_bytes(&keys->apda, sizeof(keys->apda));
  get_random_bytes(&keys->apdb, sizeof(keys->apdb));
 }

 if (system_supports_generic_auth())
  get_random_bytes(&keys->apga, sizeof(keys->apga));

 ptrauth_keys_install_user(keys);
}

static 
# 72 "arch/arm64/include/asm/pointer_auth.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 72 "arch/arm64/include/asm/pointer_auth.h"
                      void ptrauth_keys_init_kernel(struct ptrauth_keys_kernel *keys)
{
 if (system_supports_address_auth())
  get_random_bytes(&keys->apia, sizeof(keys->apia));
}

static 
# 78 "arch/arm64/include/asm/pointer_auth.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 78 "arch/arm64/include/asm/pointer_auth.h"
                      void ptrauth_keys_switch_kernel(struct ptrauth_keys_kernel *keys)
{
 if (!system_supports_address_auth())
  return;

 do { struct ptrauth_key __pki_v = (keys->apia); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
 asm volatile("isb" : : : "memory");
}

extern int ptrauth_prctl_reset_keys(struct task_struct *tsk, unsigned long arg);

extern int ptrauth_set_enabled_keys(struct task_struct *tsk, unsigned long keys,
        unsigned long enabled);
extern int ptrauth_get_enabled_keys(struct task_struct *tsk);

static inline unsigned long ptrauth_strip_insn_pac(unsigned long ptr)
{
 return ptrauth_clear_pac(ptr);
}

static 
# 98 "arch/arm64/include/asm/pointer_auth.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 98 "arch/arm64/include/asm/pointer_auth.h"
                      void ptrauth_enable(void)
{
 if (!system_supports_address_auth())
  return;
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "sctlr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)(0)) | (((((((1UL))) << (31))) | (((((1UL))) << (30))) | (((((1UL))) << (27))) | (((((1UL))) << (13))))); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "sctlr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0)
                                      ;
 asm volatile("isb" : : : "memory");
}
# 37 "arch/arm64/include/asm/processor.h" 2

# 1 "arch/arm64/include/asm/spectre.h" 1
# 23 "arch/arm64/include/asm/spectre.h"
enum mitigation_state {
 SPECTRE_UNAFFECTED,
 SPECTRE_MITIGATED,
 SPECTRE_VULNERABLE,
};

struct task_struct;





enum arm64_hyp_spectre_vector {




 HYP_VECTOR_DIRECT,





 HYP_VECTOR_SPECTRE_DIRECT,





 HYP_VECTOR_INDIRECT,





 HYP_VECTOR_SPECTRE_INDIRECT,
};

typedef void (*bp_hardening_cb_t)(void);

struct bp_hardening_data {
 enum arm64_hyp_spectre_vector slot;
 bp_hardening_cb_t fn;
};

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(struct bp_hardening_data) bp_hardening_data;

static inline void arm64_apply_bp_hardening(void)
{
 struct bp_hardening_data *d;

 if (!cpus_have_const_cap(36))
  return;

 d = ({ do { const void *__vpp_verify = (typeof((&bp_hardening_data) + 0))
# 77 "arch/arm64/include/asm/spectre.h" 3 4
    ((void *)0)
# 77 "arch/arm64/include/asm/spectre.h"
    ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data), (__kern_my_cpu_offset())); });
 if (d->fn)
  d->fn();
}

enum mitigation_state arm64_get_spectre_v2_state(void);
bool has_spectre_v2(const struct arm64_cpu_capabilities *cap, int scope);
void spectre_v2_enable_mitigation(const struct arm64_cpu_capabilities *__unused);

bool has_spectre_v3a(const struct arm64_cpu_capabilities *cap, int scope);
void spectre_v3a_enable_mitigation(const struct arm64_cpu_capabilities *__unused);

enum mitigation_state arm64_get_spectre_v4_state(void);
bool has_spectre_v4(const struct arm64_cpu_capabilities *cap, int scope);
void spectre_v4_enable_mitigation(const struct arm64_cpu_capabilities *__unused);
void spectre_v4_enable_task_mitigation(struct task_struct *tsk);

enum mitigation_state arm64_get_meltdown_state(void);
# 39 "arch/arm64/include/asm/processor.h" 2
# 96 "arch/arm64/include/asm/processor.h"
extern phys_addr_t arm64_dma_phys_limit;


struct debug_info {


 int suspended_step;

 int bps_disabled;
 int wps_disabled;

 struct perf_event *hbp_break[16];
 struct perf_event *hbp_watch[16];

};

struct cpu_context {
 unsigned long x19;
 unsigned long x20;
 unsigned long x21;
 unsigned long x22;
 unsigned long x23;
 unsigned long x24;
 unsigned long x25;
 unsigned long x26;
 unsigned long x27;
 unsigned long x28;
 unsigned long fp;
 unsigned long sp;
 unsigned long pc;
};

struct thread_struct {
 struct cpu_context cpu_context;






 struct {
  unsigned long tp_value;
  unsigned long tp2_value;
  struct user_fpsimd_state fpsimd_state;
 } uw;

 unsigned int fpsimd_cpu;
 void *sve_state;
 unsigned int sve_vl;
 unsigned int sve_vl_onexec;
 unsigned long fault_address;
 unsigned long fault_code;
 struct debug_info debug;

 struct ptrauth_keys_user keys_user;
 struct ptrauth_keys_kernel keys_kernel;




 u64 sctlr_user;
};





static inline void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{

 do { } while (0)


                                                           ;

 *offset = ((size_t)&((struct thread_struct *)0)->uw);
 *size = sizeof((((struct thread_struct *)0)->uw));
}
# 191 "arch/arm64/include/asm/processor.h"
void tls_preserve_current_state(void);





static inline void start_thread_common(struct pt_regs *regs, unsigned long pc)
{
 memset(regs, 0, sizeof(*regs));
 forget_syscall(regs);
 regs->pc = pc;

 if (system_uses_irq_prio_masking())
  regs->pmr_save = 0xe0;
}

static inline void start_thread(struct pt_regs *regs, unsigned long pc,
    unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000000;
 spectre_v4_enable_task_mitigation(get_current());
 regs->sp = sp;
}


static inline void compat_start_thread(struct pt_regs *regs, unsigned long pc,
           unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000010;
 if (pc & 1)
  regs->pstate |= 0x00000020;





 spectre_v4_enable_task_mitigation(get_current());
 regs->regs[13] = sp;
}


static inline bool is_ttbr0_addr(unsigned long addr)
{

 return addr < (test_thread_flag(22) ? ((((0x100000000UL))) - ((1UL) << 12)) : ((((1UL))) << vabits_actual));
}

static inline bool is_ttbr1_addr(unsigned long addr)
{

 return (addr) >= ((-((((1UL))) << ((48)))));
}


struct task_struct;


extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);

void set_task_sctlr_el1(u64 sctlr);


extern struct task_struct *cpu_switch_to(struct task_struct *prev,
      struct task_struct *next);

 void arm64_preempt_schedule_irq(void);
# 272 "arch/arm64/include/asm/processor.h"
static inline void prefetch(const void *ptr)
{
 asm volatile("prfm pldl1keep, %a0\n" : : "p" (ptr));
}


static inline void prefetchw(const void *ptr)
{
 asm volatile("prfm pstl1keep, %a0\n" : : "p" (ptr));
}


static inline void spin_lock_prefetch(const void *ptr)
{
 asm volatile("prfm pstl1strm, %a0"

              : : "p" (ptr));
}

extern unsigned long __attribute__((__section__(".data..ro_after_init"))) signal_minsigstksz;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) minsigstksz_setup(void);
# 303 "arch/arm64/include/asm/processor.h"
# 1 "arch/arm64/include/asm/fpsimd.h" 1







# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 9 "arch/arm64/include/asm/fpsimd.h" 2

# 1 "arch/arm64/include/asm/processor.h" 1
# 11 "arch/arm64/include/asm/fpsimd.h" 2
# 1 "arch/arm64/include/uapi/asm/sigcontext.h" 1
# 28 "arch/arm64/include/uapi/asm/sigcontext.h"
struct sigcontext {
 __u64 fault_address;

 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;

 __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
# 66 "arch/arm64/include/uapi/asm/sigcontext.h"
struct _aarch64_ctx {
 __u32 magic;
 __u32 size;
};



struct fpsimd_context {
 struct _aarch64_ctx head;
 __u32 fpsr;
 __u32 fpcr;
 __uint128_t vregs[32];
};
# 92 "arch/arm64/include/uapi/asm/sigcontext.h"
struct esr_context {
 struct _aarch64_ctx head;
 __u64 esr;
};
# 125 "arch/arm64/include/uapi/asm/sigcontext.h"
struct extra_context {
 struct _aarch64_ctx head;
 __u64 datap;
 __u32 size;
 __u32 __reserved[3];
};



struct sve_context {
 struct _aarch64_ctx head;
 __u16 vl;
 __u16 __reserved[3];
};
# 12 "arch/arm64/include/asm/fpsimd.h" 2
# 35 "arch/arm64/include/asm/fpsimd.h"
struct task_struct;

extern void fpsimd_save_state(struct user_fpsimd_state *state);
extern void fpsimd_load_state(struct user_fpsimd_state *state);

extern void fpsimd_thread_switch(struct task_struct *next);
extern void fpsimd_flush_thread(void);

extern void fpsimd_signal_preserve_current_state(void);
extern void fpsimd_preserve_current_state(void);
extern void fpsimd_restore_current_state(void);
extern void fpsimd_restore_current_oob(void);
extern void fpsimd_update_current_state(struct user_fpsimd_state const *state);

extern void fpsimd_bind_task_to_cpu(void);
extern void fpsimd_bind_state_to_cpu(struct user_fpsimd_state *state,
         void *sve_state, unsigned int sve_vl);

extern void fpsimd_flush_task_state(struct task_struct *target);
extern void fpsimd_save_and_flush_cpu_state(void);





static inline size_t sve_ffr_offset(int vl)
{
 return (((sizeof(struct sve_context) + (16 - 1)) / 16 * 16) + ((0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0)) + (((0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0)) + ((__u32)(((vl) / 16)) * (16 / 8)) * (16)) - (0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0))))) - ((sizeof(struct sve_context) + (16 - 1)) / 16 * 16);
}

static inline void *sve_pffr(struct thread_struct *thread)
{
 return (char *)thread->sve_state + sve_ffr_offset(thread->sve_vl);
}

extern void sve_save_state(void *state, u32 *pfpsr);
extern void sve_load_state(void const *state, u32 const *pfpsr,
      unsigned long vq_minus_1);
extern void sve_flush_live(void);
extern void sve_load_from_fpsimd_state(struct user_fpsimd_state const *state,
           unsigned long vq_minus_1);
extern unsigned int sve_get_vl(void);
extern void sve_set_vq(unsigned long vq_minus_1);

struct arm64_cpu_capabilities;
extern void sve_kernel_enable(const struct arm64_cpu_capabilities *__unused);

extern u64 read_zcr_features(void);

extern int __attribute__((__section__(".data..ro_after_init"))) sve_max_vl;
extern int __attribute__((__section__(".data..ro_after_init"))) sve_max_virtualisable_vl;
extern __attribute__((__section__(".data..ro_after_init"))) unsigned long sve_vq_map[(((512) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];






static inline unsigned int __vq_to_bit(unsigned int vq)
{
 return 512 - vq;
}

static inline unsigned int __bit_to_vq(unsigned int bit)
{
 return 512 - bit;
}


static inline bool sve_vq_available(unsigned int vq)
{
 return test_bit(__vq_to_bit(vq), sve_vq_map);
}



extern size_t sve_state_size(struct task_struct const *task);

extern void sve_alloc(struct task_struct *task);
extern void fpsimd_release_task(struct task_struct *task);
extern void fpsimd_sync_to_sve(struct task_struct *task);
extern void sve_sync_to_fpsimd(struct task_struct *task);
extern void sve_sync_from_fpsimd_zeropad(struct task_struct *task);

extern int sve_set_vector_length(struct task_struct *task,
     unsigned long vl, unsigned long flags);

extern int sve_set_current_vl(unsigned long arg);
extern int sve_get_current_vl(void);

static inline void sve_user_disable(void)
{
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "cpacr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)((((((1UL))) << (17))))) | (0); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "cpacr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);
}

static inline void sve_user_enable(void)
{
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "cpacr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)(0)) | ((((((1UL))) << (17)))); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "cpacr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);
}
# 148 "arch/arm64/include/asm/fpsimd.h"
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sve_init_vq_map(void);
extern void sve_update_vq_map(void);
extern int sve_verify_vq_map(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sve_setup(void);
# 183 "arch/arm64/include/asm/fpsimd.h"
extern void __efi_fpsimd_begin(void);
extern void __efi_fpsimd_end(void);
# 304 "arch/arm64/include/asm/processor.h" 2
# 319 "arch/arm64/include/asm/processor.h"
long set_tagged_addr_ctrl(struct task_struct *task, unsigned long arg);
long get_tagged_addr_ctrl(struct task_struct *task);
# 15 "include/asm-generic/qrwlock.h" 2

# 1 "include/asm-generic/qrwlock_types.h" 1






# 1 "arch/arm64/include/asm/spinlock_types.h" 1
# 13 "arch/arm64/include/asm/spinlock_types.h"
# 1 "include/asm-generic/qrwlock_types.h" 1
# 14 "arch/arm64/include/asm/spinlock_types.h" 2
# 8 "include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 union {
  atomic_t cnts;
  struct {

   u8 wlocked;
   u8 __lstate[3];




  };
 };
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 17 "include/asm-generic/qrwlock.h" 2
# 32 "include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock);
extern void queued_write_lock_slowpath(struct qrwlock *lock);






static inline int queued_read_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (likely(!(cnts & 0x1ff))) {
  cnts = (u32)atomic_add_return_acquire((1U << 9), &lock->cnts);
  if (likely(!(cnts & 0x1ff)))
   return 1;
  atomic_sub((1U << 9), &lock->cnts);
 }
 return 0;
}






static inline int queued_write_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (unlikely(cnts))
  return 0;

 return likely(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts,
    0x0ff));
}




static inline void queued_read_lock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_add_return_acquire((1U << 9), &lock->cnts);
 if (likely(!(cnts & 0x1ff)))
  return;


 queued_read_lock_slowpath(lock);
}





static inline void queued_write_lock(struct qrwlock *lock)
{
 int cnts = 0;

 if (likely(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)))
  return;

 queued_write_lock_slowpath(lock);
}





static inline void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return_release((1U << 9), &lock->cnts);
}





static inline void queued_write_unlock(struct qrwlock *lock)
{
 do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&lock->wlocked) *)&(*&lock->wlocked) = (0); } while (0); } while (0); } while (0);
}






static inline int queued_rwlock_is_contended(struct qrwlock *lock)
{
 return queued_spin_is_locked(&lock->wait_lock);
}
# 1 "arch/arm64/include/generated/asm/qrwlock.h" 2
# 10 "arch/arm64/include/asm/spinlock.h" 2
# 22 "arch/arm64/include/asm/spinlock.h"
static inline bool vcpu_is_preempted(int cpu)
{
 return false;
}
# 91 "include/linux/spinlock.h" 2
# 186 "include/linux/spinlock.h"
static inline void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 do { } while (0);
}





static inline void
do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 do { } while (0);
}

static inline int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 int ret = queued_spin_trylock(&(lock)->raw_lock);

 if (ret)
  do { } while (0);

 return ret;
}

static inline void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 336 "include/linux/spinlock.h"
# 1 "include/linux/rwlock.h" 1
# 337 "include/linux/spinlock.h" 2





# 1 "include/linux/spinlock_api_smp.h" 1
# 18 "include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
        ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
        ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
        ;

unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
        ;
unsigned long __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
        ;
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
        ;
# 86 "include/linux/spinlock_api_smp.h"
static inline int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
 return 0;
}
# 104 "include/linux/spinlock_api_smp.h"
static inline unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); barrier(); } while (0);
 do { } while (0);
# 119 "include/linux/spinlock_api_smp.h"
 do_raw_spin_lock_flags(lock, &flags);

 return flags;
}

static inline void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); barrier(); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}

# 1 "include/linux/rwlock_api_smp.h" 1
# 18 "include/linux/rwlock_api_smp.h"
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
       ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
       ;
int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
       ;
void __attribute__((__section__(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
       ;
# 117 "include/linux/rwlock_api_smp.h"
static inline int __raw_read_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { if (0) do { } while (0); else do { } while (0); } while (0);
  return 1;
 }
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
 return 0;
}

static inline int __raw_write_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
 return 0;
}
# 146 "include/linux/rwlock_api_smp.h"
static inline void __raw_read_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); barrier(); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&((lock))->raw_lock); } while (0)
                                       ;
 return flags;
}

static inline void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); barrier(); } while (0);
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); barrier(); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&((lock))->raw_lock); } while (0)
                                        ;
 return flags;
}

static inline void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); barrier(); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline void __raw_write_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 191 "include/linux/spinlock_api_smp.h" 2
# 343 "include/linux/spinlock.h" 2






# 1 "include/linux/spinlock_pipeline.h" 1
# 13 "include/linux/spinlock_pipeline.h"
# 1 "include/dovetail/spinlock.h" 1






struct raw_spinlock;

static inline void hard_spin_lock_prepare(struct raw_spinlock *lock)
{ }

static inline void hard_spin_unlock_finish(struct raw_spinlock *lock)
{ }

static inline void hard_spin_trylock_prepare(struct raw_spinlock *lock)
{ }

static inline void hard_spin_trylock_fail(struct raw_spinlock *lock)
{ }
# 14 "include/linux/spinlock_pipeline.h" 2
# 87 "include/linux/spinlock_pipeline.h"
static inline
void hard_spin_lock(struct raw_spinlock *rlock)
{
 do { hard_spin_lock_prepare(rlock); if (irq_pipeline_debug_locking()) { do { } while (0); do_raw_spin_lock(rlock); } else { do_raw_spin_lock(rlock); } } while (0);
}
# 100 "include/linux/spinlock_pipeline.h"
static inline
void hard_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
{
 hard_spin_lock(rlock);
}


static inline
void hard_spin_unlock(struct raw_spinlock *rlock)
{
 do { if (irq_pipeline_debug_locking()) do { } while (0); do_raw_spin_unlock(rlock); hard_spin_unlock_finish(rlock); } while (0);
}

static inline
void hard_spin_lock_irq(struct raw_spinlock *rlock)
{
 native_irq_disable();
 do { hard_spin_lock_prepare(rlock); if (irq_pipeline_debug_locking()) { do { } while (0); do_raw_spin_lock(rlock); } else { do_raw_spin_lock(rlock); } } while (0);
}

static inline
void hard_spin_unlock_irq(struct raw_spinlock *rlock)
{
 do { if (irq_pipeline_debug_locking()) do { } while (0); do_raw_spin_unlock(rlock); hard_spin_unlock_finish(rlock); } while (0);
 native_irq_enable();
}

static inline
void hard_spin_unlock_irqrestore(struct raw_spinlock *rlock,
     unsigned long flags)
{
 do { if (irq_pipeline_debug_locking()) do { } while (0); do_raw_spin_unlock(rlock); hard_spin_unlock_finish(rlock); } while (0);
 native_irq_restore(flags);
}

static inline
unsigned long __hard_spin_lock_irqsave(struct raw_spinlock *rlock)
{
 unsigned long flags = native_irq_save();

 do { hard_spin_lock_prepare(rlock); if (irq_pipeline_debug_locking()) { do { } while (0); do_raw_spin_lock(rlock); } else { do_raw_spin_lock(rlock); } } while (0);

 return flags;
}

static inline
int hard_spin_trylock(struct raw_spinlock *rlock)
{
 hard_spin_trylock_prepare(rlock);

 if (do_raw_spin_trylock(rlock)) {
  do { if (irq_pipeline_debug_locking()) do { } while (0); } while (0);
  return 1;
 }

 hard_spin_trylock_fail(rlock);

 return 0;
}

static inline
unsigned long __hard_spin_trylock_irqsave(struct raw_spinlock *rlock,
       int *locked)
{
 unsigned long flags = native_irq_save();
 *locked = hard_spin_trylock(rlock);
 return *locked ? flags : ({ native_irq_restore(flags); flags; });
}

static inline
int hard_spin_trylock_irq(struct raw_spinlock *rlock)
{
 native_irq_disable();
 return hard_spin_trylock(rlock) ? : ({ native_irq_enable(); 0; });
}

static inline
int hard_spin_is_locked(struct raw_spinlock *rlock)
{
 return queued_spin_is_locked(&rlock->raw_lock);
}

static inline
int hard_spin_is_contended(struct raw_spinlock *rlock)
{



 return queued_spin_is_contended(&rlock->raw_lock);



}
# 235 "include/linux/spinlock_pipeline.h"
void __hybrid_spin_lock(struct raw_spinlock *rlock);
void __hybrid_spin_lock_nested(struct raw_spinlock *rlock, int subclass);

static inline void hybrid_spin_lock(struct raw_spinlock *rlock)
{
 if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4))))
  do { hard_spin_lock_prepare(rlock); if (irq_pipeline_debug_locking()) { do { } while (0); do_raw_spin_lock(rlock); } else { do_raw_spin_lock(rlock); } } while (0);
 else
  __hybrid_spin_lock(rlock);
}
# 256 "include/linux/spinlock_pipeline.h"
static inline
void hybrid_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
{
 hybrid_spin_lock(rlock);
}


void __hybrid_spin_unlock(struct raw_spinlock *rlock);

static inline void hybrid_spin_unlock(struct raw_spinlock *rlock)
{
 if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4))))
  do { if (irq_pipeline_debug_locking()) do { } while (0); do_raw_spin_unlock(rlock); hard_spin_unlock_finish(rlock); } while (0);
 else
  __hybrid_spin_unlock(rlock);
}

void __hybrid_spin_lock_irq(struct raw_spinlock *rlock);

static inline void hybrid_spin_lock_irq(struct raw_spinlock *rlock)
{
 if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4))))
  do { hard_spin_lock_prepare(rlock); if (irq_pipeline_debug_locking()) { do { } while (0); do_raw_spin_lock(rlock); } else { do_raw_spin_lock(rlock); } } while (0);
 else
  __hybrid_spin_lock_irq(rlock);
}

void __hybrid_spin_unlock_irq(struct raw_spinlock *rlock);

static inline void hybrid_spin_unlock_irq(struct raw_spinlock *rlock)
{
 if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4))))
  do { if (irq_pipeline_debug_locking()) do { } while (0); do_raw_spin_unlock(rlock); hard_spin_unlock_finish(rlock); } while (0);
 else
  __hybrid_spin_unlock_irq(rlock);
}

unsigned long __hybrid_spin_lock_irqsave(struct raw_spinlock *rlock);
# 304 "include/linux/spinlock_pipeline.h"
void __hybrid_spin_unlock_irqrestore(struct raw_spinlock *rlock,
          unsigned long flags);

static inline void hybrid_spin_unlock_irqrestore(struct raw_spinlock *rlock,
        unsigned long flags)
{

 if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4))))
  do { if (irq_pipeline_debug_locking()) do { } while (0); do_raw_spin_unlock(rlock); hard_spin_unlock_finish(rlock); } while (0);
 else
  __hybrid_spin_unlock_irqrestore(rlock, flags);
}

int __hybrid_spin_trylock(struct raw_spinlock *rlock);

static inline int hybrid_spin_trylock(struct raw_spinlock *rlock)
{
 if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4)))) {
  hard_spin_trylock_prepare(rlock);
  if (do_raw_spin_trylock(rlock)) {
   do { if (irq_pipeline_debug_locking()) do { } while (0); } while (0);
   return 1;
  }
  hard_spin_trylock_fail(rlock);
  return 0;
 }

 return __hybrid_spin_trylock(rlock);
}

int __hybrid_spin_trylock_irqsave(struct raw_spinlock *rlock,
       unsigned long *flags);
# 355 "include/linux/spinlock_pipeline.h"
static inline int hybrid_spin_trylock_irq(struct raw_spinlock *rlock)
{
 unsigned long flags;
 return ({ int __ret = 1; if ((preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4)))) { hard_spin_trylock_prepare(rlock); if (do_raw_spin_trylock(rlock)) { do { if (irq_pipeline_debug_locking()) do { } while (0); } while (0); (flags) = native_save_flags(); } else { hard_spin_trylock_fail(rlock); __ret = 0; } } else { __ret = __hybrid_spin_trylock_irqsave(rlock, &(flags)); } __ret; });
}

static inline
int hybrid_spin_is_locked(struct raw_spinlock *rlock)
{
 return hard_spin_is_locked(rlock);
}

static inline
int hybrid_spin_is_contended(struct raw_spinlock *rlock)
{
 return hard_spin_is_contended(rlock);
}




static inline void check_spinlock_context(void) { }
# 350 "include/linux/spinlock.h" 2
# 358 "include/linux/spinlock.h"
static 
# 358 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 358 "include/linux/spinlock.h"
                      raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 check_spinlock_context();
 return &lock->rlock;
}
# 384 "include/linux/spinlock.h"
static 
# 384 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 384 "include/linux/spinlock.h"
                      void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock((&lock->rlock));
}

static 
# 389 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 389 "include/linux/spinlock.h"
                      void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static 
# 394 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 394 "include/linux/spinlock.h"
                      int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock((&lock->rlock)));
}
# 409 "include/linux/spinlock.h"
static 
# 409 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 409 "include/linux/spinlock.h"
                      void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq((&lock->rlock));
}
# 424 "include/linux/spinlock.h"
static 
# 424 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 424 "include/linux/spinlock.h"
                      void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock((&lock->rlock));
}

static 
# 429 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 429 "include/linux/spinlock.h"
                      void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static 
# 434 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 434 "include/linux/spinlock.h"
                      void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq((&lock->rlock));
}

static 
# 439 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 439 "include/linux/spinlock.h"
                      void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore((&lock->rlock), flags); } while (0);
}

static 
# 444 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 444 "include/linux/spinlock.h"
                      int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static 
# 449 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 449 "include/linux/spinlock.h"
                      int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(((&lock->rlock)))) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 477 "include/linux/spinlock.h"
static 
# 477 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 477 "include/linux/spinlock.h"
                      int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&((&lock->rlock))->raw_lock);
}

static 
# 482 "include/linux/spinlock.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 482 "include/linux/spinlock.h"
                      int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&((&lock->rlock))->raw_lock);
}
# 502 "include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 526 "include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 10 "include/linux/wait.h" 2


# 1 "include/uapi/linux/wait.h" 1
# 13 "include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 30 "include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 64 "include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 82 "include/linux/wait.h"
static inline void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = 
# 93 "include/linux/wait.h" 3 4
                    ((void *)0)
# 93 "include/linux/wait.h"
                        ;
 wq_entry->func = func;
}
# 127 "include/linux/wait.h"
static inline int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 140 "include/linux/wait.h"
static inline bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
{
 return list_is_singular(&wq_head->head);
}
# 153 "include/linux/wait.h"
static inline bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 barrier();
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_priority(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 struct list_head *head = &wq_head->head;
 struct wait_queue_entry *wq;

 for (wq = ({ void *__mptr = (void *)((&wq_head->head)->next); do { } while (0); ((typeof(*wq) *)(__mptr - ((size_t)&((typeof(*wq) *)0)->entry))); }); !(&wq->entry == (&wq_head->head)); wq = ({ void *__mptr = (void *)((wq)->entry.next); do { } while (0); ((typeof(*(wq)) *)(__mptr - ((size_t)&((typeof(*(wq)) *)0)->entry))); })) {
  if (!(wq->flags & 0x20))
   break;
  head = &wq->entry;
 }
 list_add(&wq_entry->entry, head);
}




static inline void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode);
# 260 "include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 744 "include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1138 "include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 1163 "include/linux/wait.h"
bool try_invoke_on_locked_down_task(struct task_struct *p, bool (*func)(struct task_struct *t, void *arg), void *arg);
# 7 "include/linux/pid.h" 2
# 1 "include/linux/refcount.h" 1
# 101 "include/linux/refcount.h"
struct mutex;
# 111 "include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;





enum refcount_saturation_type {
 REFCOUNT_ADD_NOT_ZERO_OVF,
 REFCOUNT_ADD_OVF,
 REFCOUNT_ADD_UAF,
 REFCOUNT_SUB_UAF,
 REFCOUNT_DEC_LEAK,
};

void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);






static inline void refcount_set(refcount_t *r, int n)
{
 atomic_set(&r->refs, n);
}







static inline unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

static inline __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
{
 int old = refcount_read(r);

 do {
  if (!old)
   break;
 } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));

 if (oldp)
  *oldp = old;

 if (unlikely(old < 0 || old + i < 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);

 return old;
}
# 186 "include/linux/refcount.h"
static inline __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
{
 return __refcount_add_not_zero(i, r, 
# 188 "include/linux/refcount.h" 3 4
                                     ((void *)0)
# 188 "include/linux/refcount.h"
                                         );
}

static inline void __refcount_add(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_add_relaxed(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (unlikely(!old))
  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
 else if (unlikely(old < 0 || old + i < 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
}
# 220 "include/linux/refcount.h"
static inline void refcount_add(int i, refcount_t *r)
{
 __refcount_add(i, r, 
# 222 "include/linux/refcount.h" 3 4
                     ((void *)0)
# 222 "include/linux/refcount.h"
                         );
}

static inline __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
{
 return __refcount_add_not_zero(1, r, oldp);
}
# 243 "include/linux/refcount.h"
static inline __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
{
 return __refcount_inc_not_zero(r, 
# 245 "include/linux/refcount.h" 3 4
                                  ((void *)0)
# 245 "include/linux/refcount.h"
                                      );
}

static inline void __refcount_inc(refcount_t *r, int *oldp)
{
 __refcount_add(1, r, oldp);
}
# 265 "include/linux/refcount.h"
static inline void refcount_inc(refcount_t *r)
{
 __refcount_inc(r, 
# 267 "include/linux/refcount.h" 3 4
                  ((void *)0)
# 267 "include/linux/refcount.h"
                      );
}

static inline __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (old == i) {
  barrier();
  return true;
 }

 if (unlikely(old < 0 || old - i < 0))
  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);

 return false;
}
# 308 "include/linux/refcount.h"
static inline __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
{
 return __refcount_sub_and_test(i, r, 
# 310 "include/linux/refcount.h" 3 4
                                     ((void *)0)
# 310 "include/linux/refcount.h"
                                         );
}

static inline __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
{
 return __refcount_sub_and_test(1, r, oldp);
}
# 331 "include/linux/refcount.h"
static inline __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
{
 return __refcount_dec_and_test(r, 
# 333 "include/linux/refcount.h" 3 4
                                  ((void *)0)
# 333 "include/linux/refcount.h"
                                      );
}

static inline void __refcount_dec(refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(1, &r->refs);

 if (oldp)
  *oldp = old;

 if (unlikely(old <= 1))
  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
}
# 357 "include/linux/refcount.h"
static inline void refcount_dec(refcount_t *r)
{
 __refcount_dec(r, 
# 359 "include/linux/refcount.h" 3 4
                  ((void *)0)
# 359 "include/linux/refcount.h"
                      );
}

extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 8 "include/linux/pid.h" 2

enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;
 spinlock_t lock;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct hlist_head inodes;

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

struct file;

extern struct pid *pidfd_pid(const struct file *file);
struct pid *pidfd_get_pid(unsigned int fd, unsigned int *flags);

static inline struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
static inline bool pid_has_task(struct pid *pid, enum pid_type type)
{
 return !hlist_empty(&pid->tasks[type]);
}
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void exchange_tids(struct task_struct *task, struct task_struct *old);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;

extern int pid_max;
extern int pid_max_min, pid_max_max;
# 125 "include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
        size_t set_tid_size);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 149 "include/linux/pid.h"
static inline struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = 
# 151 "include/linux/pid.h" 3 4
                           ((void *)0)
# 151 "include/linux/pid.h"
                               ;
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 179 "include/linux/pid.h"
static inline pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "include/linux/sched.h" 2
# 1 "include/linux/sem.h" 1




# 1 "include/uapi/linux/sem.h" 1




# 1 "include/linux/ipc.h" 1





# 1 "include/linux/uidgid.h" 1
# 16 "include/linux/uidgid.h"
# 1 "include/linux/highuid.h" 1
# 35 "include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "include/linux/uidgid.h"
static inline bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 7 "include/linux/ipc.h" 2
# 1 "include/linux/rhashtable-types.h" 1
# 14 "include/linux/rhashtable-types.h"
# 1 "include/linux/mutex.h" 1
# 20 "include/linux/mutex.h"
# 1 "include/linux/osq_lock.h" 1
# 9 "include/linux/osq_lock.h"
struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 21 "include/linux/mutex.h" 2
# 1 "include/linux/debug_locks.h" 1
# 9 "include/linux/debug_locks.h"
struct task_struct;

extern int debug_locks __attribute__((__section__(".data..read_mostly")));
extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));


static 
# 15 "include/linux/debug_locks.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 15 "include/linux/debug_locks.h"
                      int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg_mb((unsigned long)(0), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); });
}




extern int debug_locks_off(void);
# 51 "include/linux/debug_locks.h"
struct task_struct;







static inline void debug_show_all_locks(void)
{
}

static inline void debug_show_held_locks(struct task_struct *task)
{
}

static inline void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline void
debug_check_no_locks_held(void)
{
}
# 22 "include/linux/mutex.h" 2

struct ww_class;
struct ww_acquire_ctx;
# 54 "include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;






};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;



};





struct mutex_waiter {
 struct list_head list;
 struct task_struct *task;
 struct ww_acquire_ctx *ww_ctx;



};
# 101 "include/linux/mutex.h"
static inline void mutex_destroy(struct mutex *lock) {}
# 140 "include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 177 "include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 195 "include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 15 "include/linux/rhashtable-types.h" 2
# 1 "include/linux/workqueue.h" 1
# 9 "include/linux/workqueue.h"
# 1 "include/linux/timer.h" 1





# 1 "include/linux/ktime.h" 1
# 25 "include/linux/ktime.h"
# 1 "include/linux/jiffies.h" 1
# 12 "include/linux/jiffies.h"
# 1 "include/vdso/jiffies.h" 1
# 13 "include/linux/jiffies.h" 2

# 1 "include/generated/timeconst.h" 1
# 15 "include/linux/jiffies.h" 2
# 62 "include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 79 "include/linux/jiffies.h"
extern u64 jiffies_64;
extern unsigned long volatile jiffies;


u64 get_jiffies_64(void);
# 189 "include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 290 "include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 250) - 1) / (1000L / 250);
}
# 363 "include/linux/jiffies.h"
static 
# 363 "include/linux/jiffies.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 363 "include/linux/jiffies.h"
                      unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 250) - 1) / (1000000L / 250);
}
# 410 "include/linux/jiffies.h"
static 
# 410 "include/linux/jiffies.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 410 "include/linux/jiffies.h"
                      unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
extern clock_t jiffies_to_clock_t(unsigned long x);
static inline clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID(__x) = (0L); typeof(delta) __UNIQUE_ID(__y) = (delta); ((__UNIQUE_ID(__x)) > (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); })));
}

static inline unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID(__x) = (0L); typeof(delta) __UNIQUE_ID(__y) = (delta); ((__UNIQUE_ID(__x)) > (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "include/linux/ktime.h" 2



typedef s64 ktime_t;
# 38 "include/linux/ktime.h"
static inline ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (unlikely(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 71 "include/linux/ktime.h"
static inline ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}





static inline s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 95 "include/linux/ktime.h"
static inline int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 111 "include/linux/ktime.h"
static inline bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 123 "include/linux/ktime.h"
static inline bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}


extern s64 __ktime_divns(const ktime_t kt, s64 div);
static inline s64 ktime_divns(const ktime_t kt, s64 div)
{




 do { if (unlikely(div < 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/ktime.h\"; .popsection; .long 14472b - 14470b; .short 136; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
 if (__builtin_constant_p(div) && !(div >> 32)) {
  s64 ns = kt;
  u64 tmp = ns < 0 ? -ns : ns;

  ({ uint32_t __base = (div); uint32_t __rem; (void)(((typeof((tmp)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (tmp) & (__base - 1); (tmp) >>= ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((7 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (tmp); (tmp) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (tmp); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (tmp); __rem = __n_lo - __res_lo * __base; } else if (likely(((tmp) >> 32) == 0)) { __rem = (uint32_t)(tmp) % __base; (tmp) = (uint32_t)(tmp) / __base; } else __rem = __div64_32(&(tmp), __base); __rem; });
  return ns < 0 ? -tmp : tmp;
 } else {
  return __ktime_divns(kt, div);
 }
}
# 159 "include/linux/ktime.h"
static inline s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 209 "include/linux/ktime.h"
static inline __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}

# 1 "include/vdso/ktime.h" 1
# 221 "include/linux/ktime.h" 2

static inline ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "include/linux/timekeeping.h" 1





# 1 "include/linux/clocksource_ids.h" 1





enum clocksource_ids {
 CSID_GENERIC = 0,
 CSID_ARM_ARCH_COUNTER,
 CSID_MAX,
};
# 7 "include/linux/timekeeping.h" 2



void timekeeping_init(void);
extern int timekeeping_suspended;


extern void legacy_timer_tick(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);







struct ktime_timestamps {
 u64 mono;
 u64 boot;
 u64 real;
};
# 246 "include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 enum clocksource_ids cs_id;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 262 "include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 275 "include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);


extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);
# 233 "include/linux/ktime.h" 2
# 7 "include/linux/timer.h" 2

# 1 "include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 const struct debug_obj_descr *descr;
};
# 55 "include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "include/linux/debugobjects.h"
static inline void
debug_object_init (void *addr, const struct debug_obj_descr *descr) { }
static inline void
debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr) { }
static inline int
debug_object_activate (void *addr, const struct debug_obj_descr *descr) { return 0; }
static inline void
debug_object_deactivate(void *addr, const struct debug_obj_descr *descr) { }
static inline void
debug_object_destroy (void *addr, const struct debug_obj_descr *descr) { }
static inline void
debug_object_free (void *addr, const struct debug_obj_descr *descr) { }
static inline void
debug_object_assert_init(void *addr, const struct debug_obj_descr *descr) { }

static inline void debug_objects_early_init(void) { }
static inline void debug_objects_mem_init(void) { }





static inline void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;




};
# 91 "include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags,
        const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, func, flags, name, key);
}
# 150 "include/linux/timer.h"
static inline void destroy_timer_on_stack(struct timer_list *timer) { }
# 166 "include/linux/timer.h"
static inline int timer_pending(const struct timer_list * timer)
{
 return !hlist_unhashed_lockless(&timer->entry);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern bool timer_curr_running(struct timer_list *timer);

extern void init_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp, loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "include/linux/workqueue.h" 2






# 1 "include/linux/rcupdate.h" 1
# 40 "include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void rcu_barrier_tasks_rude(void);
void synchronize_rcu(void);



void __rcu_read_lock(void);
void __rcu_read_unlock(void);
# 85 "include/linux/rcupdate.h"
void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_init_tasks_generic(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 109 "include/linux/rcupdate.h"
static inline void rcu_user_enter(void) { }
static inline void rcu_user_exit(void) { }
# 119 "include/linux/rcupdate.h"
static inline void rcu_init_nohz(void) { }
static inline int rcu_nocb_cpu_offload(int cpu) { return -
# 120 "include/linux/rcupdate.h" 3 4
                                                         22
# 120 "include/linux/rcupdate.h"
                                                               ; }
static inline int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
static inline void rcu_nocb_flush_deferred_wakeup(void) { }
# 162 "include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
# 195 "include/linux/rcupdate.h"
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 225 "include/linux/rcupdate.h"
# 1 "include/linux/rcutree.h" 1
# 20 "include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
void rcu_momentary_dyntick_idle(void);
void kfree_rcu_scheduler_running(void);
bool rcu_gp_might_be_stalled(void);
unsigned long get_state_synchronize_rcu(void);
unsigned long start_poll_synchronize_rcu(void);
bool poll_state_synchronize_rcu(unsigned long oldstate);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_exit_preempt(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_is_idle_cpu(int cpu);




static inline void rcu_irq_exit_check_preempt(void) { }


void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_inkernel_boot_has_ended(void);
bool rcu_is_watching(void);





int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 226 "include/linux/rcupdate.h" 2
# 246 "include/linux/rcupdate.h"
static inline void init_rcu_head(struct callback_head *head) { }
static inline void destroy_rcu_head(struct callback_head *head) { }
static inline void init_rcu_head_on_stack(struct callback_head *head) { }
static inline void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline bool rcu_lockdep_current_cpu_online(void) { return true; }


extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;
# 286 "include/linux/rcupdate.h"
static inline int rcu_read_lock_held(void)
{
 return 1;
}

static inline int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline int rcu_read_lock_sched_held(void)
{
 return !running_inband() || !(preempt_count() == 0 && !native_irqs_disabled() && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}

static inline int rcu_read_lock_any_held(void)
{
 return !(preempt_count() == 0 && !native_irqs_disabled() && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}
# 653 "include/linux/rcupdate.h"
static 
# 653 "include/linux/rcupdate.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 653 "include/linux/rcupdate.h"
                      void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()))
                                                ;
}
# 705 "include/linux/rcupdate.h"
static inline void rcu_read_unlock(void)
{
 do { } while (0 && (!rcu_is_watching()))
                                                  ;
 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 726 "include/linux/rcupdate.h"
static inline void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()))
                                                   ;
}






static inline void rcu_read_unlock_bh(void)
{
 do { } while (0 && (!rcu_is_watching()))
                                                     ;
 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 761 "include/linux/rcupdate.h"
static inline void rcu_read_lock_sched(void)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()))
                                                      ;
}


static inline notrace void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 (void)0;
}






static inline void rcu_read_unlock_sched(void)
{
 do { } while (0 && (!rcu_is_watching()))
                                                        ;
 do { } while (0);
 (void)0;
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}


static inline notrace void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0);
}
# 961 "include/linux/rcupdate.h"
static inline void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 979 "include/linux/rcupdate.h"
static inline bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ do { } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });

 if (func == f)
  return true;
 ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/rcupdate.h\"; .popsection; .long 14472b - 14470b; .short 986; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return false;
}


extern int rcu_expedited;
extern int rcu_normal;
# 17 "include/linux/workqueue.h" 2

struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,






 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 256,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 
# 85 "include/linux/workqueue.h" 3 4
                  32 
# 85 "include/linux/workqueue.h"
                                - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 155 "include/linux/workqueue.h"
 bool no_numa;
};

static inline struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { } while (0); ((struct delayed_work *)(__mptr - ((size_t)&((struct delayed_work *)0)->work))); });
}

static inline struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { } while (0); ((struct rcu_work *)(__mptr - ((size_t)&((struct rcu_work *)0)->work))); });
}

struct execute_work {
 struct work_struct work;
};
# 215 "include/linux/workqueue.h"
static inline void __init_work(struct work_struct *work, int onstack) { }
static inline void destroy_work_on_stack(struct work_struct *work) { }
static inline void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline unsigned int work_static(struct work_struct *work) { return 0; }
# 308 "include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 341 "include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 385 "include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 407 "include/linux/workqueue.h"
struct workqueue_struct *alloc_workqueue(const char *fmt,
      unsigned int flags,
      int max_active, ...);
# 436 "include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 504 "include/linux/workqueue.h"
static inline bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 518 "include/linux/workqueue.h"
static inline bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 533 "include/linux/workqueue.h"
static inline bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 547 "include/linux/workqueue.h"
static inline bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 566 "include/linux/workqueue.h"
static inline bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 595 "include/linux/workqueue.h"
static inline void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 609 "include/linux/workqueue.h"
static inline bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 623 "include/linux/workqueue.h"
static inline bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 639 "include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 659 "include/linux/workqueue.h"
static inline void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init_early(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init(void);
# 16 "include/linux/rhashtable-types.h" 2

struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "include/linux/ipc.h" 2
# 1 "include/uapi/linux/ipc.h" 1
# 10 "include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "/usr/include/x86_64-linux-gnu/asm/ipcbuf.h" 1 3 4
# 1 "include/uapi/asm-generic/ipcbuf.h" 1 3 4
# 22 "include/uapi/asm-generic/ipcbuf.h" 3 4

# 22 "include/uapi/asm-generic/ipcbuf.h" 3 4
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 1 "/usr/include/x86_64-linux-gnu/asm/ipcbuf.h" 2 3 4
# 23 "include/uapi/linux/ipc.h" 2
# 58 "include/uapi/linux/ipc.h"

# 58 "include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__designated_init__));
# 6 "include/uapi/linux/sem.h" 2
# 25 "include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_old_time_t sem_otime;
 __kernel_old_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "/usr/include/x86_64-linux-gnu/asm/sembuf.h" 1 3 4
# 14 "/usr/include/x86_64-linux-gnu/asm/sembuf.h" 3 4

# 14 "/usr/include/x86_64-linux-gnu/asm/sembuf.h" 3 4
struct semid64_ds {
 struct ipc64_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_ulong_t __unused1;
 __kernel_time_t sem_ctime;
 __kernel_ulong_t __unused2;
 __kernel_ulong_t sem_nsems;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 38 "include/uapi/linux/sem.h" 2



# 40 "include/uapi/linux/sem.h"
struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 16 "include/linux/sched.h" 2
# 1 "include/linux/shm.h" 1





# 1 "arch/arm64/include/asm/page.h" 1
# 15 "arch/arm64/include/asm/page.h"
# 1 "include/linux/personality.h" 1




# 1 "include/uapi/linux/personality.h" 1
# 11 "include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "include/linux/personality.h" 2
# 16 "arch/arm64/include/asm/page.h" 2


struct page;
struct vm_area_struct;

extern void copy_page(void *to, const void *from);
extern void clear_page(void *to);

void copy_user_highpage(struct page *to, struct page *from,
   unsigned long vaddr, struct vm_area_struct *vma);


void copy_highpage(struct page *to, struct page *from);
# 38 "arch/arm64/include/asm/page.h"
typedef struct page *pgtable_t;

extern int pfn_valid(unsigned long);







# 1 "include/asm-generic/getorder.h" 1
# 29 "include/asm-generic/getorder.h"
static 
# 29 "include/asm-generic/getorder.h" 3 4
      __inline __attribute__ ((__always_inline__)) __attribute__ ((__const__)) 
# 29 "include/asm-generic/getorder.h"
                                          int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 
# 33 "include/asm-generic/getorder.h" 3 4
         32 
# 33 "include/asm-generic/getorder.h"
                       - 12;

  if (size < (1UL << 12))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1;
 }

 size--;
 size >>= 12;

 return fls(size);



}
# 49 "arch/arm64/include/asm/page.h" 2
# 7 "include/linux/shm.h" 2
# 1 "include/uapi/linux/shm.h" 1






# 1 "include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "include/uapi/linux/shm.h" 2

# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 220 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4



# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 221 "/usr/include/unistd.h" 2 3 4


typedef __ssize_t ssize_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;




typedef __pid_t pid_t;






typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 970 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1118 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;








# 10 "include/uapi/linux/shm.h" 2
# 28 "include/uapi/linux/shm.h"

# 28 "include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_old_time_t shm_atime;
 __kernel_old_time_t shm_dtime;
 __kernel_old_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "/usr/include/x86_64-linux-gnu/asm/shmbuf.h" 1 3 4





# 1 "include/uapi/asm-generic/shmbuf.h" 1 3 4
# 25 "include/uapi/asm-generic/shmbuf.h" 3 4

# 25 "include/uapi/asm-generic/shmbuf.h" 3 4
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;

 long shm_atime;
 long shm_dtime;
 long shm_ctime;
# 40 "include/uapi/asm-generic/shmbuf.h" 3 4
 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused4;
 unsigned long __unused5;
};

struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 7 "/usr/include/x86_64-linux-gnu/asm/shmbuf.h" 2 3 4
# 44 "include/uapi/linux/shm.h" 2
# 93 "include/uapi/linux/shm.h"

# 93 "include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "include/linux/shm.h" 2
# 1 "arch/arm64/include/asm/shmparam.h" 1
# 15 "arch/arm64/include/asm/shmparam.h"
# 1 "include/asm-generic/shmparam.h" 1
# 16 "arch/arm64/include/asm/shmparam.h" 2
# 9 "include/linux/shm.h" 2

struct file;


struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 17 "include/linux/sched.h" 2

# 1 "include/linux/plist.h" 1
# 79 "include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 121 "include/linux/plist.h"
static inline void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 210 "include/linux/plist.h"
static inline int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 280 "include/linux/plist.h"
static inline struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { } while (0); ((struct plist_node *)(__mptr - ((size_t)&((struct plist_node *)0)->node_list))); })
                                  ;
}







static inline struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { } while (0); ((struct plist_node *)(__mptr - ((size_t)&((struct plist_node *)0)->node_list))); })
                                  ;
}
# 19 "include/linux/sched.h" 2
# 1 "include/linux/hrtimer.h" 1
# 15 "include/linux/hrtimer.h"
# 1 "include/linux/hrtimer_defs.h" 1
# 16 "include/linux/hrtimer.h" 2
# 1 "include/linux/rbtree.h" 1
# 24 "include/linux/rbtree.h"
struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 49 "include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = 
# 73 "include/linux/rbtree.h" 3 4
                                 ((void *)0)
# 73 "include/linux/rbtree.h"
                                     ;

 *rb_link = node;
}

static inline void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = 
# 82 "include/linux/rbtree.h" 3 4
                                 ((void *)0)
# 82 "include/linux/rbtree.h"
                                     ;

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)
# 84 "include/linux/rbtree.h" 3 4
((void *)0)
# 84 "include/linux/rbtree.h"
) do { do { } while (0); do { *(volatile typeof((*rb_link)) *)&((*rb_link)) = ((typeof(*rb_link))(_r_a_p__v)); } while (0); } while (0); else do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&*rb_link) *)&(*&*rb_link) = ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}
# 125 "include/linux/rbtree.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};






static inline void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}


static inline struct rb_node *
rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
{
 struct rb_node *leftmost = 
# 148 "include/linux/rbtree.h" 3 4
                           ((void *)0)
# 148 "include/linux/rbtree.h"
                               ;

 if (root->rb_leftmost == node)
  leftmost = root->rb_leftmost = rb_next(node);

 rb_erase(node, &root->rb_root);

 return leftmost;
}

static inline void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 191 "include/linux/rbtree.h"
static 
# 191 "include/linux/rbtree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 191 "include/linux/rbtree.h"
                      struct rb_node *
rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_root.rb_node;
 struct rb_node *parent = 
# 196 "include/linux/rbtree.h" 3 4
                         ((void *)0)
# 196 "include/linux/rbtree.h"
                             ;
 bool leftmost = true;

 while (*link) {
  parent = *link;
  if (less(node, parent)) {
   link = &parent->rb_left;
  } else {
   link = &parent->rb_right;
   leftmost = false;
  }
 }

 rb_link_node(node, parent, link);
 rb_insert_color_cached(node, tree, leftmost);

 return leftmost ? node : 
# 212 "include/linux/rbtree.h" 3 4
                         ((void *)0)
# 212 "include/linux/rbtree.h"
                             ;
}







static 
# 221 "include/linux/rbtree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 221 "include/linux/rbtree.h"
                      void
rb_add(struct rb_node *node, struct rb_root *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = 
# 226 "include/linux/rbtree.h" 3 4
                         ((void *)0)
# 226 "include/linux/rbtree.h"
                             ;

 while (*link) {
  parent = *link;
  if (less(node, parent))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
}
# 249 "include/linux/rbtree.h"
static 
# 249 "include/linux/rbtree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 249 "include/linux/rbtree.h"
                      struct rb_node *
rb_find_add(struct rb_node *node, struct rb_root *tree,
     int (*cmp)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = 
# 254 "include/linux/rbtree.h" 3 4
                         ((void *)0)
# 254 "include/linux/rbtree.h"
                             ;
 int c;

 while (*link) {
  parent = *link;
  c = cmp(node, parent);

  if (c < 0)
   link = &parent->rb_left;
  else if (c > 0)
   link = &parent->rb_right;
  else
   return parent;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
 return 
# 271 "include/linux/rbtree.h" 3 4
       ((void *)0)
# 271 "include/linux/rbtree.h"
           ;
}
# 282 "include/linux/rbtree.h"
static 
# 282 "include/linux/rbtree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 282 "include/linux/rbtree.h"
                      struct rb_node *
rb_find(const void *key, const struct rb_root *tree,
 int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;

 while (node) {
  int c = cmp(key, node);

  if (c < 0)
   node = node->rb_left;
  else if (c > 0)
   node = node->rb_right;
  else
   return node;
 }

 return 
# 299 "include/linux/rbtree.h" 3 4
       ((void *)0)
# 299 "include/linux/rbtree.h"
           ;
}
# 310 "include/linux/rbtree.h"
static 
# 310 "include/linux/rbtree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 310 "include/linux/rbtree.h"
                      struct rb_node *
rb_find_first(const void *key, const struct rb_root *tree,
       int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;
 struct rb_node *match = 
# 315 "include/linux/rbtree.h" 3 4
                        ((void *)0)
# 315 "include/linux/rbtree.h"
                            ;

 while (node) {
  int c = cmp(key, node);

  if (c <= 0) {
   if (!c)
    match = node;
   node = node->rb_left;
  } else if (c > 0) {
   node = node->rb_right;
  }
 }

 return match;
}
# 340 "include/linux/rbtree.h"
static 
# 340 "include/linux/rbtree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 340 "include/linux/rbtree.h"
                      struct rb_node *
rb_next_match(const void *key, struct rb_node *node,
       int (*cmp)(const void *key, const struct rb_node *))
{
 node = rb_next(node);
 if (node && cmp(key, node))
  node = 
# 346 "include/linux/rbtree.h" 3 4
        ((void *)0)
# 346 "include/linux/rbtree.h"
            ;
 return node;
}
# 17 "include/linux/hrtimer.h" 2



# 1 "include/linux/seqlock.h" 1
# 20 "include/linux/seqlock.h"
# 1 "include/linux/ww_mutex.h" 1
# 22 "include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;
# 49 "include/linux/ww_mutex.h"
};
# 74 "include/linux/ww_mutex.h"
static inline void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base, ww_class->mutex_name, &ww_class->mutex_key);
 lock->ctx = 
# 78 "include/linux/ww_mutex.h" 3 4
            ((void *)0)
# 78 "include/linux/ww_mutex.h"
                ;



}
# 108 "include/linux/ww_mutex.h"
static inline void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = get_current();
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;
# 131 "include/linux/ww_mutex.h"
}
# 144 "include/linux/ww_mutex.h"
static inline void ww_acquire_done(struct ww_acquire_ctx *ctx)
{






}
# 161 "include/linux/ww_mutex.h"
static inline void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{
# 179 "include/linux/ww_mutex.h"
}
# 210 "include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 242 "include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 268 "include/linux/ww_mutex.h"
static inline void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;



 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 304 "include/linux/ww_mutex.h"
static inline int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{



 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);
# 323 "include/linux/ww_mutex.h"
static inline int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock)
{
 return mutex_trylock(&lock->base);
}
# 336 "include/linux/ww_mutex.h"
static inline void ww_mutex_destroy(struct ww_mutex *lock)
{
 mutex_destroy(&lock->base);
}







static inline bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked(&lock->base);
}
# 21 "include/linux/seqlock.h" 2
# 65 "include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 254 "include/linux/seqlock.h"
static inline seqcount_t *__seqprop_ptr(seqcount_t *s)
{
 return s;
}

static inline unsigned __seqprop_sequence(const seqcount_t *s)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
}

static inline bool __seqprop_preemptible(const seqcount_t *s)
{
 return false;
}

static inline void __seqprop_assert(const seqcount_t *s)
{
 do { } while (0);
}



typedef struct seqcount_raw_spinlock { seqcount_t seqcount; ; } seqcount_raw_spinlock_t; static 
# 276 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 276 "include/linux/seqlock.h"
seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static 
# 276 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 276 "include/linux/seqlock.h"
unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && unlikely(seq & 1)) { ; ; seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static 
# 276 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 276 "include/linux/seqlock.h"
bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static 
# 276 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 276 "include/linux/seqlock.h"
void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { ; }
typedef struct seqcount_spinlock { seqcount_t seqcount; ; } seqcount_spinlock_t; static 
# 277 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 277 "include/linux/seqlock.h"
seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static 
# 277 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 277 "include/linux/seqlock.h"
unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && unlikely(seq & 1)) { ; ; seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static 
# 277 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 277 "include/linux/seqlock.h"
bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static 
# 277 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 277 "include/linux/seqlock.h"
void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { ; }
typedef struct seqcount_rwlock { seqcount_t seqcount; ; } seqcount_rwlock_t; static 
# 278 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 278 "include/linux/seqlock.h"
seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static 
# 278 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 278 "include/linux/seqlock.h"
unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && unlikely(seq & 1)) { ; ; seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static 
# 278 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 278 "include/linux/seqlock.h"
bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static 
# 278 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 278 "include/linux/seqlock.h"
void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { ; }
typedef struct seqcount_mutex { seqcount_t seqcount; ; } seqcount_mutex_t; static 
# 279 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 279 "include/linux/seqlock.h"
seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static 
# 279 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 279 "include/linux/seqlock.h"
unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && unlikely(seq & 1)) { ; ; seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static 
# 279 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 279 "include/linux/seqlock.h"
bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static 
# 279 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 279 "include/linux/seqlock.h"
void __seqprop_mutex_assert(const seqcount_mutex_t *s) { ; }
typedef struct seqcount_ww_mutex { seqcount_t seqcount; ; } seqcount_ww_mutex_t; static 
# 280 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 280 "include/linux/seqlock.h"
seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static 
# 280 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 280 "include/linux/seqlock.h"
unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && unlikely(seq & 1)) { ; ; seq = ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static 
# 280 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 280 "include/linux/seqlock.h"
bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static 
# 280 "include/linux/seqlock.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 280 "include/linux/seqlock.h"
void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { ; }
# 430 "include/linux/seqlock.h"
static inline int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 kcsan_atomic_next(0);
 return unlikely(({ do { } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start);
}
# 450 "include/linux/seqlock.h"
static inline int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 barrier();
 return do___read_seqcount_retry(s, start);
}
# 470 "include/linux/seqlock.h"
static inline void do_raw_write_seqcount_begin(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 barrier();
}
# 491 "include/linux/seqlock.h"
static inline void do_raw_write_seqcount_end(seqcount_t *s)
{
 barrier();
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 517 "include/linux/seqlock.h"
static inline void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 do_raw_write_seqcount_begin(s);
 do { } while (0);
}
# 543 "include/linux/seqlock.h"
static inline void do_write_seqcount_begin(seqcount_t *s)
{
 do_write_seqcount_begin_nested(s, 0);
}
# 563 "include/linux/seqlock.h"
static inline void do_write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 do_raw_write_seqcount_end(s);
}
# 613 "include/linux/seqlock.h"
static inline void do_raw_write_seqcount_barrier(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 barrier();
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 633 "include/linux/seqlock.h"
static inline void do_write_seqcount_invalidate(seqcount_t *s)
{
 barrier();
 kcsan_nestable_atomic_begin();
 s->sequence+=2;
 kcsan_nestable_atomic_end();
}
# 651 "include/linux/seqlock.h"
typedef struct {
 seqcount_t seqcount;
} seqcount_latch_t;
# 680 "include/linux/seqlock.h"
static inline unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
{




 return ({ do { } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
}
# 696 "include/linux/seqlock.h"
static inline int
read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
{
 return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
}
# 783 "include/linux/seqlock.h"
static inline void raw_write_seqcount_latch(seqcount_latch_t *s)
{
 barrier();
 s->seqcount.sequence++;
 barrier();
}
# 800 "include/linux/seqlock.h"
typedef struct {




 seqcount_spinlock_t seqcount;
 spinlock_t lock;
} seqlock_t;
# 838 "include/linux/seqlock.h"
static inline unsigned read_seqbegin(const seqlock_t *sl)
{
 unsigned ret = ({ ; ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) cpu_relax(); kcsan_atomic_next(1000); __seq; }); barrier(); _seq; }); });

 kcsan_atomic_next(0);
 kcsan_flat_atomic_begin();
 return ret;
}
# 858 "include/linux/seqlock.h"
static inline unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{




 kcsan_flat_atomic_end();

 return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
}
# 888 "include/linux/seqlock.h"
static inline void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 901 "include/linux/seqlock.h"
static inline void write_sequnlock(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock(&sl->lock);
}
# 914 "include/linux/seqlock.h"
static inline void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 928 "include/linux/seqlock.h"
static inline void write_sequnlock_bh(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_bh(&sl->lock);
}
# 941 "include/linux/seqlock.h"
static inline void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 954 "include/linux/seqlock.h"
static inline void write_sequnlock_irq(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave((spinlock_check(&sl->lock))); } while (0); } while (0);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
 return flags;
}
# 991 "include/linux/seqlock.h"
static inline void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1014 "include/linux/seqlock.h"
static inline void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}





static inline void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 1037 "include/linux/seqlock.h"
static inline void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}






static inline void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}
# 1061 "include/linux/seqlock.h"
static inline void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}






static inline void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave((spinlock_check(&sl->lock))); } while (0); } while (0);
 return flags;
}
# 1104 "include/linux/seqlock.h"
static inline void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1141 "include/linux/seqlock.h"
static inline void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}
# 1156 "include/linux/seqlock.h"
static inline int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}
# 1169 "include/linux/seqlock.h"
static inline void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}
# 1195 "include/linux/seqlock.h"
static inline unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}
# 1220 "include/linux/seqlock.h"
static inline void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 21 "include/linux/hrtimer.h" 2

# 1 "include/linux/timerqueue.h" 1
# 9 "include/linux/timerqueue.h"
struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 33 "include/linux/timerqueue.h"
static inline
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;

 return ({ void *__mptr = (void *)(leftmost); do { } while (0); ((struct timerqueue_node *)(__mptr - ((size_t)&((struct timerqueue_node *)0)->node))); });
}

static inline void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline bool timerqueue_node_queued(struct timerqueue_node *node)
{
 return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
}

static inline bool timerqueue_node_expires(struct timerqueue_node *node)
{
 return node->expires;
}

static inline void timerqueue_init_head(struct timerqueue_head *head)
{
 head->rb_root = (struct rb_root_cached) { {
# 58 "include/linux/timerqueue.h" 3 4
                ((void *)0)
# 58 "include/linux/timerqueue.h"
                , }, 
# 58 "include/linux/timerqueue.h" 3 4
                ((void *)0) 
# 58 "include/linux/timerqueue.h"
                };
}
# 23 "include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 39 "include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 118 "include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 136 "include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 159 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_raw_spinlock_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__((1 << (6)))));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 214 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;





 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << (6)))));

static inline void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern void clock_was_set_delayed(void);

extern unsigned int hrtimer_resolution;
# 333 "include/linux/hrtimer.h"
static inline ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}

extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;




static inline void hrtimer_cancel_wait_running(struct hrtimer *timer)
{
 cpu_relax();
}





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);
extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
     enum hrtimer_mode mode);
# 390 "include/linux/hrtimer.h"
static inline void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}

static inline void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
       clockid_t clock_id,
       enum hrtimer_mode mode)
{
 hrtimer_init_sleeper(sl, clock_id, mode);
}

static inline void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 419 "include/linux/hrtimer.h"
static inline void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
       enum hrtimer_mode mode);

static inline void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);





static inline ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 472 "include/linux/hrtimer.h"
static inline bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ do { } while (0); (*(const volatile typeof( _Generic((timer->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (timer->state))) *)&(timer->state)); }) & 0x01);
}





static inline int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 507 "include/linux/hrtimer.h"
static inline u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
         const clockid_t clockid);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
        const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 20 "include/linux/sched.h" 2

# 1 "include/linux/seccomp.h" 1




# 1 "include/uapi/linux/seccomp.h" 1
# 60 "include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};
# 109 "include/uapi/linux/seccomp.h"
struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 127 "include/uapi/linux/seccomp.h"
struct seccomp_notif_addfd {
 __u64 id;
 __u32 flags;
 __u32 srcfd;
 __u32 newfd;
 __u32 newfd_flags;
};
# 6 "include/linux/seccomp.h" 2
# 21 "include/linux/seccomp.h"
# 1 "arch/arm64/include/asm/seccomp.h" 1
# 11 "arch/arm64/include/asm/seccomp.h"
# 1 "arch/arm64/include/asm/unistd.h" 1
# 47 "arch/arm64/include/asm/unistd.h"
# 1 "arch/arm64/include/uapi/asm/unistd.h" 1
# 24 "arch/arm64/include/uapi/asm/unistd.h"
# 1 "include/uapi/asm-generic/unistd.h" 1
# 34 "include/uapi/asm-generic/unistd.h"























































































































































































































































































































































































































































































































































































































































































# 707 "include/uapi/asm-generic/unistd.h"










































































# 826 "include/uapi/asm-generic/unistd.h"
















































# 24 "arch/arm64/include/uapi/asm/unistd.h" 2
# 48 "arch/arm64/include/asm/unistd.h" 2
# 12 "arch/arm64/include/asm/seccomp.h" 2
# 20 "arch/arm64/include/asm/seccomp.h"
# 1 "include/asm-generic/seccomp.h" 1
# 11 "include/asm-generic/seccomp.h"
# 1 "include/uapi/linux/unistd.h" 1







# 1 "arch/arm64/include/asm/unistd.h" 1
# 47 "arch/arm64/include/asm/unistd.h"
# 1 "arch/arm64/include/uapi/asm/unistd.h" 1
# 24 "arch/arm64/include/uapi/asm/unistd.h"
# 1 "include/uapi/asm-generic/unistd.h" 1
# 34 "include/uapi/asm-generic/unistd.h"























































































































































































































































































































































































































































































































































































































































































# 707 "include/uapi/asm-generic/unistd.h"










































































# 826 "include/uapi/asm-generic/unistd.h"
















































# 24 "arch/arm64/include/uapi/asm/unistd.h" 2
# 48 "arch/arm64/include/asm/unistd.h" 2
# 9 "include/uapi/linux/unistd.h" 2
# 12 "include/asm-generic/seccomp.h" 2
# 31 "include/asm-generic/seccomp.h"
static inline const int *get_compat_mode1_syscalls(void)
{
 static const int mode1_syscalls_32[] = {
  3, 4,
  1, 173,
  -1,
 };
 return mode1_syscalls_32;
}
# 21 "arch/arm64/include/asm/seccomp.h" 2
# 22 "include/linux/seccomp.h" 2

struct seccomp_filter;
# 35 "include/linux/seccomp.h"
struct seccomp {
 int mode;
 atomic_t filter_count;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline int secure_computing(void)
{
 if (unlikely(test_syscall_work(SECCOMP)))
  return __secure_computing(
# 46 "include/linux/seccomp.h" 3 4
                            ((void *)0)
# 46 "include/linux/seccomp.h"
                                );
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 93 "include/linux/seccomp.h"
extern void seccomp_filter_release(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 112 "include/linux/seccomp.h"
static inline long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -
# 115 "include/linux/seccomp.h" 3 4
        22
# 115 "include/linux/seccomp.h"
              ;
}
static inline long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off,
     void *data)
{
 return -
# 121 "include/linux/seccomp.h" 3 4
        22
# 121 "include/linux/seccomp.h"
              ;
}
# 22 "include/linux/sched.h" 2
# 1 "include/linux/nodemask.h" 1
# 96 "include/linux/nodemask.h"
# 1 "include/linux/numa.h" 1
# 25 "include/linux/numa.h"
# 1 "arch/arm64/include/asm/sparsemem.h" 1
# 26 "include/linux/numa.h" 2


int numa_map_to_online_node(int node);


static inline int memory_add_physaddr_to_nid(u64 start)
{
 ({ if (0) printk("\001" "6" "Unknown online node for memory at 0x%llx, assuming node 0\n", start); 0; })
         ;
 return 0;
}


static inline int phys_to_target_node(u64 start)
{
 ({ if (0) printk("\001" "6" "Unknown target node for memory at 0x%llx, assuming node 0\n", start); 0; })
         ;
 return 0;
}
# 97 "include/linux/nodemask.h" 2

typedef struct { unsigned long bits[((((1 << 4)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "include/linux/nodemask.h"
static inline unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 4) : 0;
}
static inline const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : 
# 115 "include/linux/nodemask.h" 3 4
                     ((void *)0)
# 115 "include/linux/nodemask.h"
                         ;
}
# 128 "include/linux/nodemask.h"
static 
# 128 "include/linux/nodemask.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 128 "include/linux/nodemask.h"
                      void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 4))) *)1 == (typeof((int)(find_next_bit((srcp->bits), ((1 << 4)), 0))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 4))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit((srcp->bits), ((1 << 4)), 0))) * 0l)) : (int *)8))))), (((int)((1 << 4))) < ((int)(find_next_bit((srcp->bits), ((1 << 4)), 0))) ? ((int)((1 << 4))) : ((int)(find_next_bit((srcp->bits), ((1 << 4)), 0)))), ({ typeof((int)((1 << 4))) __UNIQUE_ID(__x) = ((int)((1 << 4))); typeof((int)(find_next_bit((srcp->bits), ((1 << 4)), 0))) __UNIQUE_ID(__y) = ((int)(find_next_bit((srcp->bits), ((1 << 4)), 0))); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
}


static inline int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 4))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 4))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 4))) < ((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) ? ((int)((1 << 4))) : ((int)(find_next_bit(srcp->bits, (1 << 4), n+1)))), ({ typeof((int)((1 << 4))) __UNIQUE_ID(__x) = ((int)((1 << 4))); typeof((int)(find_next_bit(srcp->bits, (1 << 4), n+1))) __UNIQUE_ID(__y) = ((int)(find_next_bit(srcp->bits, (1 << 4), n+1))); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 4));
 __node_set((node), &(*mask));
}
# 299 "include/linux/nodemask.h"
static inline int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 4))) *)1 == (typeof((int)(find_next_zero_bit((maskp->bits), ((1 << 4)), 0))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 4))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_zero_bit((maskp->bits), ((1 << 4)), 0))) * 0l)) : (int *)8))))), (((int)((1 << 4))) < ((int)(find_next_zero_bit((maskp->bits), ((1 << 4)), 0))) ? ((int)((1 << 4))) : ((int)(find_next_zero_bit((maskp->bits), ((1 << 4)), 0)))), ({ typeof((int)((1 << 4))) __UNIQUE_ID(__x) = ((int)((1 << 4))); typeof((int)(find_next_zero_bit((maskp->bits), ((1 << 4)), 0))) __UNIQUE_ID(__y) = ((int)(find_next_zero_bit((maskp->bits), ((1 << 4)), 0))); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }))
                                                  ;
}
# 333 "include/linux/nodemask.h"
static inline int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 N_GENERIC_INITIATOR,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline int node_state(int node, enum node_states state)
{
 return test_bit((node), (node_states[state]).bits);
}

static inline void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 4));
}






static inline int next_online_node(int nid)
{
 return __next_node((nid), &(node_states[N_ONLINE]));
}
static inline int next_memory_node(int nid)
{
 return __next_node((nid), &(node_states[N_MEMORY]));
}

extern unsigned int nr_node_ids;
extern unsigned int nr_online_nodes;

static inline void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
# 498 "include/linux/nodemask.h"
extern int node_random(const nodemask_t *maskp);
# 532 "include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 23 "include/linux/sched.h" 2


# 1 "include/linux/resource.h" 1




# 1 "include/uapi/linux/resource.h" 1
# 24 "include/uapi/linux/resource.h"
struct rusage {
 struct __kernel_old_timeval ru_utime;
 struct __kernel_old_timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "include/uapi/linux/resource.h"
# 1 "/usr/include/x86_64-linux-gnu/asm/resource.h" 1 3 4
# 1 "include/asm-generic/resource.h" 1 3 4




# 1 "include/uapi/asm-generic/resource.h" 1 3 4
# 6 "include/asm-generic/resource.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/resource.h" 2 3 4
# 79 "include/uapi/linux/resource.h" 2
# 6 "include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "include/linux/sched.h" 2
# 1 "include/linux/latencytop.h" 1
# 14 "include/linux/latencytop.h"
struct task_struct;
# 46 "include/linux/latencytop.h"
static inline void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 27 "include/linux/sched.h" 2
# 1 "include/linux/sched/prio.h" 1
# 32 "include/linux/sched/prio.h"
static inline long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "include/linux/sched.h" 2
# 1 "include/linux/sched/types.h" 1
# 17 "include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 29 "include/linux/sched.h" 2
# 1 "include/linux/signal_types.h" 1
# 10 "include/linux/signal_types.h"
# 1 "include/uapi/linux/signal.h" 1




# 1 "arch/arm64/include/asm/signal.h" 1





# 1 "arch/arm64/include/uapi/asm/signal.h" 1
# 26 "arch/arm64/include/uapi/asm/signal.h"
# 1 "include/asm-generic/signal.h" 1




# 1 "include/uapi/asm-generic/signal.h" 1
# 61 "include/uapi/asm-generic/signal.h"
typedef struct {
 unsigned long sig[(64 / 
# 62 "include/uapi/asm-generic/signal.h" 3 4
                  64
# 62 "include/uapi/asm-generic/signal.h"
                  )];
} sigset_t;


typedef unsigned long old_sigset_t;

# 1 "include/uapi/asm-generic/signal-defs.h" 1
# 81 "include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 69 "include/uapi/asm-generic/signal.h" 2






struct sigaction {
 __sighandler_t sa_handler;
 unsigned long sa_flags;

 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};


typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 6 "include/asm-generic/signal.h" 2
# 27 "arch/arm64/include/uapi/asm/signal.h" 2
# 7 "arch/arm64/include/asm/signal.h" 2
# 1 "arch/arm64/include/generated/uapi/asm/siginfo.h" 1
# 1 "include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 32 "include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 74 "include/uapi/asm-generic/siginfo.h"
  union {

   int _trapno;




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;

   struct {
    unsigned long _data;
    __u32 _type;
   } _perf;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 133 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 328 "include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 1 "arch/arm64/include/generated/uapi/asm/siginfo.h" 2
# 8 "arch/arm64/include/asm/signal.h" 2

static inline void *arch_untagged_si_addr(void *addr,
       unsigned long sig,
       unsigned long si_code)
{





 if (sig == 5 && si_code == 1)
  return addr;

 return ({ u64 __addr = ( u64)(addr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(addr))__addr; });
}
# 6 "include/uapi/linux/signal.h" 2
# 1 "/usr/include/x86_64-linux-gnu/asm/siginfo.h" 1 3 4
# 7 "include/uapi/linux/signal.h" 2
# 11 "include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
} kernel_siginfo_t;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct user_struct *user;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 65 "include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 30 "include/linux/sched.h" 2
# 1 "include/linux/syscall_user_dispatch.h" 1
# 26 "include/linux/syscall_user_dispatch.h"
struct syscall_user_dispatch {};

static inline int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
         unsigned long len, char *selector)
{
 return -
# 31 "include/linux/syscall_user_dispatch.h" 3 4
        22
# 31 "include/linux/syscall_user_dispatch.h"
              ;
}

static inline void clear_syscall_work_syscall_user_dispatch(struct task_struct *tsk)
{
}
# 31 "include/linux/sched.h" 2
# 1 "include/linux/mm_types_task.h" 1
# 34 "include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};





enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;




 __u16 offset;
 __u16 size;

};


struct tlbflush_unmap_batch {
# 97 "include/linux/mm_types_task.h"
};
# 32 "include/linux/sched.h" 2
# 1 "include/linux/task_io_accounting.h" 1
# 12 "include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
# 44 "include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 33 "include/linux/sched.h" 2
# 1 "include/linux/posix-timers.h" 1






# 1 "include/linux/alarmtimer.h" 1
# 9 "include/linux/alarmtimer.h"
struct rtc_device;

enum alarmtimer_type {
 ALARM_REALTIME,
 ALARM_BOOTTIME,


 ALARM_NUMTYPE,


 ALARM_REALTIME_FREEZER,
 ALARM_BOOTTIME_FREEZER,
};

enum alarmtimer_restart {
 ALARMTIMER_NORESTART,
 ALARMTIMER_RESTART,
};
# 42 "include/linux/alarmtimer.h"
struct alarm {
 struct timerqueue_node node;
 struct hrtimer timer;
 enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
 enum alarmtimer_type type;
 int state;
 void *data;
};

void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
void alarm_start(struct alarm *alarm, ktime_t start);
void alarm_start_relative(struct alarm *alarm, ktime_t start);
void alarm_restart(struct alarm *alarm);
int alarm_try_to_cancel(struct alarm *alarm);
int alarm_cancel(struct alarm *alarm);

u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
ktime_t alarm_expires_remaining(const struct alarm *alarm);



struct rtc_device *alarmtimer_get_rtcdev(void);
# 8 "include/linux/posix-timers.h" 2

# 1 "include/linux/task_work.h" 1





# 1 "include/linux/sched.h" 1
# 7 "include/linux/task_work.h" 2

typedef void (*task_work_func_t)(struct callback_head *);

static inline void
init_task_work(struct callback_head *twork, task_work_func_t func)
{
 twork->func = func;
}

enum task_work_notify_mode {
 TWA_NONE,
 TWA_RESUME,
 TWA_SIGNAL,
};

int task_work_add(struct task_struct *task, struct callback_head *twork,
   enum task_work_notify_mode mode);

struct callback_head *task_work_cancel_match(struct task_struct *task,
 bool (*match)(struct callback_head *, void *data), void *data);
struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
void task_work_run(void);

static inline void exit_task_work(struct task_struct *task)
{
 task_work_run();
}
# 10 "include/linux/posix-timers.h" 2

struct kernel_siginfo;
struct task_struct;
# 39 "include/linux/posix-timers.h"
static inline clockid_t make_process_cpuclock(const unsigned int pid,
  const clockid_t clock)
{
 return ((~pid) << 3) | clock;
}
static inline clockid_t make_thread_cpuclock(const unsigned int tid,
  const clockid_t clock)
{
 return make_process_cpuclock(tid, clock | 4);
}

static inline clockid_t fd_to_clockid(const int fd)
{
 return make_process_cpuclock((unsigned int) fd, 3);
}

static inline int clockid_to_fd(const clockid_t clk)
{
 return ~(clk >> 3);
}
# 70 "include/linux/posix-timers.h"
struct cpu_timer {
 struct timerqueue_node node;
 struct timerqueue_head *head;
 struct pid *pid;
 struct list_head elist;
 int firing;
};

static inline bool cpu_timer_enqueue(struct timerqueue_head *head,
         struct cpu_timer *ctmr)
{
 ctmr->head = head;
 return timerqueue_add(head, &ctmr->node);
}

static inline void cpu_timer_dequeue(struct cpu_timer *ctmr)
{
 if (ctmr->head) {
  timerqueue_del(ctmr->head, &ctmr->node);
  ctmr->head = 
# 89 "include/linux/posix-timers.h" 3 4
              ((void *)0)
# 89 "include/linux/posix-timers.h"
                  ;
 }
}

static inline u64 cpu_timer_getexpires(struct cpu_timer *ctmr)
{
 return ctmr->node.expires;
}

static inline void cpu_timer_setexpires(struct cpu_timer *ctmr, u64 exp)
{
 ctmr->node.expires = exp;
}






struct posix_cputimer_base {
 u64 nextevt;
 struct timerqueue_head tqhead;
};
# 123 "include/linux/posix-timers.h"
struct posix_cputimers {
 struct posix_cputimer_base bases[3];
 unsigned int timers_active;
 unsigned int expiry_active;
};






struct posix_cputimers_work {
 struct callback_head work;
 unsigned int scheduled;
};

static inline void posix_cputimers_init(struct posix_cputimers *pct)
{
 memset(pct, 0, sizeof(*pct));
 pct->bases[0].nextevt = ((u64)~0ULL);
 pct->bases[1].nextevt = ((u64)~0ULL);
 pct->bases[2].nextevt = ((u64)~0ULL);
}

void posix_cputimers_group_init(struct posix_cputimers *pct, u64 cpu_limit);

static inline void posix_cputimers_rt_watchdog(struct posix_cputimers *pct,
            u64 runtime)
{
 pct->bases[2].nextevt = runtime;
}
# 182 "include/linux/posix-timers.h"
static inline void posix_cputimers_init_work(void) { }
# 210 "include/linux/posix-timers.h"
struct k_itimer {
 struct list_head list;
 struct hlist_node t_hash;
 spinlock_t it_lock;
 const struct k_clock *kclock;
 clockid_t it_clock;
 timer_t it_id;
 int it_active;
 s64 it_overrun;
 s64 it_overrun_last;
 int it_requeue_pending;
 int it_sigev_notify;
 ktime_t it_interval;
 struct signal_struct *it_signal;
 union {
  struct pid *it_pid;
  struct task_struct *it_process;
 };
 struct sigqueue *sigq;
 union {
  struct {
   struct hrtimer timer;
  } real;
  struct cpu_timer cpu;
  struct {
   struct alarm alarmtimer;
  } alarm;
 } it;
 struct callback_head rcu;
};

void run_posix_cpu_timers(void);
void posix_cpu_timers_exit(struct task_struct *task);
void posix_cpu_timers_exit_group(struct task_struct *task);
void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
      u64 *newval, u64 *oldval);

void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);

void posixtimer_rearm(struct kernel_siginfo *info);
# 34 "include/linux/sched.h" 2
# 1 "include/uapi/linux/rseq.h" 1
# 16 "include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;

  __u64 ptr;
# 124 "include/uapi/linux/rseq.h"
 } rseq_cs;
# 144 "include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 35 "include/linux/sched.h" 2

# 1 "include/linux/kcsan.h" 1
# 62 "include/linux/kcsan.h"
static inline void kcsan_init(void) { }
# 37 "include/linux/sched.h" 2
# 1 "arch/arm64/include/generated/asm/kmap_size.h" 1
# 1 "include/asm-generic/kmap_size.h" 1
# 1 "arch/arm64/include/generated/asm/kmap_size.h" 2
# 38 "include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct bpf_local_storage;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct io_uring_task;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 223 "include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
 void schedule(void);
extern void schedule_preempt_disabled(void);
 void preempt_schedule_irq(void);

extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 250 "include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};

enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_IDLE,

 VTIME_SYS,

 VTIME_USER,

 VTIME_GUEST,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 unsigned int cpu;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};


extern struct root_domain def_root_domain;
extern struct mutex sched_domains_mutex;


struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 333 "include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 367 "include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;


} __attribute__((__aligned__(sizeof(u64))));
# 419 "include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << (6)))));

struct sched_statistics {
# 465 "include/linux/sched.h"
};

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;

 unsigned long runnable_weight;
# 501 "include/linux/sched.h"
 struct sched_avg avg;

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} __attribute__((__designated_init__));

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 570 "include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 588 "include/linux/sched.h"
 struct hrtimer inactive_timer;







 struct sched_dl_entity *pi_se;

};
# 635 "include/linux/sched.h"
union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 need_mb;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct kmap_ctrl {




};

struct task_struct {





 struct thread_info thread_info;


 volatile long state;







 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;


 int on_cpu;
 struct __call_single_node wake_entry;


 unsigned int cpu;

 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;
# 704 "include/linux/sched.h"
 int recent_used_cpu;
 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;

 struct task_group *sched_task_group;

 struct sched_dl_entity dl;
# 737 "include/linux/sched.h"
 struct hlist_head preempt_notifiers;






 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t cpus_mask;
 void *migration_pending;

 unsigned short migration_disabled;

 unsigned short migration_flags;


 int rcu_read_lock_nesting;
 union rcu_special rcu_read_unlock_special;
 struct list_head rcu_node_entry;
 struct rcu_node *rcu_blocked_node;



 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;
# 777 "include/linux/sched.h"
 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;





 unsigned :0;
# 831 "include/linux/sched.h"
 unsigned sched_remote_wakeup:1;


 unsigned in_execve:1;
 unsigned in_iowait:1;




 unsigned in_user_fault:1;






 unsigned no_cgroup_migration:1;

 unsigned frozen:1;


 unsigned use_memdelay:1;
# 863 "include/linux/sched.h"
 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 881 "include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;


 void *pf_io_worker;

 u64 utime;
 u64 stime;




 u64 gtime;
 struct prev_cputime prev_cputime;
# 935 "include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 start_boottime;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct posix_cputimers posix_cputimers;
# 958 "include/linux/sched.h"
 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 978 "include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;






 struct fs_struct *fs;


 struct files_struct *files;


 struct io_uring_task *io_uring;



 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;



 struct audit_context *audit_context;

 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;
 struct syscall_user_dispatch syscall_dispatch;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 1070 "include/linux/sched.h"
 unsigned long stall_bits;
# 1086 "include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;






 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_spinlock_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 struct mutex futex_exit_mutex;
 unsigned int futex_state;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;






 struct mempolicy *mempolicy;
 short il_prev;
 short pref_node_fork;


 int numa_scan_seq;
 unsigned int numa_scan_period;
 unsigned int numa_scan_period_max;
 int numa_preferred_nid;
 unsigned long numa_migrate_retry;

 u64 node_stamp;
 u64 last_task_numa_placement;
 u64 last_sum_exec_runtime;
 struct callback_head numa_work;
# 1185 "include/linux/sched.h"
 struct numa_group *numa_group;
# 1201 "include/linux/sched.h"
 unsigned long *numa_faults;
 unsigned long total_numa_faults;







 unsigned long numa_faults_locality[3];

 unsigned long numa_pages_migrated;



 struct rseq *rseq;
 u32 rseq_sig;




 unsigned long rseq_event_mask;


 struct tlbflush_unmap_batch tlb_ubc;

 union {
  refcount_t rcu_users;
  struct callback_head rcu;
 };


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
# 1249 "include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1262 "include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1335 "include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;



 struct request_queue *throttle_queue;
# 1357 "include/linux/sched.h"
 struct kmap_ctrl kmap_ctrl;



 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct vm_struct *stack_vm_area;



 refcount_t stack_refcount;






 void *security;
# 1407 "include/linux/sched.h"



 struct thread_struct thread;







};

static inline struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1436 "include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, 
# 1450 "include/linux/sched.h" 3 4
                                          ((void *)0)
# 1450 "include/linux/sched.h"
                                              );
}


static inline pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1469 "include/linux/sched.h"
static inline int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != 
# 1471 "include/linux/sched.h" 3 4
                        ((void *)0)
# 1471 "include/linux/sched.h"
                            ;
}

static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, 
# 1481 "include/linux/sched.h" 3 4
                                           ((void *)0)
# 1481 "include/linux/sched.h"
                                               );
}


static inline pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, 
# 1492 "include/linux/sched.h" 3 4
                                          ((void *)0)
# 1492 "include/linux/sched.h"
                                              );
}

static inline pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, 
# 1502 "include/linux/sched.h" 3 4
                                           ((void *)0)
# 1502 "include/linux/sched.h"
                                               );
}

static inline pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ do { } while (0); (*(const volatile typeof( _Generic((tsk->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tsk->state))) *)&(tsk->state)); });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { } while (0);

 return state_char[state];
}

static inline char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1567 "include/linux/sched.h"
static inline int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1635 "include/linux/sched.h"
static inline bool is_percpu_thread(void)
{

 return (get_current()->flags & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 1667 "include/linux/sched.h"
static inline bool task_no_new_privs(struct task_struct *p) { return test_bit(0, &p->atomic_flags); }
static inline void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline bool task_spread_page(struct task_struct *p) { return test_bit(1, &p->atomic_flags); }
static inline void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline bool task_spread_slab(struct task_struct *p) { return test_bit(2, &p->atomic_flags); }
static inline void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline bool task_spec_ssb_disable(struct task_struct *p) { return test_bit(3, &p->atomic_flags); }
static inline void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline bool task_spec_ssb_noexec(struct task_struct *p) { return test_bit(7, &p->atomic_flags); }
static inline void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline bool task_spec_ssb_force_disable(struct task_struct *p) { return test_bit(4, &p->atomic_flags); }
static inline void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline bool task_spec_ib_disable(struct task_struct *p) { return test_bit(5, &p->atomic_flags); }
static inline void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline bool task_spec_ib_force_disable(struct task_struct *p) { return test_bit(6, &p->atomic_flags); }
static inline void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
# 1720 "include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern void sched_set_fifo(struct task_struct *p);
extern void sched_set_fifo_low(struct task_struct *p);
extern void sched_set_normal(struct task_struct *p, int nice);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static 
# 1754 "include/linux/sched.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 1754 "include/linux/sched.h"
                      bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;




 unsigned long stack[((((1UL))) << (14 + 0))/sizeof(long)];
};





extern unsigned long init_stack[((((1UL))) << (14 + 0)) / sizeof(unsigned long)];


static inline struct thread_info *task_thread_info(struct task_struct *task)
{
 return &task->thread_info;
}
# 1800 "include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






static 
# 1832 "include/linux/sched.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 1832 "include/linux/sched.h"
                      void scheduler_ipi(void)
{





 do { if (tif_need_resched()) set_preempt_need_resched(); } while (0);
}
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
# 1854 "include/linux/sched.h"
static inline void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(task_thread_info(tsk), flag, value);
}

static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,1);
}

static inline void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,1);
}

static inline int test_tsk_need_resched(struct task_struct *tsk)
{
 return unlikely(test_tsk_thread_flag(tsk,1));
}
# 1929 "include/linux/sched.h"
static inline int _cond_resched(void) { return 0; }
# 1938 "include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_rwlock_read(rwlock_t *lock);
extern int __cond_resched_rwlock_write(rwlock_t *lock);
# 1957 "include/linux/sched.h"
static inline void cond_resched_rcu(void)
{





}






static inline int spin_needbreak(spinlock_t *lock)
{

 return spin_is_contended(lock);



}
# 1988 "include/linux/sched.h"
static inline int rwlock_needbreak(rwlock_t *lock)
{

 return queued_rwlock_is_contended(&(lock)->raw_lock);



}

static 
# 1997 "include/linux/sched.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 1997 "include/linux/sched.h"
                      bool need_resched(void)
{
 return unlikely(tif_need_resched());
}






static inline unsigned int task_cpu(const struct task_struct *p)
{

 return ({ do { } while (0); (*(const volatile typeof( _Generic((p->cpu), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->cpu))) *)&(p->cpu)); });



}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 2046 "include/linux/sched.h"
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);







unsigned long sched_cpu_util(int cpu, unsigned long max);
# 2064 "include/linux/sched.h"
enum rseq_event_mask_bits {
 RSEQ_EVENT_PREEMPT_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT,
 RSEQ_EVENT_SIGNAL_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT,
 RSEQ_EVENT_MIGRATE_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT,
};

enum rseq_event_mask {
 RSEQ_EVENT_PREEMPT = (1U << RSEQ_EVENT_PREEMPT_BIT),
 RSEQ_EVENT_SIGNAL = (1U << RSEQ_EVENT_SIGNAL_BIT),
 RSEQ_EVENT_MIGRATE = (1U << RSEQ_EVENT_MIGRATE_BIT),
};

static inline void rseq_set_notify_resume(struct task_struct *t)
{
 if (t->rseq)
  set_tsk_thread_flag(t, 2);
}

void __rseq_handle_notify_resume(struct ksignal *sig, struct pt_regs *regs);

static inline void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
 if (get_current()->rseq)
  __rseq_handle_notify_resume(ksig, regs);
}

static inline void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
 do { __preempt_count_add(1); barrier(); } while (0);
 __set_bit(RSEQ_EVENT_SIGNAL_BIT, &get_current()->rseq_event_mask);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
 rseq_handle_notify_resume(ksig, regs);
}


static inline void rseq_preempt(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_PREEMPT_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}


static inline void rseq_migrate(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_MIGRATE_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}





static inline void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
 if (clone_flags & 0x00000100) {
  t->rseq = 
# 2121 "include/linux/sched.h" 3 4
           ((void *)0)
# 2121 "include/linux/sched.h"
               ;
  t->rseq_sig = 0;
  t->rseq_event_mask = 0;
 } else {
  t->rseq = get_current()->rseq;
  t->rseq_sig = get_current()->rseq_sig;
  t->rseq_event_mask = get_current()->rseq_event_mask;
 }
}

static inline void rseq_execve(struct task_struct *t)
{
 t->rseq = 
# 2133 "include/linux/sched.h" 3 4
          ((void *)0)
# 2133 "include/linux/sched.h"
              ;
 t->rseq_sig = 0;
 t->rseq_event_mask = 0;
}
# 2172 "include/linux/sched.h"
static inline void rseq_syscall(struct pt_regs *regs)
{
}



const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);
int sched_trace_rq_cpu_capacity(struct rq *rq);
int sched_trace_rq_nr_running(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);
# 17 "arch/arm64/include/asm/compat.h" 2
# 1 "include/linux/sched/task_stack.h" 1
# 10 "include/linux/sched/task_stack.h"
# 1 "include/uapi/linux/magic.h" 1
# 11 "include/linux/sched/task_stack.h" 2
# 19 "include/linux/sched/task_stack.h"
static inline void *task_stack_page(const struct task_struct *task)
{
 return task->stack;
}



static inline unsigned long *end_of_stack(const struct task_struct *task)
{
 return task->stack;
}
# 62 "include/linux/sched/task_stack.h"
static inline void *try_get_task_stack(struct task_struct *tsk)
{
 return refcount_inc_not_zero(&tsk->stack_refcount) ?
  task_stack_page(tsk) : 
# 65 "include/linux/sched/task_stack.h" 3 4
                        ((void *)0)
# 65 "include/linux/sched/task_stack.h"
                            ;
}

extern void put_task_stack(struct task_struct *tsk);
# 81 "include/linux/sched/task_stack.h"
static inline int object_is_on_stack(const void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + ((((1UL))) << (14 + 0))));
}

extern void thread_stack_cache_init(void);
# 110 "include/linux/sched/task_stack.h"
extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & (((((1UL))) << (14 + 0))-sizeof(void*)));
}
# 18 "arch/arm64/include/asm/compat.h" 2
# 26 "arch/arm64/include/asm/compat.h"
typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u16 __compat_uid16_t;
typedef u16 __compat_gid16_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_dev_t;
typedef s32 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;

struct compat_stat {




 compat_dev_t st_dev;

 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_ushort_t st_nlink;
 __compat_uid16_t st_uid;
 __compat_gid16_t st_gid;




 compat_dev_t st_rdev;

 compat_off_t st_size;
 compat_off_t st_blksize;
 compat_off_t st_blocks;
 old_time32_t st_atime;
 compat_ulong_t st_atime_nsec;
 old_time32_t st_mtime;
 compat_ulong_t st_mtime_nsec;
 old_time32_t st_ctime;
 compat_ulong_t st_ctime_nsec;
 compat_ulong_t __unused4[2];
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};





struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
};

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};



typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;






static inline void *arch_compat_alloc_user_space(long len)
{
 return (void *)(user_stack_pointer(((struct pt_regs *)(((((1UL))) << (14 + 0)) + task_stack_page(get_current())) - 1))) - len;
}

struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 compat_ulong_t sem_otime;
 compat_ulong_t sem_otime_high;
 compat_ulong_t sem_ctime;
 compat_ulong_t sem_ctime_high;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 compat_ulong_t msg_stime;
 compat_ulong_t msg_stime_high;
 compat_ulong_t msg_rtime;
 compat_ulong_t msg_rtime_high;
 compat_ulong_t msg_ctime;
 compat_ulong_t msg_ctime_high;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_ulong_t shm_atime;
 compat_ulong_t shm_atime_high;
 compat_ulong_t shm_dtime;
 compat_ulong_t shm_dtime_high;
 compat_ulong_t shm_ctime;
 compat_ulong_t shm_ctime_high;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

static inline int is_compat_task(void)
{
 return test_thread_flag(22);
}

static inline int is_compat_thread(struct thread_info *thread)
{
 return test_ti_thread_flag(thread, 22);
}
# 14 "arch/arm64/include/asm/stat.h" 2





struct stat64 {
 compat_u64 st_dev;
 unsigned char __pad0[4];


 compat_ulong_t __st_ino;
 compat_uint_t st_mode;
 compat_uint_t st_nlink;

 compat_ulong_t st_uid;
 compat_ulong_t st_gid;

 compat_u64 st_rdev;
 unsigned char __pad3[4];

 compat_s64 st_size;
 compat_ulong_t st_blksize;
 compat_u64 st_blocks;

 compat_ulong_t st_atime;
 compat_ulong_t st_atime_nsec;

 compat_ulong_t st_mtime;
 compat_ulong_t st_mtime_nsec;

 compat_ulong_t st_ctime;
 compat_ulong_t st_ctime_nsec;

 compat_u64 st_ino;
};
# 7 "include/linux/stat.h" 2
# 1 "include/uapi/linux/stat.h" 1
# 56 "include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 8 "include/linux/stat.h" 2
# 22 "include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 37 "include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
 u64 mnt_id;
};
# 14 "include/linux/module.h" 2


# 1 "include/linux/kmod.h" 1
# 9 "include/linux/kmod.h"
# 1 "include/linux/umh.h" 1



# 1 "include/linux/gfp.h" 1





# 1 "include/linux/mmzone.h" 1
# 18 "include/linux/mmzone.h"
# 1 "include/linux/pageblock-flags.h" 1
# 18 "include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 55 "include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(struct page *page,
    unsigned long pfn,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long mask);
# 19 "include/linux/mmzone.h" 2
# 1 "include/linux/page-flags-layout.h" 1





# 1 "include/generated/bounds.h" 1
# 7 "include/linux/page-flags-layout.h" 2
# 20 "include/linux/mmzone.h" 2

# 1 "include/linux/mm_types.h" 1






# 1 "include/linux/auxvec.h" 1




# 1 "include/uapi/linux/auxvec.h" 1




# 1 "arch/arm64/include/uapi/asm/auxvec.h" 1
# 6 "include/uapi/linux/auxvec.h" 2
# 6 "include/linux/auxvec.h" 2
# 8 "include/linux/mm_types.h" 2



# 1 "include/linux/rwsem.h" 1
# 18 "include/linux/rwsem.h"
# 1 "include/linux/err.h" 1







# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 9 "include/linux/err.h" 2
# 24 "include/linux/err.h"
static inline void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return unlikely((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095);
}

static inline bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return unlikely(!ptr) || unlikely((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095);
}
# 51 "include/linux/err.h"
static inline void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 19 "include/linux/rwsem.h" 2
# 35 "include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;

 struct optimistic_spin_queue osq;

 raw_spinlock_t wait_lock;
 struct list_head wait_list;






};


static inline int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 101 "include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 117 "include/linux/rwsem.h"
static inline int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}




extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 12 "include/linux/mm_types.h" 2
# 1 "include/linux/completion.h" 1
# 12 "include/linux/completion.h"
# 1 "include/linux/swait.h" 1
# 41 "include/linux/swait.h"
struct task_struct;

struct swait_queue_head {
 raw_spinlock_t lock;
 struct list_head task_list;
};

struct swait_queue {
 struct task_struct *task;
 struct list_head task_list;
};
# 69 "include/linux/swait.h"
extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
        struct lock_class_key *key);
# 121 "include/linux/swait.h"
static inline int swait_active(struct swait_queue_head *wq)
{
 return !list_empty(&wq->task_list);
}
# 134 "include/linux/swait.h"
static inline bool swq_has_sleeper(struct swait_queue_head *wq)
{







 barrier();
 return swait_active(wq);
}

extern void swake_up_one(struct swait_queue_head *q);
extern void swake_up_all(struct swait_queue_head *q);
extern void swake_up_locked(struct swait_queue_head *q);

extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);

extern void __finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
extern void finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
# 13 "include/linux/completion.h" 2
# 26 "include/linux/completion.h"
struct completion {
 unsigned int done;
 struct swait_queue_head wait;
};


static inline void complete_acquire(struct completion *x) {}
static inline void complete_release(struct completion *x) {}
# 84 "include/linux/completion.h"
static inline void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 97 "include/linux/completion.h"
static inline void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "include/linux/mm_types.h" 2

# 1 "include/linux/uprobes.h" 1
# 19 "include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};
# 142 "include/linux/uprobes.h"
struct uprobes_state {
};

static inline void uprobes_init(void)
{
}



static inline int
uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
 return -
# 154 "include/linux/uprobes.h" 3 4
        38
# 154 "include/linux/uprobes.h"
              ;
}
static inline int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc)
{
 return -
# 158 "include/linux/uprobes.h" 3 4
        38
# 158 "include/linux/uprobes.h"
              ;
}
static inline int
uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool add)
{
 return -
# 163 "include/linux/uprobes.h" 3 4
        38
# 163 "include/linux/uprobes.h"
              ;
}
static inline void
uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
}
static inline int uprobe_mmap(struct vm_area_struct *vma)
{
 return 0;
}
static inline void
uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end)
{
}
static inline void uprobe_start_dup_mmap(void)
{
}
static inline void uprobe_end_dup_mmap(void)
{
}
static inline void
uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm)
{
}
static inline void uprobe_notify_resume(struct pt_regs *regs)
{
}
static inline bool uprobe_deny_signal(void)
{
 return false;
}
static inline void uprobe_free_utask(struct task_struct *t)
{
}
static inline void uprobe_copy_process(struct task_struct *t, unsigned long flags)
{
}
static inline void uprobe_clear_state(struct mm_struct *mm)
{
}
# 15 "include/linux/mm_types.h" 2




# 1 "arch/arm64/include/asm/mmu.h" 1
# 19 "arch/arm64/include/asm/mmu.h"
typedef struct {
 atomic64_t id;

 void *sigpage;

 refcount_t pinned;
 void *vdso;
 unsigned long flags;
} mm_context_t;
# 36 "arch/arm64/include/asm/mmu.h"
static inline bool arm64_kernel_unmapped_at_el0(void)
{
 return cpus_have_const_cap(41);
}

extern void arm64_memblock_init(void);
extern void paging_init(void);
extern void bootmem_init(void);
extern void *early_io_map(phys_addr_t phys, unsigned long virt);
extern void init_mem_pgprot(void);
extern void create_pgd_mapping(struct mm_struct *mm, phys_addr_t phys,
          unsigned long virt, phys_addr_t size,
          pgprot_t prot, bool page_mappings_only);
extern void *fixmap_remap_fdt(phys_addr_t dt_phys, int *size, pgprot_t prot);
extern void mark_linear_text_alias_ro(void);
extern bool kaslr_requires_kpti(void);
# 20 "include/linux/mm_types.h" 2

# 1 "include/dovetail/mm_info.h" 1
# 9 "include/dovetail/mm_info.h"
struct oob_mm_state {
};
# 22 "include/linux/mm_types.h" 2
# 30 "include/linux/mm_types.h"
struct address_space;
struct mem_cgroup;
# 72 "include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   unsigned long dma_addr[2];
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;
     int pobjects;




    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
   unsigned int compound_nr;
  };
  struct {
   unsigned long _compound_pad_1;
   atomic_t hpage_pinned_refcount;

   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };



   spinlock_t ptl;

  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 177 "include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 unsigned long memcg_data;
# 225 "include/linux/mm_types.h"
 int _last_cpupid;

} __attribute__((__aligned__(2 * sizeof(unsigned long))));

static inline atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline atomic_t *compound_pincount_ptr(struct page *page)
{
 return &page[2].hpage_pinned_refcount;
}
# 249 "include/linux/mm_types.h"
static inline void set_page_private(struct page *page, unsigned long private)
{
 page->private = private;
}

struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 297 "include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 306 "include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;





 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;





 struct mempolicy *vm_policy;

 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} __attribute__((__designated_init__));

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 417 "include/linux/mm_types.h"
  atomic_t membarrier_state;
# 429 "include/linux/mm_types.h"
  atomic_t mm_users;
# 438 "include/linux/mm_types.h"
  atomic_t mm_count;
# 448 "include/linux/mm_types.h"
  atomic_t has_pinned;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;
# 470 "include/linux/mm_types.h"
  struct rw_semaphore mmap_lock;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;






  seqcount_t write_protect_seq;

  spinlock_t arg_lock;

  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(2 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;

  struct core_state *core_state;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 535 "include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_subscriptions *notifier_subscriptions;
# 553 "include/linux/mm_types.h"
  unsigned long numa_next_scan;


  unsigned long numa_scan_offset;


  int numa_scan_seq;






  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;

  atomic_long_t hugetlb_usage;


  struct oob_mm_state oob_state;

  struct work_struct async_put_work;


  u32 pasid;

 } __attribute__((__designated_init__));





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += ((size_t)&((struct mm_struct *)0)->cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_gather_mmu_fullmm(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_finish_mmu(struct mmu_gather *tlb);

static inline void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 658 "include/linux/mm_types.h"
}

static inline void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 670 "include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 683 "include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 732 "include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 772 "include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "include/linux/mmzone.h" 2
# 1 "include/linux/page-flags.h" 1
# 103 "include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,





 PG_hwpoison,






 PG_arch_2,

 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_workingset,


 PG_isolated = PG_reclaim,


 PG_reported = PG_uptodate,
};



struct page;

static inline struct page *compound_head(struct page *page)
{
 unsigned long head = ({ do { } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });

 if (unlikely(head & 1))
  return (struct page *) (head - 1);
 return page;
}

static 
# 191 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 191 "include/linux/page-flags.h"
                      int PageTail(struct page *page)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
}

static 
# 196 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 196 "include/linux/page-flags.h"
                      int PageCompound(struct page *page)
{
 return test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline int PagePoisoned(const struct page *page)
{
 return page->flags == -1l;
}




static inline void page_init_poison(struct page *page, size_t size)
{
}
# 328 "include/linux/page-flags.h"
static 
# 328 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 328 "include/linux/page-flags.h"
int PageLocked(struct page *page) { return test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 328 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 328 "include/linux/page-flags.h"
void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 328 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 328 "include/linux/page-flags.h"
void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 329 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 329 "include/linux/page-flags.h"
int PageWaiters(struct page *page) { return test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 329 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 329 "include/linux/page-flags.h"
void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 329 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 329 "include/linux/page-flags.h"
void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 329 "include/linux/page-flags.h" 3 4
                                        __inline __attribute__ ((__always_inline__)) 
# 329 "include/linux/page-flags.h"
                                        void __ClearPageWaiters(struct page *page) { __clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static 
# 330 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 330 "include/linux/page-flags.h"
int PageError(struct page *page) { return test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 330 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 330 "include/linux/page-flags.h"
void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 330 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 330 "include/linux/page-flags.h"
void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 330 "include/linux/page-flags.h" 3 4
                                  __inline __attribute__ ((__always_inline__)) 
# 330 "include/linux/page-flags.h"
                                  int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 331 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 331 "include/linux/page-flags.h"
int PageReferenced(struct page *page) { return test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 331 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 331 "include/linux/page-flags.h"
void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 331 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 331 "include/linux/page-flags.h"
void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 332 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 332 "include/linux/page-flags.h"
int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 333 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 333 "include/linux/page-flags.h"
void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static 
# 334 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 334 "include/linux/page-flags.h"
int PageDirty(struct page *page) { return test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 334 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 334 "include/linux/page-flags.h"
void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 334 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 334 "include/linux/page-flags.h"
void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 334 "include/linux/page-flags.h" 3 4
                               __inline __attribute__ ((__always_inline__)) 
# 334 "include/linux/page-flags.h"
                               int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 334 "include/linux/page-flags.h" 3 4
                               __inline __attribute__ ((__always_inline__)) 
# 334 "include/linux/page-flags.h"
                               int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 335 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 335 "include/linux/page-flags.h"
void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static 
# 336 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 336 "include/linux/page-flags.h"
int PageLRU(struct page *page) { return test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 336 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 336 "include/linux/page-flags.h"
void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 336 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 336 "include/linux/page-flags.h"
void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 336 "include/linux/page-flags.h" 3 4
                           __inline __attribute__ ((__always_inline__)) 
# 336 "include/linux/page-flags.h"
                           void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 337 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 337 "include/linux/page-flags.h"
int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static 
# 338 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 338 "include/linux/page-flags.h"
int PageActive(struct page *page) { return test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 338 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 338 "include/linux/page-flags.h"
void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 338 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 338 "include/linux/page-flags.h"
void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 338 "include/linux/page-flags.h" 3 4
                                 __inline __attribute__ ((__always_inline__)) 
# 338 "include/linux/page-flags.h"
                                 void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 339 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 339 "include/linux/page-flags.h"
int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static 
# 340 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 340 "include/linux/page-flags.h"
int PageWorkingset(struct page *page) { return test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 340 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 340 "include/linux/page-flags.h"
void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 340 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 340 "include/linux/page-flags.h"
void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 341 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 341 "include/linux/page-flags.h"
int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static 
# 342 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 342 "include/linux/page-flags.h"
int PageSlab(struct page *page) { return test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 342 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 342 "include/linux/page-flags.h"
void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 342 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 342 "include/linux/page-flags.h"
void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 343 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 343 "include/linux/page-flags.h"
int PageSlobFree(struct page *page) { return test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 343 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 343 "include/linux/page-flags.h"
void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 343 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 343 "include/linux/page-flags.h"
void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 344 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 344 "include/linux/page-flags.h"
int PageChecked(struct page *page) { return test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 344 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 344 "include/linux/page-flags.h"
void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 344 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 344 "include/linux/page-flags.h"
void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }


static 
# 347 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 347 "include/linux/page-flags.h"
int PagePinned(struct page *page) { return test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 347 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 347 "include/linux/page-flags.h"
void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 347 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 347 "include/linux/page-flags.h"
void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static 
# 348 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 348 "include/linux/page-flags.h"
int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 348 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 348 "include/linux/page-flags.h"
int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static 
# 349 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 349 "include/linux/page-flags.h"
int PageSavePinned(struct page *page) { return test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 349 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 349 "include/linux/page-flags.h"
void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 349 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 349 "include/linux/page-flags.h"
void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static 
# 350 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 350 "include/linux/page-flags.h"
int PageForeign(struct page *page) { return test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 350 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 350 "include/linux/page-flags.h"
void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 350 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 350 "include/linux/page-flags.h"
void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static 
# 351 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 351 "include/linux/page-flags.h"
int PageXenRemapped(struct page *page) { return test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 351 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 351 "include/linux/page-flags.h"
void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 351 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 351 "include/linux/page-flags.h"
void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static 
# 352 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 352 "include/linux/page-flags.h"
int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }

static 
# 354 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 354 "include/linux/page-flags.h"
int PageReserved(struct page *page) { return test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 354 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 354 "include/linux/page-flags.h"
void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 354 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 354 "include/linux/page-flags.h"
void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static 
# 355 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 355 "include/linux/page-flags.h"
void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static 
# 356 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 356 "include/linux/page-flags.h"
void __SetPageReserved(struct page *page) { __set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static 
# 357 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 357 "include/linux/page-flags.h"
int PageSwapBacked(struct page *page) { return test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 357 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 357 "include/linux/page-flags.h"
void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 357 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 357 "include/linux/page-flags.h"
void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static 
# 358 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 358 "include/linux/page-flags.h"
void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static 
# 359 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 359 "include/linux/page-flags.h"
void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }






static 
# 366 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 366 "include/linux/page-flags.h"
int PagePrivate(struct page *page) { return test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 366 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 366 "include/linux/page-flags.h"
void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 366 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 366 "include/linux/page-flags.h"
void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static 
# 367 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 367 "include/linux/page-flags.h"
int PagePrivate2(struct page *page) { return test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 367 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 367 "include/linux/page-flags.h"
void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 367 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 367 "include/linux/page-flags.h"
void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 367 "include/linux/page-flags.h" 3 4
                                     __inline __attribute__ ((__always_inline__)) 
# 367 "include/linux/page-flags.h"
                                     int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 367 "include/linux/page-flags.h" 3 4
                                     __inline __attribute__ ((__always_inline__)) 
# 367 "include/linux/page-flags.h"
                                     int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static 
# 368 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 368 "include/linux/page-flags.h"
int PageOwnerPriv1(struct page *page) { return test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 368 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 368 "include/linux/page-flags.h"
void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 368 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 368 "include/linux/page-flags.h"
void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static 
# 369 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 369 "include/linux/page-flags.h"
int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }





static 
# 375 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 375 "include/linux/page-flags.h"
int PageWriteback(struct page *page) { return test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static 
# 376 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 376 "include/linux/page-flags.h"
int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 376 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 376 "include/linux/page-flags.h"
int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 377 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 377 "include/linux/page-flags.h"
int PageMappedToDisk(struct page *page) { return test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 377 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 377 "include/linux/page-flags.h"
void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 377 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 377 "include/linux/page-flags.h"
void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }


static 
# 380 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 380 "include/linux/page-flags.h"
int PageReclaim(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 380 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 380 "include/linux/page-flags.h"
void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 380 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 380 "include/linux/page-flags.h"
void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static 
# 381 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 381 "include/linux/page-flags.h"
int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 382 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 382 "include/linux/page-flags.h"
int PageReadahead(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 382 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 382 "include/linux/page-flags.h"
void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 382 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 382 "include/linux/page-flags.h"
void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static 
# 383 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 383 "include/linux/page-flags.h"
int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 392 "include/linux/page-flags.h"
static inline int PageHighMem(const struct page *page) { return 0; } static inline void SetPageHighMem(struct page *page) { } static inline void ClearPageHighMem(struct page *page) { }



static 
# 396 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 396 "include/linux/page-flags.h"
                      int PageSwapCache(struct page *page)
{



 return PageSwapBacked(page) && test_bit(PG_swapcache, &page->flags);

}
static 
# 404 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 404 "include/linux/page-flags.h"
void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static 
# 405 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 405 "include/linux/page-flags.h"
void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }




static 
# 410 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 410 "include/linux/page-flags.h"
int PageUnevictable(struct page *page) { return test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 410 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 410 "include/linux/page-flags.h"
void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static 
# 410 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 410 "include/linux/page-flags.h"
void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 411 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 411 "include/linux/page-flags.h"
void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static 
# 412 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 412 "include/linux/page-flags.h"
int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }


static 
# 415 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 415 "include/linux/page-flags.h"
int PageMlocked(struct page *page) { return test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 415 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 415 "include/linux/page-flags.h"
void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 415 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 415 "include/linux/page-flags.h"
void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static 
# 416 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 416 "include/linux/page-flags.h"
void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static 
# 417 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 417 "include/linux/page-flags.h"
int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static 
# 417 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 417 "include/linux/page-flags.h"
int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
# 426 "include/linux/page-flags.h"
static inline int PageUncached(const struct page *page) { return 0; } static inline void SetPageUncached(struct page *page) { } static inline void ClearPageUncached(struct page *page) { }



static 
# 430 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 430 "include/linux/page-flags.h"
int PageHWPoison(struct page *page) { return test_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 430 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 430 "include/linux/page-flags.h"
void SetPageHWPoison(struct page *page) { set_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 430 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 430 "include/linux/page-flags.h"
void ClearPageHWPoison(struct page *page) { clear_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static 
# 431 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 431 "include/linux/page-flags.h"
int TestSetPageHWPoison(struct page *page) { return test_and_set_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 431 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 431 "include/linux/page-flags.h"
int TestClearPageHWPoison(struct page *page) { return test_and_clear_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }

extern bool take_page_off_buddy(struct page *page);
# 452 "include/linux/page-flags.h"
static 
# 452 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 452 "include/linux/page-flags.h"
int PageReported(struct page *page) { return test_bit(PG_reported, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 452 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 452 "include/linux/page-flags.h"
void __SetPageReported(struct page *page) { __set_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static 
# 452 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 452 "include/linux/page-flags.h"
void __ClearPageReported(struct page *page) { __clear_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 476 "include/linux/page-flags.h"
static 
# 476 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 476 "include/linux/page-flags.h"
                      int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static 
# 481 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 481 "include/linux/page-flags.h"
                      int PageAnon(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & 0x1) != 0;
}

static 
# 487 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 487 "include/linux/page-flags.h"
                      int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 500 "include/linux/page-flags.h"
static 
# 500 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 500 "include/linux/page-flags.h"
                      int PageKsm(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}




u64 stable_page_flags(struct page *page);

static inline int PageUptodate(struct page *page)
{
 int ret;
 page = compound_head(page);
 ret = test_bit(PG_uptodate, &(page)->flags);
# 525 "include/linux/page-flags.h"
 if (ret)
  barrier();

 return ret;
}

static 
# 531 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 531 "include/linux/page-flags.h"
                      void __SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 barrier();
 __set_bit(PG_uptodate, &page->flags);
}

static 
# 538 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 538 "include/linux/page-flags.h"
                      void SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));





 barrier();
 set_bit(PG_uptodate, &page->flags);
}

static 
# 550 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 550 "include/linux/page-flags.h"
void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }

int test_clear_page_writeback(struct page *page);
int __test_set_page_writeback(struct page *page, bool keep_write);






static inline void set_page_writeback(struct page *page)
{
 __test_set_page_writeback(page, false);
}

static inline void set_page_writeback_keepwrite(struct page *page)
{
 __test_set_page_writeback(page, true);
}

static 
# 570 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 570 "include/linux/page-flags.h"
int PageHead(struct page *page) { return test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 570 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 570 "include/linux/page-flags.h"
void __SetPageHead(struct page *page) { __set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 570 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 570 "include/linux/page-flags.h"
void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 570 "include/linux/page-flags.h" 3 4
                              __inline __attribute__ ((__always_inline__)) 
# 570 "include/linux/page-flags.h"
                              void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }

static 
# 572 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 572 "include/linux/page-flags.h"
                      void set_compound_head(struct page *page, struct page *head)
{
 do { do { } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
}

static 
# 577 "include/linux/page-flags.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 577 "include/linux/page-flags.h"
                      void clear_compound_head(struct page *page)
{
 do { do { } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
}


static inline void ClearPageCompound(struct page *page)
{
 do { if (unlikely(!PageHead(page))) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/page-flags.h\"; .popsection; .long 14472b - 14470b; .short 585; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
 ClearPageHead(page);
}





int PageHuge(struct page *page);
int PageHeadHuge(struct page *page);
# 610 "include/linux/page-flags.h"
static inline int PageTransHuge(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return PageHead(page);
}






static inline int PageTransCompound(struct page *page)
{
 return PageCompound(page);
}
# 647 "include/linux/page-flags.h"
static inline int PageTransCompoundMap(struct page *page)
{
 struct page *head;

 if (!PageTransCompound(page))
  return 0;

 if (PageAnon(page))
  return atomic_read(&page->_mapcount) < 0;

 head = compound_head(page);

 return atomic_read(&page->_mapcount) ==
        atomic_read(compound_mapcount_ptr(head));
}






static inline int PageTransTail(struct page *page)
{
 return PageTail(page);
}
# 686 "include/linux/page-flags.h"
static 
# 686 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 686 "include/linux/page-flags.h"
int PageDoubleMap(struct page *page) { return test_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static 
# 686 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 686 "include/linux/page-flags.h"
void SetPageDoubleMap(struct page *page) { set_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static 
# 686 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 686 "include/linux/page-flags.h"
void ClearPageDoubleMap(struct page *page) { clear_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); }
 static 
# 687 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 687 "include/linux/page-flags.h"
int TestSetPageDoubleMap(struct page *page) { return test_and_set_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static 
# 687 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 687 "include/linux/page-flags.h"
int TestClearPageDoubleMap(struct page *page) { return test_and_clear_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); }
# 717 "include/linux/page-flags.h"
static inline int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 742 "include/linux/page-flags.h"
static 
# 742 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 742 "include/linux/page-flags.h"
int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static 
# 742 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 742 "include/linux/page-flags.h"
void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000080; } static 
# 742 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 742 "include/linux/page-flags.h"
void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); page->page_type |= 0x00000080; }
# 761 "include/linux/page-flags.h"
static 
# 761 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 761 "include/linux/page-flags.h"
int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static 
# 761 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 761 "include/linux/page-flags.h"
void __SetPageOffline(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000100; } static 
# 761 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 761 "include/linux/page-flags.h"
void __ClearPageOffline(struct page *page) { ((void)(sizeof(( long)(!PageOffline(page))))); page->page_type |= 0x00000100; }




static 
# 766 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 766 "include/linux/page-flags.h"
int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static 
# 766 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 766 "include/linux/page-flags.h"
void __SetPageTable(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000200; } static 
# 766 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 766 "include/linux/page-flags.h"
void __ClearPageTable(struct page *page) { ((void)(sizeof(( long)(!PageTable(page))))); page->page_type |= 0x00000200; }




static 
# 771 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 771 "include/linux/page-flags.h"
int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static 
# 771 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 771 "include/linux/page-flags.h"
void __SetPageGuard(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000400; } static 
# 771 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 771 "include/linux/page-flags.h"
void __ClearPageGuard(struct page *page) { ((void)(sizeof(( long)(!PageGuard(page))))); page->page_type |= 0x00000400; }

extern bool is_free_buddy_page(struct page *page);

static 
# 775 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 775 "include/linux/page-flags.h"
int PageIsolated(struct page *page) { return test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 775 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 775 "include/linux/page-flags.h"
void __SetPageIsolated(struct page *page) { __set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static 
# 775 "include/linux/page-flags.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 775 "include/linux/page-flags.h"
void __ClearPageIsolated(struct page *page) { __clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };





static inline int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}

static inline void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 842 "include/linux/page-flags.h"
static inline int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}
# 23 "include/linux/mmzone.h" 2
# 41 "include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 61 "include/linux/mmzone.h"
 MIGRATE_CMA,


 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 80 "include/linux/mmzone.h"
static inline bool is_migrate_movable(int mt)
{
 return unlikely((mt) == MIGRATE_CMA) || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;






struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

static inline struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ do { } while (0); (*(const volatile typeof( _Generic((head__->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head__->next))) *)&(head__->next)); }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); do { } while (0); ((struct page *)(__mptr - ((size_t)&((struct page *)0)->lru))); }) : 
# 104 "include/linux/mmzone.h" 3 4
       ((void *)0)
# 104 "include/linux/mmzone.h"
       ; })
                      ;
}

static inline bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;







struct zone_padding {
 char x[0];
} ;






enum numa_stat_item {
 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,
 NR_VM_NUMA_STAT_ITEMS
};




enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,

 NR_BOUNCE,



 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE_B,
 NR_SLAB_UNRECLAIMABLE_B,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_FILE,
 WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_FILE,
 WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_FILE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_FILE_THPS,
 NR_FILE_PMDMAPPED,
 NR_ANON_THPS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_FOLL_PIN_ACQUIRED,
 NR_FOLL_PIN_RELEASED,
 NR_KERNEL_STACK_KB,



 NR_PAGETABLE,

 NR_SWAPCACHE,

 NR_VM_NODE_STAT_ITEMS
};






static 
# 220 "include/linux/mmzone.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 220 "include/linux/mmzone.h"
                      bool vmstat_item_print_in_thp(enum node_stat_item item)
{
 if (!1)
  return false;

 return item == NR_ANON_THPS ||
        item == NR_FILE_THPS ||
        item == NR_SHMEM_THPS ||
        item == NR_SHMEM_PMDMAPPED ||
        item == NR_FILE_PMDMAPPED;
}






static 
# 237 "include/linux/mmzone.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 237 "include/linux/mmzone.h"
                      bool vmstat_item_in_bytes(int idx)
{
# 248 "include/linux/mmzone.h"
 return (idx == NR_SLAB_RECLAIMABLE_B ||
  idx == NR_SLAB_UNRECLAIMABLE_B);
}
# 265 "include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline bool is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline bool is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}



enum lruvec_flags {
 LRUVEC_CONGESTED,


};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];

 spinlock_t lru_lock;





 unsigned long anon_cost;
 unsigned long file_cost;

 atomic_long_t nonresident_age;

 unsigned long refaults[2];

 unsigned long flags;

 struct pglist_data *pgdat;

};
# 326 "include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};






struct per_cpu_pages {
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];
};

struct per_cpu_pageset {
 struct per_cpu_pages pcp;

 s8 expire;
 u16 vm_numa_stat_diff[NR_VM_NUMA_STAT_ITEMS];


 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 380 "include/linux/mmzone.h"
 ZONE_DMA,


 ZONE_DMA32,






 ZONE_NORMAL,
# 451 "include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};





struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 481 "include/linux/mmzone.h"
 long lowmem_reserve[4];


 int node;

 struct pglist_data *zone_pgdat;
 struct per_cpu_pageset *pageset;




 int pageset_high;
 int pageset_batch;
# 504 "include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 544 "include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

 unsigned long cma_pages;


 const char *name;







 unsigned long nr_isolate_pageblock;







 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 607 "include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_stat[NR_VM_NUMA_STAT_ITEMS];
} ;

enum pgdat_flags {
 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


};

static inline unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline unsigned long zone_cma_pages(struct zone *zone)
{

 return zone->cma_pages;



}

static inline unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 702 "include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,





 ZONELIST_NOFALLBACK,

 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 737 "include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 4) * 4) + 1];
};



extern struct page *mem_map;



struct deferred_split {
 spinlock_t split_queue_lock;
 struct list_head split_queue;
 unsigned long split_queue_len;
};
# 762 "include/linux/mmzone.h"
typedef struct pglist_data {





 struct zone node_zones[4];






 struct zonelist node_zonelists[MAX_ZONELISTS];

 int nr_zones;
# 799 "include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_highest_zoneidx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_highest_zoneidx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;





 unsigned long totalreserve_pages;





 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;



 struct zone_padding _pad1_;
# 845 "include/linux/mmzone.h"
 struct deferred_split deferred_split_queue;
# 855 "include/linux/mmzone.h"
 struct lruvec __lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 878 "include/linux/mmzone.h"
static inline unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

# 1 "include/linux/memory_hotplug.h" 1




# 1 "include/linux/mmzone.h" 1
# 6 "include/linux/memory_hotplug.h" 2

# 1 "include/linux/notifier.h" 1
# 16 "include/linux/notifier.h"
# 1 "include/linux/srcu.h" 1
# 22 "include/linux/srcu.h"
# 1 "include/linux/rcu_segcblist.h" 1
# 21 "include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
};
# 183 "include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long seglen[4];
 u8 flags;
};
# 23 "include/linux/srcu.h" 2

struct srcu_struct;
# 41 "include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *ssp);







# 1 "include/linux/srcutree.h" 1
# 14 "include/linux/srcutree.h"
# 1 "include/linux/rcu_node_tree.h" 1
# 15 "include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock ;
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[(1 + (((256) + ((16)) - 1) / ((16))))];
 struct srcu_node *level[2 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;



};
# 137 "include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);
# 94 "include/linux/srcu.h"
static inline int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 return 1;
}
# 153 "include/linux/srcu.h"
static inline int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 do { } while (0);
 return retval;
}


static inline notrace int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 179 "include/linux/srcu.h"
static inline void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ int __ret_warn_on = !!(idx & ~0x1); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/srcu.h\"; .popsection; .long 14472b - 14470b; .short 182; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 do { } while (0);
 __srcu_read_unlock(ssp, idx);
}


static inline notrace void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 203 "include/linux/srcu.h"
static inline void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "include/linux/notifier.h" 2
# 49 "include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 8 "include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct resource;
struct vmem_altmap;
# 251 "include/linux/memory_hotplug.h"
static inline unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline void zone_span_writelock(struct zone *zone) {}
static inline void zone_span_writeunlock(struct zone *zone) {}
static inline void zone_seqlock_init(struct zone *zone) {}

static inline void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}

static inline int try_online_node(int nid)
{
 return 0;
}

static inline void get_online_mems(void) {}
static inline void put_online_mems(void) {}

static inline void mem_hotplug_begin(void) {}
static inline void mem_hotplug_done(void) {}

static inline bool movable_node_is_enabled(void)
{
 return false;
}







struct range arch_get_mappable_range(void);
# 314 "include/linux/memory_hotplug.h"
static inline void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline void pgdat_resize_init(struct pglist_data *pgdat) {}
# 328 "include/linux/memory_hotplug.h"
static inline void try_offline_node(int nid) {}

static inline int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
{
 return -
# 332 "include/linux/memory_hotplug.h" 3 4
        22
# 332 "include/linux/memory_hotplug.h"
              ;
}

static inline int remove_memory(int nid, u64 start, u64 size)
{
 return -
# 337 "include/linux/memory_hotplug.h" 3 4
        16
# 337 "include/linux/memory_hotplug.h"
             ;
}

static inline void __remove_memory(int nid, u64 start, u64 size) {}


extern void set_zone_contiguous(struct zone *zone);
extern void clear_zone_contiguous(struct zone *zone);
# 889 "include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type highest_zoneidx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int highest_zoneidx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx);




enum meminit_context {
 MEMINIT_EARLY,
 MEMINIT_HOTPLUG,
};

extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}




static inline int local_memory_node(int node_id) { return node_id; };
# 941 "include/linux/mmzone.h"
static inline bool zone_is_zone_device(struct zone *zone)
{
 return false;
}
# 953 "include/linux/mmzone.h"
static inline bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}


static inline int zone_to_nid(struct zone *zone)
{
 return zone->node;
}

static inline void zone_set_nid(struct zone *zone, int nid)
{
 zone->node = nid;
}
# 983 "include/linux/mmzone.h"
extern int movable_zone;
# 996 "include/linux/mmzone.h"
static inline int is_highmem_idx(enum zone_type idx)
{




 return 0;

}
# 1013 "include/linux/mmzone.h"
static inline int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;

int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[4];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int numa_zonelist_order_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
extern int percpu_pagelist_fraction;
extern char numa_zonelist_order[];
# 1052 "include/linux/mmzone.h"
# 1 "arch/arm64/include/asm/mmzone.h" 1






# 1 "arch/arm64/include/asm/numa.h" 1




# 1 "arch/arm64/include/asm/topology.h" 1
# 9 "arch/arm64/include/asm/topology.h"
struct pci_bus;
int pcibus_to_node(struct pci_bus *bus);






# 1 "include/linux/arch_topology.h" 1
# 11 "include/linux/arch_topology.h"
void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

static inline unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))
# 21 "include/linux/arch_topology.h" 3 4
       ((void *)0)
# 21 "include/linux/arch_topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))), ((__per_cpu_offset[(cpu)]))); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) arch_freq_scale;

static inline unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(arch_freq_scale)) + 0))
# 30 "include/linux/arch_topology.h" 3 4
       ((void *)0)
# 30 "include/linux/arch_topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale))), ((__per_cpu_offset[(cpu)]))); }));
}

void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
        unsigned long max_freq);
bool topology_scale_freq_invariant(void);

enum scale_freq_source {
 SCALE_FREQ_SOURCE_CPUFREQ = 0,
 SCALE_FREQ_SOURCE_ARCH,
};

struct scale_freq_data {
 enum scale_freq_source source;
 void (*set_freq_scale)(void);
};

void topology_scale_freq_tick(void);
void topology_set_scale_freq_source(struct scale_freq_data *data, const struct cpumask *cpus);
void topology_clear_scale_freq_source(enum scale_freq_source source, const struct cpumask *cpus);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) thermal_pressure;

static inline unsigned long topology_get_thermal_pressure(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))
# 55 "include/linux/arch_topology.h" 3 4
       ((void *)0)
# 55 "include/linux/arch_topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure))), ((__per_cpu_offset[(cpu)]))); }));
}

void topology_set_thermal_pressure(const struct cpumask *cpus,
       unsigned long th_pressure);

struct cpu_topology {
 int thread_id;
 int core_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t llc_sibling;
};


extern struct cpu_topology cpu_topology[256];






void init_cpu_topology(void);
void store_cpu_topology(unsigned int cpuid);
const struct cpumask *cpu_coregroup_mask(int cpu);
void update_siblings_masks(unsigned int cpu);
void remove_cpu_topology(unsigned int cpuid);
void reset_cpu_topology(void);
int parse_acpi_topology(void);
# 18 "arch/arm64/include/asm/topology.h" 2

void update_freq_counters_refs(void);
# 37 "arch/arm64/include/asm/topology.h"
# 1 "include/asm-generic/topology.h" 1
# 38 "arch/arm64/include/asm/topology.h" 2
# 6 "arch/arm64/include/asm/numa.h" 2
# 1 "include/asm-generic/numa.h" 1
# 9 "include/asm-generic/numa.h"
int __node_distance(int from, int to);


extern nodemask_t numa_nodes_parsed __attribute__((__section__(".init.data")));

extern bool numa_off;


extern cpumask_var_t node_to_cpumask_map[(1 << 4)];
void numa_clear_node(unsigned int cpu);





static inline const struct cpumask *cpumask_of_node(int node)
{
 if (node == (-1))
  return ((struct cpumask *)(1 ? (cpu_all_bits) : (void *)sizeof(__check_is_bitmap(cpu_all_bits))));

 return node_to_cpumask_map[node];
}


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) arch_numa_init(void);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) numa_add_memblk(int nodeid, u64 start, u64 end);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) numa_set_distance(int from, int to, int distance);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) numa_free_distance(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) early_map_cpu_to_node(unsigned int cpu, int nid);
void numa_store_cpu_info(unsigned int cpu);
void numa_add_cpu(unsigned int cpu);
void numa_remove_cpu(unsigned int cpu);
# 7 "arch/arm64/include/asm/numa.h" 2
# 8 "arch/arm64/include/asm/mmzone.h" 2

extern struct pglist_data *node_data[];
# 1053 "include/linux/mmzone.h" 2



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 1088 "include/linux/mmzone.h"
static inline struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1122 "include/linux/mmzone.h"
static 
# 1122 "include/linux/mmzone.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 1122 "include/linux/mmzone.h"
                      struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (likely(!nodes && zonelist_zone_idx(z) <= highest_zoneidx))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1148 "include/linux/mmzone.h"
static inline struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1223 "include/linux/mmzone.h"
static inline unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (27 - 12);
}
static inline unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (27 - 12);
}
# 1251 "include/linux/mmzone.h"
struct mem_section_usage {

 unsigned long subsection_map[((((1UL << (27 - 21))) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 unsigned long pageblock_flags[0];
};

void subsection_map_init(unsigned long pfn, unsigned long nr_pages);

struct page;
struct page_ext;
struct mem_section {
# 1276 "include/linux/mmzone.h"
 unsigned long section_mem_map;

 struct mem_section_usage *usage;
# 1291 "include/linux/mmzone.h"
};
# 1304 "include/linux/mmzone.h"
extern struct mem_section **mem_section;




static inline unsigned long *section_to_usemap(struct mem_section *ms)
{
 return ms->usage->pageblock_flags;
}

static inline struct mem_section *__nr_to_section(unsigned long nr)
{

 if (!mem_section)
  return 
# 1318 "include/linux/mmzone.h" 3 4
        ((void *)0)
# 1318 "include/linux/mmzone.h"
            ;

 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return 
# 1321 "include/linux/mmzone.h" 3 4
        ((void *)0)
# 1321 "include/linux/mmzone.h"
            ;
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern unsigned long __section_nr(struct mem_section *ms);
extern size_t mem_section_usage_size(void);
# 1349 "include/linux/mmzone.h"
static inline struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<5)-1));
 return (struct page *)map;
}

static inline int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline int early_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<3)));
}

static inline int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline int online_device_section(struct mem_section *section)
{
 unsigned long flags = (1UL<<2) | (1UL<<4);

 return section && ((section->section_mem_map & flags) == flags);
}

static inline int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}






static inline struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern unsigned long __highest_present_section_nr;

static inline int subsection_map_index(unsigned long pfn)
{
 return (pfn & ~((~((1UL << (27 - 12))-1)))) / (1UL << (21 - 12));
}


static inline int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
{
 int idx = subsection_map_index(pfn);

 return test_bit(idx, ms->usage->subsection_map);
}
# 1447 "include/linux/mmzone.h"
static inline int pfn_in_present_section(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (48 - 27)))
  return 0;
 return present_section(__nr_to_section(pfn_to_section_nr(pfn)));
}

static inline unsigned long next_present_section_nr(unsigned long section_nr)
{
 while (++section_nr <= __highest_present_section_nr) {
  if (present_section_nr(section_nr))
   return section_nr;
 }

 return -1;
}
# 1479 "include/linux/mmzone.h"
void sparse_init(void);
# 7 "include/linux/gfp.h" 2


# 1 "include/linux/topology.h" 1
# 46 "include/linux/topology.h"
int topology_update_cpu_topology(void);
# 76 "include/linux/topology.h"
extern int __attribute__((__section__(".data..read_mostly"))) node_reclaim_distance;






extern __attribute__((section(".data..percpu" ""))) __typeof__(int) numa_node;



static inline int numa_node_id(void)
{
 return ({ typeof(numa_node) pscr_ret__; do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 89 "include/linux/topology.h" 3 4
       ((void *)0)
# 89 "include/linux/topology.h"
       ; (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 89 "include/linux/topology.h" 3 4
       ((void *)0)
# 89 "include/linux/topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 89 "include/linux/topology.h" 3 4
       ((void *)0)
# 89 "include/linux/topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 89 "include/linux/topology.h" 3 4
       ((void *)0)
# 89 "include/linux/topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 89 "include/linux/topology.h" 3 4
       ((void *)0)
# 89 "include/linux/topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}



static inline int cpu_to_node(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 96 "include/linux/topology.h" 3 4
       ((void *)0)
# 96 "include/linux/topology.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(numa_node)))) *)((&(numa_node))), ((__per_cpu_offset[(cpu)]))); }));
}



static inline void set_numa_node(int node)
{
 do { do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 103 "include/linux/topology.h" 3 4
((void *)0)
# 103 "include/linux/topology.h"
; (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_write_8(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 103 "include/linux/topology.h" 3 4
((void *)0)
# 103 "include/linux/topology.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }), (unsigned long)node); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_write_16(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 103 "include/linux/topology.h" 3 4
((void *)0)
# 103 "include/linux/topology.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }), (unsigned long)node); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_write_32(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 103 "include/linux/topology.h" 3 4
((void *)0)
# 103 "include/linux/topology.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }), (unsigned long)node); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_write_64(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 103 "include/linux/topology.h" 3 4
((void *)0)
# 103 "include/linux/topology.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(numa_node))) *)(&(numa_node)), (__kern_my_cpu_offset())); }), (unsigned long)node); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
}



static inline void set_cpu_numa_node(int cpu, int node)
{
 (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))
# 110 "include/linux/topology.h" 3 4
((void *)0)
# 110 "include/linux/topology.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(numa_node)))) *)((&(numa_node))), ((__per_cpu_offset[(cpu)]))); })) = node;
}
# 168 "include/linux/topology.h"
static inline int numa_mem_id(void)
{
 return numa_node_id();
}



static inline int cpu_to_mem(int cpu)
{
 return cpu_to_node(cpu);
}
# 203 "include/linux/topology.h"
static inline const struct cpumask *cpu_smt_mask(int cpu)
{
 return (&cpu_topology[cpu].thread_sibling);
}


static inline const struct cpumask *cpu_cpu_mask(int cpu)
{
 return cpumask_of_node(cpu_to_node(cpu));
}
# 10 "include/linux/gfp.h" 2
# 25 "include/linux/gfp.h"
struct vm_area_struct;
# 331 "include/linux/gfp.h"
static inline int gfp_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { } while (0);
 do { } while (0);

 if (unlikely(page_group_by_mobility_disabled))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 368 "include/linux/gfp.h"
static inline bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
  (( gfp_t)0x400u);
}
# 464 "include/linux/gfp.h"
static inline enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 482 "include/linux/gfp.h"
static inline int gfp_zonelist(gfp_t flags)
{

 if (unlikely(flags & (( gfp_t)0x200000u)))
  return ZONELIST_NOFALLBACK;

 return ZONELIST_FALLBACK;
}
# 500 "include/linux/gfp.h"
static inline struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[(nid)])->node_zonelists + gfp_zonelist(flags);
}


static inline void arch_free_page(struct page *page, int order) { }


static inline void arch_alloc_page(struct page *page, int order) { }


static inline int arch_make_page_accessible(struct page *page)
{
 return 0;
}


struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);

unsigned long __alloc_pages_bulk(gfp_t gfp, int preferred_nid,
    nodemask_t *nodemask, int nr_pages,
    struct list_head *page_list,
    struct page **page_array);


static inline unsigned long
alloc_pages_bulk_list(gfp_t gfp, unsigned long nr_pages, struct list_head *list)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), 
# 530 "include/linux/gfp.h" 3 4
                                              ((void *)0)
# 530 "include/linux/gfp.h"
                                                  , nr_pages, list, 
# 530 "include/linux/gfp.h" 3 4
                                                                    ((void *)0)
# 530 "include/linux/gfp.h"
                                                                        );
}

static inline unsigned long
alloc_pages_bulk_array(gfp_t gfp, unsigned long nr_pages, struct page **page_array)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), 
# 536 "include/linux/gfp.h" 3 4
                                              ((void *)0)
# 536 "include/linux/gfp.h"
                                                  , nr_pages, 
# 536 "include/linux/gfp.h" 3 4
                                                              ((void *)0)
# 536 "include/linux/gfp.h"
                                                                  , page_array);
}





static inline struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 4)))));
 ((void)(sizeof(( long)((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid, 
# 549 "include/linux/gfp.h" 3 4
                                           ((void *)0)
# 549 "include/linux/gfp.h"
                                               );
}






static inline struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}


struct page *alloc_pages(gfp_t gfp, unsigned int order);
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node, bool hugepage);
# 587 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) notrace alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc_align(struct page_frag_cache *nc,
       unsigned int fragsz, gfp_t gfp_mask,
       unsigned int align_mask);

static inline void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask)
{
 return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
}

extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 634 "include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);

extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);


extern bool pm_suspended_storage(void);
# 655 "include/linux/gfp.h"
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype, gfp_t gfp_mask);
extern struct page *alloc_contig_pages(unsigned long nr_pages, gfp_t gfp_mask,
           int nid, nodemask_t *nodemask);

void free_contig_range(unsigned long pfn, unsigned long nr_pages);



extern void init_cma_reserved_pageblock(struct page *page);
# 5 "include/linux/umh.h" 2




# 1 "include/linux/sysctl.h" 1
# 30 "include/linux/sysctl.h"
# 1 "include/uapi/linux/sysctl.h" 1
# 35 "include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
  size_t *lenp, loff_t *ppos);

int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dou8vec_minmax(struct ctl_table *table, int write, void *buffer,
   size_t *lenp, loff_t *ppos);
int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
  size_t *, loff_t *);
int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 96 "include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 114 "include/linux/sysctl.h"
struct ctl_table {
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} __attribute__((__designated_init__));

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header {
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);
void do_sysctl_args(void);

extern int pwrsw_enabled;
extern int unaligned_enabled;
extern int unaligned_dump_stack;
extern int no_unaligned_warning;

extern struct ctl_table sysctl_mount_point[];
extern struct ctl_table random_table[];
extern struct ctl_table firmware_config_table[];
extern struct ctl_table epoll_table[];
# 244 "include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 10 "include/linux/umh.h" 2

struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} __attribute__((__designated_init__));

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 10 "include/linux/kmod.h" 2
# 20 "include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((__format__(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 17 "include/linux/module.h" 2

# 1 "include/linux/elf.h" 1





# 1 "arch/arm64/include/asm/elf.h" 1
# 14 "arch/arm64/include/asm/elf.h"
# 1 "arch/arm64/include/generated/asm/user.h" 1
# 1 "include/asm-generic/user.h" 1
# 1 "arch/arm64/include/generated/asm/user.h" 2
# 15 "arch/arm64/include/asm/elf.h" 2
# 138 "arch/arm64/include/asm/elf.h"
# 1 "include/uapi/linux/elf.h" 1





# 1 "include/uapi/linux/elf-em.h" 1
# 7 "include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 139 "include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 162 "include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 304 "include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 440 "include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 139 "arch/arm64/include/asm/elf.h" 2


# 1 "include/linux/fs.h" 1





# 1 "include/linux/wait_bit.h" 1
# 10 "include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "include/linux/wait_bit.h"
static inline int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { check_inband_stage(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "include/linux/wait_bit.h"
static inline int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { check_inband_stage(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "include/linux/wait_bit.h"
static inline int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { check_inband_stage(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "include/linux/wait_bit.h"
static inline int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { check_inband_stage(); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "include/linux/wait_bit.h"
static inline int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { check_inband_stage(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "include/linux/wait_bit.h"
static inline int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { check_inband_stage(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "include/linux/wait_bit.h"
static inline int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { check_inband_stage(); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "include/linux/wait_bit.h"
static inline void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 barrier();
 wake_up_bit(word, bit);
}
# 7 "include/linux/fs.h" 2
# 1 "include/linux/kdev_t.h" 1




# 1 "include/uapi/linux/kdev_t.h" 1
# 6 "include/linux/kdev_t.h" 2
# 24 "include/linux/kdev_t.h"
static 
# 24 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 24 "include/linux/kdev_t.h"
                      bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static 
# 29 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 29 "include/linux/kdev_t.h"
                      u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static 
# 34 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 34 "include/linux/kdev_t.h"
                      dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static 
# 39 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 39 "include/linux/kdev_t.h"
                      u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static 
# 46 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 46 "include/linux/kdev_t.h"
                      dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static 
# 53 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 53 "include/linux/kdev_t.h"
                      u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static 
# 58 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 58 "include/linux/kdev_t.h"
                      dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static 
# 63 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 63 "include/linux/kdev_t.h"
                      int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static 
# 68 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 68 "include/linux/kdev_t.h"
                      u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static 
# 73 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 73 "include/linux/kdev_t.h"
                      unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static 
# 78 "include/linux/kdev_t.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 78 "include/linux/kdev_t.h"
                      unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "include/linux/fs.h" 2
# 1 "include/linux/dcache.h" 1
# 9 "include/linux/dcache.h"
# 1 "include/linux/rculist_bl.h" 1







# 1 "include/linux/list_bl.h" 1





# 1 "include/linux/bit_spinlock.h" 1
# 16 "include/linux/bit_spinlock.h"
static inline void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { __preempt_count_add(1); barrier(); } while (0);

 while (unlikely(test_and_set_bit_lock(bitnum, addr))) {
  do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
  do {
   cpu_relax();
  } while (test_bit(bitnum, addr));
  do { __preempt_count_add(1); barrier(); } while (0);
 }

 (void)0;
}




static inline int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { __preempt_count_add(1); barrier(); } while (0);

 if (unlikely(test_and_set_bit_lock(bitnum, addr))) {
  do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
 (void)0;
}






static inline void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
 (void)0;
}




static inline int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return test_bit(bitnum, addr);





}
# 7 "include/linux/list_bl.h" 2
# 34 "include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = 
# 46 "include/linux/list_bl.h" 3 4
          ((void *)0)
# 46 "include/linux/list_bl.h"
              ;
 h->pprev = 
# 47 "include/linux/list_bl.h" 3 4
           ((void *)0)
# 47 "include/linux/list_bl.h"
               ;
}



static inline bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ do { } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }) & ~1UL);
}

static inline void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 do { do { } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))); } while (0); } while (0)

                                                           ;
}

static inline void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

 ;


 do { do { } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))); } while (0); } while (0)


                                                ;
 if (next)
  next->pprev = pprev;
}

static inline void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + 0);
 n->pprev = ((void *) 0x122 + 0);
}

static inline void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "include/linux/rculist_bl.h" 2


static inline void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 ;

                        ;
 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)
# 17 "include/linux/rculist_bl.h" 3 4
((void *)0)
# 17 "include/linux/rculist_bl.h"
) do { do { } while (0); do { *(volatile typeof((h->first)) *)&((h->first)) = ((typeof(h->first))(_r_a_p__v)); } while (0); } while (0); else do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&h->first) *)&(*&h->first) = ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0)
                                                                ;
}

static inline struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((h->first)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((h->first)))) *)&((h->first))); }); do { } while (0 && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 46 "include/linux/rculist_bl.h"
static inline void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + 0);
}
# 71 "include/linux/rculist_bl.h"
static inline void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 10 "include/linux/dcache.h" 2




# 1 "include/linux/lockref.h" 1
# 25 "include/linux/lockref.h"
struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 15 "include/linux/dcache.h" 2
# 1 "include/linux/stringhash.h" 1






# 1 "include/linux/hash.h" 1
# 60 "include/linux/hash.h"
static inline u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static 
# 77 "include/linux/hash.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 77 "include/linux/hash.h"
                      u32 hash_64_generic(u64 val, unsigned int bits)
{





 return hash_32_generic((u32)val ^ __hash_32_generic(val >> 32), bits);

}

static inline u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_32_generic((unsigned long)ptr, bits);
}


static inline u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;




 return (u32)val;
}
# 8 "include/linux/stringhash.h" 2
# 42 "include/linux/stringhash.h"
static inline unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline unsigned int end_name_hash(unsigned long hash)
{
 return hash_32_generic(hash, 32);
}
# 66 "include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 16 "include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 48 "include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;
extern const struct qstr dotdot_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 91 "include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_spinlock_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} __attribute__((__designated_init__));







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << (6)))));
# 225 "include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);

extern struct dentry *d_find_alias_rcu(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(const struct dentry *, char *, int);
extern char *dentry_path(const struct dentry *, char *, int);
# 317 "include/linux/dcache.h"
static inline struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "include/linux/dcache.h"
static inline int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline void d_lookup_done(struct dentry *dentry)
{
 if (unlikely(d_in_lookup(dentry))) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline bool d_flags_negative(unsigned flags)
{
 return (flags & 0x00700000) == 0x00000000;
}

static inline bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 474 "include/linux/dcache.h"
static inline bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == 
# 476 "include/linux/dcache.h" 3 4
                          ((void *)0)
# 476 "include/linux/dcache.h"
                              ;
}
# 492 "include/linux/dcache.h"
static inline bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != 
# 494 "include/linux/dcache.h" 3 4
                          ((void *)0)
# 494 "include/linux/dcache.h"
                              ;
}

static inline int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 524 "include/linux/dcache.h"
static inline struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 536 "include/linux/dcache.h"
static inline struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
}
# 551 "include/linux/dcache.h"
static inline struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 568 "include/linux/dcache.h"
static inline struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "include/linux/dcache.h"
static inline struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (unlikely(dentry->d_flags & 0x04000000))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 599 "include/linux/dcache.h"
static inline struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, 
# 602 "include/linux/dcache.h" 3 4
                                                        ((void *)0)
# 602 "include/linux/dcache.h"
                                                            ));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "include/linux/fs.h" 2
# 1 "include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} __attribute__((__designated_init__));

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "include/linux/fs.h" 2



# 1 "include/linux/list_lru.h" 1
# 13 "include/linux/list_lru.h"
# 1 "include/linux/shrinker.h" 1
# 12 "include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};
# 91 "include/linux/shrinker.h"
extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
# 14 "include/linux/list_lru.h" 2

struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} ;

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 int shrinker_id;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 4); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY]))))
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 4); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY])))) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "include/linux/fs.h" 2

# 1 "include/linux/radix-tree.h" 1
# 19 "include/linux/radix-tree.h"
# 1 "include/linux/xarray.h" 1
# 52 "include/linux/xarray.h"
static inline void *xa_mk_value(unsigned long v)
{
 ({ int __ret_warn_on = !!((long)v < 0); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/xarray.h\"; .popsection; .long 14472b - 14470b; .short 54; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return (void *)((v << 1) | 1);
}
# 65 "include/linux/xarray.h"
static inline unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "include/linux/xarray.h"
static inline bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "include/linux/xarray.h"
static inline void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "include/linux/xarray.h"
static inline void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "include/linux/xarray.h"
static inline unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "include/linux/xarray.h"
static inline void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "include/linux/xarray.h"
static inline unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "include/linux/xarray.h"
static inline bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "include/linux/xarray.h"
static inline bool xa_is_zero(const void *entry)
{
 return unlikely(entry == xa_mk_internal(257));
}
# 199 "include/linux/xarray.h"
static inline bool xa_is_err(const void *entry)
{
 return unlikely(xa_is_internal(entry) &&
   entry >= xa_mk_internal(-4095));
}
# 217 "include/linux/xarray.h"
static inline int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 237 "include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};







typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 294 "include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 349 "include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 376 "include/linux/xarray.h"
static inline void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { spinlock_check(&xa->xa_lock); *(&xa->xa_lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 xa->xa_flags = flags;
 xa->xa_head = 
# 380 "include/linux/xarray.h" 3 4
              ((void *)0)
# 380 "include/linux/xarray.h"
                  ;
}
# 391 "include/linux/xarray.h"
static inline void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 403 "include/linux/xarray.h"
static inline bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == 
# 405 "include/linux/xarray.h" 3 4
                      ((void *)0)
# 405 "include/linux/xarray.h"
                          ;
}
# 416 "include/linux/xarray.h"
static inline bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (23 + 0)) << ( unsigned)(mark)));
}
# 556 "include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 583 "include/linux/xarray.h"
static inline void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 609 "include/linux/xarray.h"
static inline void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 634 "include/linux/xarray.h"
static inline void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 658 "include/linux/xarray.h"
static inline void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 684 "include/linux/xarray.h"
static inline void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 711 "include/linux/xarray.h"
static inline void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 738 "include/linux/xarray.h"
static inline void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 767 "include/linux/xarray.h"
static inline int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 796 "include/linux/xarray.h"
static inline int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 825 "include/linux/xarray.h"
static inline int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 854 "include/linux/xarray.h"
static inline __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 883 "include/linux/xarray.h"
static inline int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 912 "include/linux/xarray.h"
static inline int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 945 "include/linux/xarray.h"
static inline int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 978 "include/linux/xarray.h"
static inline int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 1011 "include/linux/xarray.h"
static inline int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1041 "include/linux/xarray.h"
static inline __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, 
# 1044 "include/linux/xarray.h" 3 4
                                    ((void *)0)
# 1044 "include/linux/xarray.h"
                                        , xa_mk_internal(257), gfp));
}
# 1059 "include/linux/xarray.h"
static inline __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, 
# 1062 "include/linux/xarray.h" 3 4
                                       ((void *)0)
# 1062 "include/linux/xarray.h"
                                           , xa_mk_internal(257), gfp));
}
# 1077 "include/linux/xarray.h"
static inline __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, 
# 1080 "include/linux/xarray.h" 3 4
                                        ((void *)0)
# 1080 "include/linux/xarray.h"
                                            , xa_mk_internal(257), gfp));
}
# 1092 "include/linux/xarray.h"
static inline void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), 
# 1094 "include/linux/xarray.h" 3 4
                                     ((void *)0)
# 1094 "include/linux/xarray.h"
                                         , 0);
}
# 1124 "include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (
# 1137 "include/linux/xarray.h" 3 4
                                  32
# 1137 "include/linux/xarray.h"
                                  ) - 1) / (
# 1137 "include/linux/xarray.h" 3 4
                                  32
# 1137 "include/linux/xarray.h"
                                  ))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (
# 1138 "include/linux/xarray.h" 3 4
                                   32
# 1138 "include/linux/xarray.h"
                                   ) - 1) / (
# 1138 "include/linux/xarray.h" 3 4
                                   32
# 1138 "include/linux/xarray.h"
                                   ))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1164 "include/linux/xarray.h"
static inline void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((xa->xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((xa->xa_head)))) *)&((xa->xa_head))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(xa->xa_head)) *)(________p1)); })
                                    ;
}


static inline void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); })
                                    ;
}


static inline void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ do { } while (0); (*(const volatile typeof( _Generic(((node->slots[offset])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->slots[offset])))) *)&((node->slots[offset]))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->slots[offset])) *)(________p1)); })
                                    ;
}


static inline void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); })
                                    ;
}


static inline struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((node->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->parent)))) *)&((node->parent))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->parent)) *)(________p1)); })
                                    ;
}


static inline struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->parent)) *)((node->parent))); })
                                    ;
}


static inline void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline bool xa_is_sibling(const void *entry)
{
 return 1 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1261 "include/linux/xarray.h"
static inline bool xa_is_retry(const void *entry)
{
 return unlikely(entry == xa_mk_internal(256));
}







static inline bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1289 "include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);

void xa_delete_node(struct xa_node *, xa_update_node_t);
# 1310 "include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1389 "include/linux/xarray.h"
static inline int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1403 "include/linux/xarray.h"
static inline void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1469 "include/linux/xarray.h"
static inline void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1486 "include/linux/xarray.h"
static inline bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);


int xa_get_order(struct xarray *, unsigned long index);
void xas_split(struct xa_state *, void *entry, unsigned int order);
void xas_split_alloc(struct xa_state *, void *entry, unsigned int order, gfp_t);
# 1548 "include/linux/xarray.h"
static inline void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 char offset;

 if (!node)
  return xa_head(xas->xa);
 if (1) {
  offset = (xas->xa_index >> node->shift) & ((1UL << (0 ? 4 : 6)) - 1);
  entry = xa_entry(xas->xa, node, offset);
  if (!xa_is_sibling(entry))
   return entry;
  offset = xa_to_sibling(entry);
 } else {
  offset = xas->xa_offset;
 }
 return xa_entry(xas->xa, node, offset);
}
# 1577 "include/linux/xarray.h"
static inline void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{

 xas->xa_index = order < 
# 1593 "include/linux/xarray.h" 3 4
                        32 
# 1593 "include/linux/xarray.h"
                                      ? (index >> order) << order : 0;
 xas->xa_shift = order - (order % (0 ? 4 : 6));
 xas->xa_sibs = (1 << (order % (0 ? 4 : 6))) - 1;
 xas->xa_node = ((struct xa_node *)3UL);




}
# 1611 "include/linux/xarray.h"
static inline void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1627 "include/linux/xarray.h"
static inline void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (unlikely(xas_not_node(node) || node->shift ||
   xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))))
  return xas_find(xas, max);

 do {
  if (unlikely(xas->xa_index >= max))
   return xas_find(xas, max);
  if (unlikely(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (unlikely(xa_is_internal(entry)))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 
# 1660 "include/linux/xarray.h" 3 4
                     32
# 1660 "include/linux/xarray.h"
                                  ) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return find_next_bit(addr, (1UL << (0 ? 4 : 6)), offset);
}
# 1684 "include/linux/xarray.h"
static inline void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 unsigned int offset;

 if (unlikely(xas_not_node(node) || node->shift))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return 
# 1697 "include/linux/xarray.h" 3 4
        ((void *)0)
# 1697 "include/linux/xarray.h"
            ;
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 entry = xa_entry(xas->xa, node, offset);
 if (!entry)
  return xas_find_marked(xas, max, mark);
 return entry;
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1764 "include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1783 "include/linux/xarray.h"
static inline void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (unlikely(xas_not_node(node) || node->shift ||
    xas->xa_offset == 0))
  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1812 "include/linux/xarray.h"
static inline void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (unlikely(xas_not_node(node) || node->shift ||
    xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)))
  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 20 "include/linux/radix-tree.h" 2
# 1 "include/linux/local_lock.h" 1




# 1 "include/linux/local_lock_internal.h" 1
# 9 "include/linux/local_lock_internal.h"
typedef struct {




} local_lock_t;
# 55 "include/linux/local_lock_internal.h"
static inline void local_lock_acquire(local_lock_t *l) { }
static inline void local_lock_release(local_lock_t *l) { }
# 6 "include/linux/local_lock.h" 2
# 21 "include/linux/radix-tree.h" 2





struct radix_tree_preload {
 local_lock_t lock;
 unsigned nr;

 struct xa_node *nodes;
};
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct radix_tree_preload) radix_tree_preloads;
# 53 "include/linux/radix-tree.h"
static inline bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 84 "include/linux/radix-tree.h"
static inline bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == 
# 86 "include/linux/radix-tree.h" 3 4
                        ((void *)0)
# 86 "include/linux/radix-tree.h"
                            ;
}
# 104 "include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 175 "include/linux/radix-tree.h"
static inline void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((*slot)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*slot)))) *)&((*slot))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 189 "include/linux/radix-tree.h"
static inline void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0 && (!((lockdep_is_held(treelock))))); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 202 "include/linux/radix-tree.h"
static inline int radix_tree_deref_retry(void *arg)
{
 return unlikely(radix_tree_is_internal_node(arg));
}






static inline int radix_tree_exception(void *arg)
{
 return unlikely((unsigned long)arg & 3UL);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline void radix_tree_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))
# 258 "include/linux/radix-tree.h" 3 4
((void *)0)
# 258 "include/linux/radix-tree.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock), (__kern_my_cpu_offset())); })); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0); } while (0);
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 278 "include/linux/radix-tree.h"
static 
# 278 "include/linux/radix-tree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 278 "include/linux/radix-tree.h"
                      void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 289 "include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return 
# 291 "include/linux/radix-tree.h" 3 4
       ((void *)0)
# 291 "include/linux/radix-tree.h"
           ;
}
# 307 "include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 320 "include/linux/radix-tree.h"
static inline void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 337 "include/linux/radix-tree.h"
static inline __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return 
# 342 "include/linux/radix-tree.h" 3 4
       ((void *)0)
# 342 "include/linux/radix-tree.h"
           ;
}

static inline unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 361 "include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static 
# 370 "include/linux/radix-tree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 370 "include/linux/radix-tree.h"
                      long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 395 "include/linux/radix-tree.h"
static 
# 395 "include/linux/radix-tree.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 395 "include/linux/radix-tree.h"
                      void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (unlikely(!iter->tags))
   return 
# 401 "include/linux/radix-tree.h" 3 4
         ((void *)0)
# 401 "include/linux/radix-tree.h"
             ;
  if (likely(iter->tags & 1ul)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (likely(*slot))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return 
# 431 "include/linux/radix-tree.h" 3 4
       ((void *)0)
# 431 "include/linux/radix-tree.h"
           ;

 found:
 return slot;
}
# 16 "include/linux/fs.h" 2
# 24 "include/linux/fs.h"
# 1 "include/linux/capability.h" 1
# 16 "include/linux/capability.h"
# 1 "include/uapi/linux/capability.h" 1
# 39 "include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "include/linux/capability.h"
static inline kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "include/linux/capability.h"
static inline bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
extern bool ns_capable_setid(struct user_namespace *ns, int cap);
# 250 "include/linux/capability.h"
bool privileged_wrt_inode_uidgid(struct user_namespace *ns,
     struct user_namespace *mnt_userns,
     const struct inode *inode);
bool capable_wrt_inode_uidgid(struct user_namespace *mnt_userns,
         const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
static inline bool perfmon_capable(void)
{
 return capable(38) || capable(21);
}

static inline bool bpf_capable(void)
{
 return capable(39) || capable(21);
}

static inline bool checkpoint_restore_ns_capable(struct user_namespace *ns)
{
 return ns_capable(ns, 40) ||
  ns_capable(ns, 21);
}


int get_vfs_caps_from_disk(struct user_namespace *mnt_userns,
      const struct dentry *dentry,
      struct cpu_vfs_cap_data *cpu_caps);

int cap_convert_nscap(struct user_namespace *mnt_userns, struct dentry *dentry,
        const void **ivalue, size_t size);
# 25 "include/linux/fs.h" 2
# 1 "include/linux/semaphore.h" 1
# 15 "include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "include/linux/semaphore.h"
static inline void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "include/linux/fs.h" 2
# 1 "include/linux/fcntl.h" 1





# 1 "include/uapi/linux/fcntl.h" 1




# 1 "arch/arm64/include/uapi/asm/fcntl.h" 1
# 28 "arch/arm64/include/uapi/asm/fcntl.h"
# 1 "include/uapi/asm-generic/fcntl.h" 1
# 165 "include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 205 "include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 29 "arch/arm64/include/uapi/asm/fcntl.h" 2
# 6 "include/uapi/linux/fcntl.h" 2
# 1 "include/uapi/linux/openat2.h" 1
# 19 "include/uapi/linux/openat2.h"
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 7 "include/uapi/linux/fcntl.h" 2
# 7 "include/linux/fcntl.h" 2
# 27 "include/linux/fs.h" 2



# 1 "include/linux/migrate_mode.h" 1
# 15 "include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 31 "include/linux/fs.h" 2


# 1 "include/linux/percpu-rwsem.h" 1






# 1 "include/linux/rcuwait.h" 1





# 1 "include/linux/sched/signal.h" 1





# 1 "include/linux/signal.h" 1
# 9 "include/linux/signal.h"
struct task_struct;


extern int print_fatal_signals;

static inline void copy_siginfo(kernel_siginfo_t *to,
    const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*to));
}

static inline void clear_siginfo(kernel_siginfo_t *info)
{
 memset(info, 0, sizeof(*info));
}



static inline void copy_siginfo_to_external(siginfo_t *to,
         const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*from));
 memset(((char *)to) + sizeof(struct kernel_siginfo), 0,
  (sizeof(struct siginfo) - sizeof(struct kernel_siginfo)));
}

int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);

enum siginfo_layout {
 SIL_KILL,
 SIL_TIMER,
 SIL_POLL,
 SIL_FAULT,
 SIL_FAULT_TRAPNO,
 SIL_FAULT_MCEERR,
 SIL_FAULT_BNDERR,
 SIL_FAULT_PKUERR,
 SIL_PERF_EVENT,
 SIL_CHLD,
 SIL_RT,
 SIL_SYS,
};

enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
# 64 "include/linux/signal.h"
static inline void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 
# 67 "include/linux/signal.h" 3 4
    64
# 67 "include/linux/signal.h"
    ) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 
# 70 "include/linux/signal.h" 3 4
                64
# 70 "include/linux/signal.h"
                         ] |= 1UL << (sig % 
# 70 "include/linux/signal.h" 3 4
                                            64
# 70 "include/linux/signal.h"
                                                     );
}

static inline void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 
# 76 "include/linux/signal.h" 3 4
    64
# 76 "include/linux/signal.h"
    ) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 
# 79 "include/linux/signal.h" 3 4
                64
# 79 "include/linux/signal.h"
                         ] &= ~(1UL << (sig % 
# 79 "include/linux/signal.h" 3 4
                                              64
# 79 "include/linux/signal.h"
                                                       ));
}

static inline int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 
# 85 "include/linux/signal.h" 3 4
    64
# 85 "include/linux/signal.h"
    ) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 
# 88 "include/linux/signal.h" 3 4
                            64
# 88 "include/linux/signal.h"
                                     ] >> (sig % 
# 88 "include/linux/signal.h" 3 4
                                                 64
# 88 "include/linux/signal.h"
                                                          ));
}



static inline int sigisemptyset(sigset_t *set)
{
 switch ((64 / 
# 95 "include/linux/signal.h" 3 4
        64
# 95 "include/linux/signal.h"
        )) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { } while (0);
  return 0;
 }
}

static inline int sigequalsets(const sigset_t *set1, const sigset_t *set2)
{
 switch ((64 / 
# 111 "include/linux/signal.h" 3 4
        64
# 111 "include/linux/signal.h"
        )) {
 case 4:
  return (set1->sig[3] == set2->sig[3]) &&
   (set1->sig[2] == set2->sig[2]) &&
   (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 2:
  return (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 1:
  return set1->sig[0] == set2->sig[0];
 }
 return 0;
}
# 157 "include/linux/signal.h"
static inline void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 
# 157 "include/linux/signal.h" 3 4
64
# 157 "include/linux/signal.h"
)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { } while (0); } }


static inline void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 
# 160 "include/linux/signal.h" 3 4
64
# 160 "include/linux/signal.h"
)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { } while (0); } }


static inline void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 
# 163 "include/linux/signal.h" 3 4
64
# 163 "include/linux/signal.h"
)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { } while (0); } }
# 187 "include/linux/signal.h"
static inline void signotset(sigset_t *set) { switch ((64 / 
# 187 "include/linux/signal.h" 3 4
64
# 187 "include/linux/signal.h"
)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); __attribute__((__fallthrough__)); case 2: set->sig[1] = (~(set->sig[1])); __attribute__((__fallthrough__)); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { } while (0); } }




static inline void sigemptyset(sigset_t *set)
{
 switch ((64 / 
# 194 "include/linux/signal.h" 3 4
        64
# 194 "include/linux/signal.h"
        )) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline void sigfillset(sigset_t *set)
{
 switch ((64 / 
# 207 "include/linux/signal.h" 3 4
        64
# 207 "include/linux/signal.h"
        )) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 
# 238 "include/linux/signal.h" 3 4
        64
# 238 "include/linux/signal.h"
        )) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 
# 240 "include/linux/signal.h" 3 4
                                       64
# 240 "include/linux/signal.h"
                                       )-1));
  break;
 case 2: set->sig[1] = 0;
  break;
 case 1: ;
 }
}

static inline void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 
# 251 "include/linux/signal.h" 3 4
        64
# 251 "include/linux/signal.h"
        )) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 
# 253 "include/linux/signal.h" 3 4
                                        64
# 253 "include/linux/signal.h"
                                        )-1));
  break;
 case 2: set->sig[1] = -1;
  break;
 case 1: ;
 }
}



static inline void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;
enum pid_type;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
    struct task_struct *p, enum pid_type type);
extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
          struct task_struct *p, enum pid_type type);
extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

extern bool get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);




static inline void allow_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)2));
}

static inline void allow_kernel_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)3));
}

static inline void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

extern bool unhandled_signal(struct task_struct *tsk, int sig);
# 454 "include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 470 "include/linux/signal.h"
struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 7 "include/linux/sched/signal.h" 2

# 1 "include/linux/sched/jobctl.h" 1






struct task_struct;
# 35 "include/linux/sched/jobctl.h"
extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
# 9 "include/linux/sched/signal.h" 2
# 1 "include/linux/sched/task.h" 1
# 11 "include/linux/sched/task.h"
# 1 "include/linux/uaccess.h" 1




# 1 "include/linux/fault-inject-usercopy.h" 1
# 18 "include/linux/fault-inject-usercopy.h"
static inline bool should_fail_usercopy(void) { return false; }
# 6 "include/linux/uaccess.h" 2





# 1 "arch/arm64/include/asm/uaccess.h" 1
# 11 "arch/arm64/include/asm/uaccess.h"
# 1 "arch/arm64/include/asm/kernel-pgtable.h" 1
# 12 "arch/arm64/include/asm/uaccess.h" 2
# 23 "arch/arm64/include/asm/uaccess.h"
# 1 "arch/arm64/include/asm/mte.h" 1







# 1 "arch/arm64/include/asm/compiler.h" 1
# 9 "arch/arm64/include/asm/mte.h" 2




# 1 "include/linux/bitfield.h" 1
# 112 "include/linux/bitfield.h"
extern void
__field_overflow(void);
extern void
__bad_mask(void);
static 
# 116 "include/linux/bitfield.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 116 "include/linux/bitfield.h"
                      u64 field_multiplier(u64 field)
{
 if ((field | (field - 1)) & ((field | (field - 1)) + 1))
  __bad_mask();
 return field & -field;
}
static 
# 122 "include/linux/bitfield.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 122 "include/linux/bitfield.h"
                      u64 field_mask(u64 field)
{
 return field / field_multiplier(field);
}
# 152 "include/linux/bitfield.h"
static 
# 152 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 152 "include/linux/bitfield.h"
__u8 u8_encode_bits(u8 v, u8 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static 
# 152 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 152 "include/linux/bitfield.h"
__u8 u8_replace_bits(__u8 old, u8 val, u8 field) { return (old & ~(field)) | u8_encode_bits(val, field); } static 
# 152 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 152 "include/linux/bitfield.h"
void u8p_replace_bits(__u8 *p, u8 val, u8 field) { *p = (*p & ~(field)) | u8_encode_bits(val, field); } static 
# 152 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 152 "include/linux/bitfield.h"
u8 u8_get_bits(__u8 v, u8 field) { return ((v) & field)/field_multiplier(field); }
static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
__le16 le16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le16)(__u16)((v & field_mask(field)) * field_multiplier(field))); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
__le16 le16_replace_bits(__le16 old, u16 val, u16 field) { return (old & ~(( __le16)(__u16)(field))) | le16_encode_bits(val, field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
void le16p_replace_bits(__le16 *p, u16 val, u16 field) { *p = (*p & ~(( __le16)(__u16)(field))) | le16_encode_bits(val, field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
u16 le16_get_bits(__le16 v, u16 field) { return ((( __u16)(__le16)(v)) & field)/field_multiplier(field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
__be16 be16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be16)(__builtin_constant_p((__u16)(((v & field_mask(field)) * field_multiplier(field)))) ? ((__u16)( (((__u16)(((v & field_mask(field)) * field_multiplier(field))) & (__u16)0x00ffU) << 8) | (((__u16)(((v & field_mask(field)) * field_multiplier(field))) & (__u16)0xff00U) >> 8))) : __fswab16(((v & field_mask(field)) * field_multiplier(field))))); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
__be16 be16_replace_bits(__be16 old, u16 val, u16 field) { return (old & ~(( __be16)(__builtin_constant_p((__u16)((field))) ? ((__u16)( (((__u16)((field)) & (__u16)0x00ffU) << 8) | (((__u16)((field)) & (__u16)0xff00U) >> 8))) : __fswab16((field))))) | be16_encode_bits(val, field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
void be16p_replace_bits(__be16 *p, u16 val, u16 field) { *p = (*p & ~(( __be16)(__builtin_constant_p((__u16)((field))) ? ((__u16)( (((__u16)((field)) & (__u16)0x00ffU) << 8) | (((__u16)((field)) & (__u16)0xff00U) >> 8))) : __fswab16((field))))) | be16_encode_bits(val, field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
u16 be16_get_bits(__be16 v, u16 field) { return ((__builtin_constant_p((__u16)(( __u16)(__be16)(v))) ? ((__u16)( (((__u16)(( __u16)(__be16)(v)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(v)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(v))) & field)/field_multiplier(field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
__u16 u16_encode_bits(u16 v, u16 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
__u16 u16_replace_bits(__u16 old, u16 val, u16 field) { return (old & ~(field)) | u16_encode_bits(val, field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
void u16p_replace_bits(__u16 *p, u16 val, u16 field) { *p = (*p & ~(field)) | u16_encode_bits(val, field); } static 
# 153 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 153 "include/linux/bitfield.h"
u16 u16_get_bits(__u16 v, u16 field) { return ((v) & field)/field_multiplier(field); }
static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
__le32 le32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le32)(__u32)((v & field_mask(field)) * field_multiplier(field))); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
__le32 le32_replace_bits(__le32 old, u32 val, u32 field) { return (old & ~(( __le32)(__u32)(field))) | le32_encode_bits(val, field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
void le32p_replace_bits(__le32 *p, u32 val, u32 field) { *p = (*p & ~(( __le32)(__u32)(field))) | le32_encode_bits(val, field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
u32 le32_get_bits(__le32 v, u32 field) { return ((( __u32)(__le32)(v)) & field)/field_multiplier(field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
__be32 be32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be32)(__builtin_constant_p((__u32)(((v & field_mask(field)) * field_multiplier(field)))) ? ((__u32)( (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0x000000ffUL) << 24) | (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((v & field_mask(field)) * field_multiplier(field))) & (__u32)0xff000000UL) >> 24))) : __fswab32(((v & field_mask(field)) * field_multiplier(field))))); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
__be32 be32_replace_bits(__be32 old, u32 val, u32 field) { return (old & ~(( __be32)(__builtin_constant_p((__u32)((field))) ? ((__u32)( (((__u32)((field)) & (__u32)0x000000ffUL) << 24) | (((__u32)((field)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((field)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((field)) & (__u32)0xff000000UL) >> 24))) : __fswab32((field))))) | be32_encode_bits(val, field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
void be32p_replace_bits(__be32 *p, u32 val, u32 field) { *p = (*p & ~(( __be32)(__builtin_constant_p((__u32)((field))) ? ((__u32)( (((__u32)((field)) & (__u32)0x000000ffUL) << 24) | (((__u32)((field)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((field)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((field)) & (__u32)0xff000000UL) >> 24))) : __fswab32((field))))) | be32_encode_bits(val, field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
u32 be32_get_bits(__be32 v, u32 field) { return ((__builtin_constant_p((__u32)(( __u32)(__be32)(v))) ? ((__u32)( (((__u32)(( __u32)(__be32)(v)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(v)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(v)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(v)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(v))) & field)/field_multiplier(field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
__u32 u32_encode_bits(u32 v, u32 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
__u32 u32_replace_bits(__u32 old, u32 val, u32 field) { return (old & ~(field)) | u32_encode_bits(val, field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
void u32p_replace_bits(__u32 *p, u32 val, u32 field) { *p = (*p & ~(field)) | u32_encode_bits(val, field); } static 
# 154 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 154 "include/linux/bitfield.h"
u32 u32_get_bits(__u32 v, u32 field) { return ((v) & field)/field_multiplier(field); }
static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
__le64 le64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __le64)(__u64)((v & field_mask(field)) * field_multiplier(field))); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
__le64 le64_replace_bits(__le64 old, u64 val, u64 field) { return (old & ~(( __le64)(__u64)(field))) | le64_encode_bits(val, field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
void le64p_replace_bits(__le64 *p, u64 val, u64 field) { *p = (*p & ~(( __le64)(__u64)(field))) | le64_encode_bits(val, field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
u64 le64_get_bits(__le64 v, u64 field) { return ((( __u64)(__le64)(v)) & field)/field_multiplier(field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
__be64 be64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return (( __be64)(__builtin_constant_p((__u64)(((v & field_mask(field)) * field_multiplier(field)))) ? ((__u64)( (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((v & field_mask(field)) * field_multiplier(field))) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((v & field_mask(field)) * field_multiplier(field))))); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
__be64 be64_replace_bits(__be64 old, u64 val, u64 field) { return (old & ~(( __be64)(__builtin_constant_p((__u64)((field))) ? ((__u64)( (((__u64)((field)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((field)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((field)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((field)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((field)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((field)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((field)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((field)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((field))))) | be64_encode_bits(val, field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
void be64p_replace_bits(__be64 *p, u64 val, u64 field) { *p = (*p & ~(( __be64)(__builtin_constant_p((__u64)((field))) ? ((__u64)( (((__u64)((field)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((field)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((field)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((field)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((field)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((field)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((field)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((field)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((field))))) | be64_encode_bits(val, field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
u64 be64_get_bits(__be64 v, u64 field) { return ((__builtin_constant_p((__u64)(( __u64)(__be64)(v))) ? ((__u64)( (((__u64)(( __u64)(__be64)(v)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(v)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(v))) & field)/field_multiplier(field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
__u64 u64_encode_bits(u64 v, u64 field) { if (__builtin_constant_p(v) && (v & ~field_mask(field))) __field_overflow(); return ((v & field_mask(field)) * field_multiplier(field)); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
__u64 u64_replace_bits(__u64 old, u64 val, u64 field) { return (old & ~(field)) | u64_encode_bits(val, field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
void u64p_replace_bits(__u64 *p, u64 val, u64 field) { *p = (*p & ~(field)) | u64_encode_bits(val, field); } static 
# 155 "include/linux/bitfield.h" 3 4
__inline __attribute__ ((__always_inline__)) 
# 155 "include/linux/bitfield.h"
u64 u64_get_bits(__u64 v, u64 field) { return ((v) & field)/field_multiplier(field); }
# 14 "arch/arm64/include/asm/mte.h" 2





extern u64 gcr_kernel_excl;

void mte_clear_page_tags(void *addr);
unsigned long mte_copy_tags_from_user(void *to, const void *from,
          unsigned long n);
unsigned long mte_copy_tags_to_user(void *to, void *from,
        unsigned long n);
int mte_save_tags(struct page *page);
void mte_save_page_tags(const void *page_addr, void *tag_storage);
bool mte_restore_tags(swp_entry_t entry, struct page *page);
void mte_restore_page_tags(void *page_addr, const void *tag_storage);
void mte_invalidate_tags(int type, unsigned long offset);
void mte_invalidate_tags_area(int type);
void *mte_allocate_tag_storage(void);
void mte_free_tag_storage(char *storage);
# 56 "arch/arm64/include/asm/mte.h"
static inline void mte_sync_tags(pte_t *ptep, pte_t pte)
{
}
static inline void mte_copy_page_tags(void *kto, const void *kfrom)
{
}
static inline void mte_thread_init_user(void)
{
}
static inline void mte_thread_switch(struct task_struct *next)
{
}
static inline void mte_suspend_enter(void)
{
}
static inline void mte_suspend_exit(void)
{
}
static inline long set_mte_ctrl(struct task_struct *task, unsigned long arg)
{
 return 0;
}
static inline long get_mte_ctrl(struct task_struct *task)
{
 return 0;
}
static inline int mte_ptrace_copy_tags(struct task_struct *child,
           long request, unsigned long addr,
           unsigned long data)
{
 return -
# 86 "arch/arm64/include/asm/mte.h" 3 4
        5
# 86 "arch/arm64/include/asm/mte.h"
           ;
}
# 120 "arch/arm64/include/asm/mte.h"
static inline bool system_uses_mte_async_mode(void)
{
 return false;
}
static inline void mte_check_tfsr_el1(void)
{
}
static inline void mte_check_tfsr_entry(void)
{
}
static inline void mte_check_tfsr_exit(void)
{
}
# 24 "arch/arm64/include/asm/uaccess.h" 2


# 1 "arch/arm64/include/asm/extable.h" 1
# 18 "arch/arm64/include/asm/extable.h"
struct exception_table_entry
{
 int insn, fixup;
};



static inline bool in_bpf_jit(struct pt_regs *regs)
{
 if (!1)
  return false;

 return regs->pc >= ((-((((1UL))) << ((((48))) - 1)))) &&
        regs->pc < (((-((((1UL))) << ((((48))) - 1)))) + (0x08000000));
}


int arm64_bpf_fixup_exception(const struct exception_table_entry *ex,
         struct pt_regs *regs);
# 46 "arch/arm64/include/asm/extable.h"
extern int fixup_exception(struct pt_regs *regs);
# 27 "arch/arm64/include/asm/uaccess.h" 2
# 37 "arch/arm64/include/asm/uaccess.h"
static inline unsigned long __range_ok(const void *addr, unsigned long size)
{
 unsigned long ret, limit = ((((1UL))) << (48)) - 1;






 if (1 &&
     (get_current()->flags & 0x00200000 || test_thread_flag(26)))
  addr = ({ u64 __addr = ( u64)(addr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(addr))__addr; });

 (void)0;
 asm volatile(


 "	adds	%0, %3, %2\n"

 "	csel	%1, xzr, %1, hi\n"



 "	csinv	%0, %0, xzr, cc\n"



 "	sbcs	xzr, %0, %1\n"
 "	cset	%0, ls\n"
 : "=&r" (ret), "+r" (limit) : "Ir" (size), "0" (addr) : "cc");

 return ret;
}
# 140 "arch/arm64/include/asm/uaccess.h"
static inline bool uaccess_ttbr0_disable(void)
{
 return false;
}

static inline bool uaccess_ttbr0_enable(void)
{
 return false;
}


static inline void __uaccess_disable_hw_pan(void)
{
 asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "24" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"
                    );
}

static inline void __uaccess_enable_hw_pan(void)
{
 asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "24" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"
                    );
}
# 180 "arch/arm64/include/asm/uaccess.h"
static inline void __uaccess_disable_tco(void)
{
 asm volatile(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "35" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((3) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"
                                     );
}

static inline void __uaccess_enable_tco(void)
{
 asm volatile(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "35" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" ".inst " "(0xd500401f | ((3) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"
                                     );
}






static inline void __uaccess_disable_tco_async(void)
{
 if (system_uses_mte_async_mode())
   __uaccess_disable_tco();
}

static inline void __uaccess_enable_tco_async(void)
{
 if (system_uses_mte_async_mode())
  __uaccess_enable_tco();
}

static inline void uaccess_disable_privileged(void)
{
 __uaccess_disable_tco();

 if (uaccess_ttbr0_disable())
  return;

 __uaccess_enable_hw_pan();
}

static inline void uaccess_enable_privileged(void)
{
 __uaccess_enable_tco();

 if (uaccess_ttbr0_enable())
  return;

 __uaccess_disable_hw_pan();
}







static inline void *__uaccess_mask_ptr(const void *ptr)
{
 void *safe_ptr;

 asm volatile(
 "	bics	xzr, %3, %2\n"
 "	csel	%0, %1, xzr, eq\n"
 : "=&r" (safe_ptr)
 : "r" (ptr), "r" (((((1UL))) << (48)) - 1),
   "r" (({ u64 __addr = ( u64)(ptr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(ptr))__addr; }))
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return safe_ptr;
}
# 411 "arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_from_user(void *to, const void *from, unsigned long n);
# 422 "arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_to_user(void *to, const void *from, unsigned long n);
# 433 "arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_in_user(void *to, const void *from, unsigned long n);
# 447 "arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_clear_user(void *to, unsigned long n);
static inline unsigned long __attribute__((__warn_unused_result__)) __clear_user(void *to, unsigned long n)
{
 if (__range_ok(to, n)) {
  uaccess_ttbr0_enable();
  n = __arch_clear_user(__uaccess_mask_ptr(to), n);
  uaccess_ttbr0_disable();
 }
 return n;
}


extern long strncpy_from_user(char *dest, const char *src, long count);

extern __attribute__((__warn_unused_result__)) long strnlen_user(const char *str, long n);
# 12 "include/linux/uaccess.h" 2
# 32 "include/linux/uaccess.h"
typedef struct {

} mm_segment_t;
# 43 "include/linux/uaccess.h"
static inline mm_segment_t force_uaccess_begin(void)
{
 return (mm_segment_t) { };
}

static inline void force_uaccess_end(mm_segment_t oldfs)
{
}
# 98 "include/linux/uaccess.h"
static 
# 98 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 98 "include/linux/uaccess.h"
                      __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return ({ unsigned long __acfu_ret; uaccess_ttbr0_enable(); __acfu_ret = __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __acfu_ret; });
}

static 
# 106 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 106 "include/linux/uaccess.h"
                      __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return ({ unsigned long __acfu_ret; uaccess_ttbr0_enable(); __acfu_ret = __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __acfu_ret; });
}
# 130 "include/linux/uaccess.h"
static 
# 130 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 130 "include/linux/uaccess.h"
                      __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return ({ unsigned long __actu_ret; uaccess_ttbr0_enable(); __actu_ret = __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); uaccess_ttbr0_disable(); __actu_ret; });
}

static 
# 140 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 140 "include/linux/uaccess.h"
                      __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return ({ unsigned long __actu_ret; uaccess_ttbr0_enable(); __actu_ret = __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); uaccess_ttbr0_disable(); __actu_ret; });
}


static inline __attribute__((__warn_unused_result__)) unsigned long
_copy_from_user(void *to, const void *from, unsigned long n)
{
 unsigned long res = n;
 might_fault();
 if (!should_fail_usercopy() && likely(__range_ok(from, n))) {
  instrument_copy_from_user(to, from, n);
  res = ({ unsigned long __acfu_ret; uaccess_ttbr0_enable(); __acfu_ret = __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __acfu_ret; });
 }
 if (unlikely(res))
  memset(to + (n - res), 0, res);
 return res;
}






static inline __attribute__((__warn_unused_result__)) unsigned long
_copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 if (__range_ok(to, n)) {
  instrument_copy_to_user(to, from, n);
  n = ({ unsigned long __actu_ret; uaccess_ttbr0_enable(); __actu_ret = __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); uaccess_ttbr0_disable(); __actu_ret; });
 }
 return n;
}





static 
# 188 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 188 "include/linux/uaccess.h"
                      unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (likely(check_copy_size(to, n, false)))
  n = _copy_from_user(to, from, n);
 return n;
}

static 
# 196 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 196 "include/linux/uaccess.h"
                      unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (likely(check_copy_size(from, n, true)))
  n = _copy_to_user(to, from, n);
 return n;
}

static 
# 204 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 204 "include/linux/uaccess.h"
                      unsigned long __attribute__((__warn_unused_result__))
copy_in_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (__range_ok(to, n) && __range_ok(from, n))
  n = ({ unsigned long __aciu_ret; uaccess_ttbr0_enable(); __aciu_ret = __arch_copy_in_user(__uaccess_mask_ptr(to), __uaccess_mask_ptr(from), (n)); uaccess_ttbr0_disable(); __aciu_ret; });
 return n;
}







static inline unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_kernel(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}


static 
# 227 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 227 "include/linux/uaccess.h"
                      void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static 
# 232 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 232 "include/linux/uaccess.h"
                      void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 244 "include/linux/uaccess.h"
static inline void pagefault_disable(void)
{
 pagefault_disabled_inc();




 barrier();
}

static inline void pagefault_enable(void)
{




 barrier();
 pagefault_disabled_dec();
}




static inline bool pagefault_disabled(void)
{
 return get_current()->pagefault_disabled != 0;
}
# 286 "include/linux/uaccess.h"
static inline __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic_nocache(void *to, const void *from,
      unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}



extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
# 344 "include/linux/uaccess.h"
static 
# 344 "include/linux/uaccess.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 344 "include/linux/uaccess.h"
                      __attribute__((__warn_unused_result__)) int
copy_struct_from_user(void *dst, size_t ksize, const void *src,
        size_t usize)
{
 size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID(__x) = (ksize); typeof(usize) __UNIQUE_ID(__y) = (usize); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
 size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID(__x) = (ksize); typeof(usize) __UNIQUE_ID(__y) = (usize); ((__UNIQUE_ID(__x)) > (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); })) - size;


 if (usize < ksize) {
  memset(dst + size, 0, rest);
 } else if (usize > ksize) {
  int ret = check_zeroed_user(src + size, rest);
  if (ret <= 0)
   return ret ?: -
# 357 "include/linux/uaccess.h" 3 4
                 7
# 357 "include/linux/uaccess.h"
                      ;
 }

 if (copy_from_user(dst, src, size))
  return -
# 361 "include/linux/uaccess.h" 3 4
         14
# 361 "include/linux/uaccess.h"
               ;
 return 0;
}

bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);

long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
long notrace copy_to_kernel_nofault(void *dst, const void *src, size_t size);

long copy_from_user_nofault(void *dst, const void *src, size_t size);
long notrace copy_to_user_nofault(void *dst, const void *src,
  size_t size);

long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
  long count);

long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
  long count);
long strnlen_user_nofault(const void *unsafe_addr, long count);
# 401 "include/linux/uaccess.h"
static inline unsigned long user_access_save(void) { return 0UL; }
static inline void user_access_restore(unsigned long flags) { }
# 12 "include/linux/sched/task.h" 2

struct task_struct;
struct rusage;
union thread_union;
struct css_set;




struct kernel_clone_args {
 u64 flags;
 int *pidfd;
 int *child_tid;
 int *parent_tid;
 int exit_signal;
 unsigned long stack;
 unsigned long stack_size;
 unsigned long tls;
 pid_t *set_tid;

 size_t set_tid_size;
 int cgroup;
 int io_thread;
 struct cgroup *cgrp;
 struct css_set *cset;
};







extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern int lockdep_tasklist_lock_is_held(void);

extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);

extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_post_fork(struct task_struct *p);
extern void sched_dead(struct task_struct *p);

void __attribute__((__noreturn__)) do_task_dead(void);

extern void proc_caches_init(void);

extern void fork_init(void);

extern void release_task(struct task_struct * p);

extern int copy_thread(unsigned long, unsigned long, unsigned long,
         struct task_struct *, unsigned long);

extern void flush_thread(void);




static inline void exit_thread(struct task_struct *tsk)
{
}

extern void do_group_exit(int);

extern void exit_files(struct task_struct *);
extern void exit_itimers(struct signal_struct *);

extern pid_t kernel_clone(struct kernel_clone_args *kargs);
struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node);
struct task_struct *fork_idle(int);
struct mm_struct *copy_init_mm(void);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
extern long kernel_wait4(pid_t, int *, int, struct rusage *);
int kernel_wait(pid_t pid, int *stat);

extern void free_task(struct task_struct *tsk);



extern void sched_exec(void);




static inline struct task_struct *get_task_struct(struct task_struct *t)
{
 refcount_inc(&t->usage);
 return t;
}

extern void __put_task_struct(struct task_struct *t);

static inline void put_task_struct(struct task_struct *t)
{
 if (refcount_dec_and_test(&t->usage))
  __put_task_struct(t);
}

static inline void put_task_struct_many(struct task_struct *t, int nr)
{
 if (refcount_sub_and_test(nr, &t->usage))
  __put_task_struct(t);
}

void put_task_struct_rcu_user(struct task_struct *task);
# 145 "include/linux/sched/task.h"
static inline struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return t->stack_vm_area;
}
# 166 "include/linux/sched/task.h"
static inline void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}
# 10 "include/linux/sched/signal.h" 2
# 1 "include/linux/cred.h" 1
# 13 "include/linux/cred.h"
# 1 "include/linux/key.h" 1
# 20 "include/linux/key.h"
# 1 "include/linux/assoc_array.h" 1
# 22 "include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline void assoc_array_init(struct assoc_array *array)
{
 array->root = 
# 56 "include/linux/assoc_array.h" 3 4
              ((void *)0)
# 56 "include/linux/assoc_array.h"
                  ;
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "include/linux/key.h" 2
# 14 "include/linux/cred.h" 2



# 1 "include/linux/sched/user.h" 1







# 1 "include/linux/ratelimit.h" 1
# 9 "include/linux/ratelimit.h"
static inline void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { *((&rs->lock)) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 250),
     10);
}

static inline void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed)
                             ;
  rs->missed = 0;
 }
}

static inline void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;
# 9 "include/linux/sched/user.h" 2




struct user_struct {
 refcount_t __count;
 atomic_t processes;
 atomic_t sigpending;

 atomic_long_t epoll_watches;



 unsigned long mq_bytes;

 unsigned long locked_shm;
 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;






 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[];
} __attribute__((__designated_init__));
# 40 "include/linux/cred.h"
static inline struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 57 "include/linux/cred.h"
extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
extern int groups_search(const struct group_info *, kgid_t);

extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 110 "include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} __attribute__((__designated_init__));

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) cred_init(void);
# 202 "include/linux/cred.h"
static inline void validate_creds(const struct cred *cred)
{
}
static inline void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline void validate_process_creds(void)
{
}


static inline bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 227 "include/linux/cred.h"
static inline struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 246 "include/linux/cred.h"
static inline const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}

static inline const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return 
# 260 "include/linux/cred.h" 3 4
        ((void *)0)
# 260 "include/linux/cred.h"
            ;
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return 
# 262 "include/linux/cred.h" 3 4
        ((void *)0)
# 262 "include/linux/cred.h"
            ;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return cred;
}
# 279 "include/linux/cred.h"
static inline void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  validate_creds(cred);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 389 "include/linux/cred.h"
extern struct user_namespace init_user_ns;
# 11 "include/linux/sched/signal.h" 2
# 20 "include/linux/sched/signal.h"
struct sighand_struct {
 spinlock_t siglock;
 refcount_t count;
 wait_queue_head_t signalfd_wqh;
 struct k_sigaction action[64];
};




struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 u64 ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 u64 expires;
 u64 incr;
};





struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 66 "include/linux/sched/signal.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
};

struct multiprocess_signals {
 sigset_t signal;
 struct hlist_node node;
};
# 82 "include/linux/sched/signal.h"
struct signal_struct {
 refcount_t sigcnt;
 atomic_t live;
 int nr_threads;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 struct hlist_head multiprocess;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;
# 122 "include/linux/sched/signal.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;




 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;



 struct posix_cputimers posix_cputimers;


 struct pid *pids[PIDTYPE_MAX];





 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;


 struct autogroup *autogroup;







 seqlock_t stats_lock;
 u64 utime, stime, cutime, cstime;
 u64 gtime;
 u64 cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 203 "include/linux/sched/signal.h"
 struct rlimit rlim[
# 203 "include/linux/sched/signal.h" 3 4
                   16
# 203 "include/linux/sched/signal.h"
                               ];


 struct pacct_struct pacct;


 struct taskstats *stats;


 unsigned audit_tty;
 struct tty_audit_buf *tty_audit_buf;






 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;

 struct mm_struct *oom_mm;


 struct mutex cred_guard_mutex;





 struct rw_semaphore exec_update_lock;




} __attribute__((__designated_init__));
# 259 "include/linux/sched/signal.h"
static inline void signal_set_stop_flags(struct signal_struct *sig,
      unsigned int flags)
{
 ({ int __ret_warn_on = !!(sig->flags & (0x00000004|0x00000008)); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/sched/signal.h\"; .popsection; .long 14472b - 14470b; .short 262; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
}


static inline int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != 
# 270 "include/linux/sched/signal.h" 3 4
                          ((void *)0)
# 270 "include/linux/sched/signal.h"
                              );
}

extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *task,
     sigset_t *mask, kernel_siginfo_t *info);

static inline int kernel_dequeue_signal(void)
{
 struct task_struct *task = get_current();
 kernel_siginfo_t __info;
 int ret;

 spin_lock_irq(&task->sighand->siglock);
 ret = dequeue_signal(task, &task->blocked, &__info);
 spin_unlock_irq(&task->sighand->siglock);

 return ret;
}

static inline void kernel_signal_stop(void)
{
 spin_lock_irq(&get_current()->sighand->siglock);
 if (get_current()->jobctl & (1UL << 16))
  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave((&get_current()->pi_lock)); } while (0); get_current()->state = ((0x0100 | 0x0004)); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore((&get_current()->pi_lock), flags); } while (0); } while (0);
 spin_unlock_irq(&get_current()->sighand->siglock);

 schedule();
}
# 312 "include/linux/sched/signal.h"
int force_sig_fault_to_task(int sig, int code, void *addr


 , struct task_struct *t);
int force_sig_fault(int sig, int code, void *addr

 );
int send_sig_fault(int sig, int code, void *addr


 , struct task_struct *t);

int force_sig_mceerr(int code, void *, short);
int send_sig_mceerr(int code, void *, short, struct task_struct *);

int force_sig_bnderr(void *addr, void *lower, void *upper);
int force_sig_pkuerr(void *addr, u32 pkey);
int force_sig_perf(void *addr, u32 type, u64 sig_data);

int force_sig_ptrace_errno_trap(int errno, void *addr);

extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern void force_sigsegv(int sig);
extern int force_sig_info(struct kernel_siginfo *);
extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
    const struct cred *);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 0);
 return -513;
}

static inline int task_sigpending(struct task_struct *p)
{
 return unlikely(test_tsk_thread_flag(p,0));
}

static inline int signal_pending(struct task_struct *p)
{





 if (unlikely(test_tsk_thread_flag(p, 6)))
  return 1;
 return task_sigpending(p);
}

static inline int __fatal_signal_pending(struct task_struct *p)
{
 return unlikely(sigismember(&p->pending.signal, 9));
}

static inline int fatal_signal_pending(struct task_struct *p)
{
 return task_sigpending(p) && __fatal_signal_pending(p);
}

static inline int signal_pending_state(long state, struct task_struct *p)
{
 if (!(state & (0x0001 | 0x0100)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 0x0001) || __fatal_signal_pending(p);
}







static inline bool fault_signal_pending(vm_fault_t fault_flags,
     struct pt_regs *regs)
{
 return unlikely((fault_flags & VM_FAULT_RETRY) &&
   (fatal_signal_pending(get_current()) ||
    ((((regs)->pstate & 0x0000000f) == 0x00000000) && signal_pending(get_current()))));
}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);
extern void calculate_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0100 : 0);
}
static inline void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0008 : 0);
}

void task_join_group_stop(struct task_struct *task);
# 449 "include/linux/sched/signal.h"
static inline void set_restore_sigmask(void)
{
 set_thread_flag(20);
}

static inline void clear_tsk_restore_sigmask(struct task_struct *task)
{
 clear_tsk_thread_flag(task, 20);
}

static inline void clear_restore_sigmask(void)
{
 clear_thread_flag(20);
}
static inline bool test_tsk_restore_sigmask(struct task_struct *task)
{
 return test_tsk_thread_flag(task, 20);
}
static inline bool test_restore_sigmask(void)
{
 return test_thread_flag(20);
}
static inline bool test_and_clear_restore_sigmask(void)
{
 return test_and_clear_thread_flag(20);
}
# 508 "include/linux/sched/signal.h"
static inline void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);

static inline void restore_saved_sigmask_unless(bool interrupted)
{
 if (interrupted)
  ({ int __ret_warn_on = !!(!signal_pending(get_current())); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/sched/signal.h\"; .popsection; .long 14472b - 14470b; .short 519; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 else
  restore_saved_sigmask();
}

static inline sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (unlikely(test_restore_sigmask()))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}
# 544 "include/linux/sched/signal.h"
static inline int on_sig_stack(unsigned long sp)
{
# 555 "include/linux/sched/signal.h"
 if (get_current()->sas_ss_flags & (1U << 31))
  return 0;





 return sp > get_current()->sas_ss_sp &&
  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;

}

static inline int sas_ss_flags(unsigned long sp)
{
 if (!get_current()->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (unlikely((ksig->ka.sa.sa_flags & 0x08000000)) && ! sas_ss_flags(sp))



  return get_current()->sas_ss_sp + get_current()->sas_ss_size;

 return sp;
}

extern void __cleanup_sighand(struct sighand_struct *);
extern void flush_itimer_signals(void);
# 605 "include/linux/sched/signal.h"
extern bool current_is_single_threaded(void);
# 627 "include/linux/sched/signal.h"
typedef int (*proc_visitor)(struct task_struct *p, void *data);
void walk_process_tree(struct task_struct *top, proc_visitor, void *);

static inline
struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
{
 struct pid *pid;
 if (type == PIDTYPE_PID)
  pid = task_pid(task);
 else
  pid = task->signal->pids[type];
 return pid;
}

static inline struct pid *task_tgid(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_TGID];
}






static inline struct pid *task_pgrp(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_PGID];
}

static inline struct pid *task_session(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_SID];
}

static inline int get_nr_threads(struct task_struct *task)
{
 return task->signal->nr_threads;
}

static inline bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}

static inline
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline struct task_struct *next_thread(const struct task_struct *p)
{
 return list_entry_rcu(p->thread_group.next,
         struct task_struct, thread_group);
}

static inline int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}




extern bool thread_group_exited(struct pid *pid);

extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
       unsigned long *flags);

static inline struct sighand_struct *lock_task_sighand(struct task_struct *task,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(task, flags);
 (void)(ret);
 return ret;
}

static inline void unlock_task_sighand(struct task_struct *task,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&task->sighand->siglock, *flags);
}

static inline unsigned long task_rlimit(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_cur), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_cur))) *)&(task->signal->rlim[limit].rlim_cur)); });
}

static inline unsigned long task_rlimit_max(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_max), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_max))) *)&(task->signal->rlim[limit].rlim_max)); });
}

static inline unsigned long rlimit(unsigned int limit)
{
 return task_rlimit(get_current(), limit);
}

static inline unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}
# 7 "include/linux/rcuwait.h" 2
# 16 "include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline void rcuwait_init(struct rcuwait *w)
{
 w->task = 
# 25 "include/linux/rcuwait.h" 3 4
          ((void *)0)
# 25 "include/linux/rcuwait.h"
              ;
}





static inline int rcuwait_active(struct rcuwait *w)
{
 return !!({ typeof(*(w->task)) *_________p1 = (typeof(*(w->task)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((w->task)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((w->task)))) *)&((w->task))); }); ; ((typeof(*(w->task)) *)(_________p1)); });
}

extern int rcuwait_wake_up(struct rcuwait *w);







static inline void prepare_to_rcuwait(struct rcuwait *w)
{
 do { uintptr_t _r_a_p__v = (uintptr_t)(get_current()); ; if (__builtin_constant_p(get_current()) && (_r_a_p__v) == (uintptr_t)
# 47 "include/linux/rcuwait.h" 3 4
((void *)0)
# 47 "include/linux/rcuwait.h"
) do { do { } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}

static inline void finish_rcuwait(struct rcuwait *w)
{
        do { uintptr_t _r_a_p__v = (uintptr_t)(
# 52 "include/linux/rcuwait.h" 3 4
       ((void *)0)
# 52 "include/linux/rcuwait.h"
       ); ; if (__builtin_constant_p(
# 52 "include/linux/rcuwait.h" 3 4
       ((void *)0)
# 52 "include/linux/rcuwait.h"
       ) && (_r_a_p__v) == (uintptr_t)
# 52 "include/linux/rcuwait.h" 3 4
       ((void *)0)
# 52 "include/linux/rcuwait.h"
       ) do { do { } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { } while (0); barrier(); do { do { } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 get_current()->state = (0x0000);
}
# 8 "include/linux/percpu-rwsem.h" 2

# 1 "include/linux/rcu_sync.h" 1
# 17 "include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "include/linux/rcu_sync.h"
static inline bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { } while (0 && (!rcu_read_lock_any_held()))
                                          ;
 return !({ do { } while (0); (*(const volatile typeof( _Generic((rsp->gp_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rsp->gp_state))) *)&(rsp->gp_state)); });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rcuwait writer;
 wait_queue_head_t waiters;
 atomic_t block;



};
# 45 "include/linux/percpu-rwsem.h"
extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);

static inline void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { check_inband_stage(); } while (0);

 do { } while (0);

 do { __preempt_count_add(1); barrier(); } while (0);
# 62 "include/linux/percpu-rwsem.h"
 if (likely(rcu_sync_is_idle(&sem->rss)))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 63 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 63 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 63 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 63 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 63 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 63 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 63 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 63 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 63 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 63 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 else
  __percpu_down_read(sem, false);




 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

static inline bool percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 bool ret = true;

 do { __preempt_count_add(1); barrier(); } while (0);



 if (likely(rcu_sync_is_idle(&sem->rss)))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 82 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 82 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 82 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 82 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 82 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 82 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 82 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 82 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 82 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 82 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ret = __percpu_down_read(sem, true);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);





 if (ret)
  do { } while (0);

 return ret;
}

static inline void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { } while (0);

 do { __preempt_count_add(1); barrier(); } while (0);



 if (likely(rcu_sync_is_idle(&sem->rss))) {
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 106 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 106 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 106 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 106 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 106 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 106 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 106 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 106 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 106 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 106 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 } else {




  barrier();





  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 118 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 118 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 118 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 118 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 118 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 118 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 118 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 118 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))
# 118 "include/linux/percpu-rwsem.h" 3 4
 ((void *)0)
# 118 "include/linux/percpu-rwsem.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)), (__kern_my_cpu_offset())); }), -(typeof(*sem->read_count))(1)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
  rcuwait_wake_up(&sem->writer);
 }
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 141 "include/linux/percpu-rwsem.h"
static inline void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}

static inline void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}
# 34 "include/linux/fs.h" 2

# 1 "include/linux/delayed_call.h" 1
# 10 "include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline void clear_delayed_call(struct delayed_call *call)
{
 call->fn = 
# 33 "include/linux/delayed_call.h" 3 4
           ((void *)0)
# 33 "include/linux/delayed_call.h"
               ;
}
# 36 "include/linux/fs.h" 2
# 1 "include/linux/uuid.h" 1
# 11 "include/linux/uuid.h"
# 1 "include/uapi/linux/uuid.h" 1
# 23 "include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline void import_guid(guid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline void export_guid(__u8 *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline void import_uuid(uuid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline void export_uuid(__u8 *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);
void generate_random_guid(unsigned char guid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);


static inline int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 37 "include/linux/fs.h" 2
# 1 "include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "include/linux/fs.h" 2
# 1 "include/linux/ioprio.h" 1





# 1 "include/linux/sched/rt.h" 1






struct task_struct;

static inline int rt_prio(int prio)
{
 if (unlikely(prio < 100))
  return 1;
 return 0;
}

static inline int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != 
# 44 "include/linux/sched/rt.h" 3 4
                             ((void *)0)
# 44 "include/linux/sched/rt.h"
                                 ;
}
# 58 "include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "include/linux/ioprio.h" 2
# 1 "include/linux/iocontext.h" 1
# 9 "include/linux/iocontext.h"
enum {
 ICQ_EXITED = 1 << 2,
 ICQ_DESTROYED = 1 << 3,
};
# 73 "include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 124 "include/linux/iocontext.h"
static inline void get_io_context_active(struct io_context *ioc)
{
 ({ int __ret_warn_on = !!(atomic_long_read(&ioc->refcount) <= 0); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/iocontext.h\"; .popsection; .long 14472b - 14470b; .short 126; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 ({ int __ret_warn_on = !!(atomic_read(&ioc->active_ref) <= 0); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/iocontext.h\"; .popsection; .long 14472b - 14470b; .short 127; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ int __ret_warn_on = !!(atomic_read(&ioc->nr_tasks) <= 0); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/iocontext.h\"; .popsection; .long 14472b - 14470b; .short 136; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;

void put_io_context(struct io_context *ioc);
void put_io_context_active(struct io_context *ioc);
void exit_io_context(struct task_struct *task);
struct io_context *get_task_io_context(struct task_struct *task,
           gfp_t gfp_flags, int node);
# 8 "include/linux/ioprio.h" 2
# 27 "include/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};






enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 54 "include/linux/ioprio.h"
static inline int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline int get_current_ioprio(void)
{
 struct io_context *ioc = get_current()->io_context;

 if (ioc)
  return ioc->ioprio;
 return (((IOPRIO_CLASS_NONE) << (13)) | 0);
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);


extern int ioprio_check_cap(int ioprio);
# 39 "include/linux/fs.h" 2
# 1 "include/linux/fs_types.h" 1
# 71 "include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 40 "include/linux/fs.h" 2


# 1 "include/linux/mount.h" 1
# 20 "include/linux/mount.h"
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct fs_context;
# 71 "include/linux/mount.h"
struct vfsmount {
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;
 struct user_namespace *mnt_userns;
} __attribute__((__designated_init__));

static inline struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
{

 return ({ typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) ___p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) *)&(*&mnt->mnt_userns)); }); do { } while (0); barrier(); (typeof(*&mnt->mnt_userns))___p1; });
}

struct file;
struct path;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern struct vfsmount *mnt_clone_internal(const struct path *path);
extern bool __mnt_is_readonly(struct vfsmount *mnt);
extern bool mnt_may_suid(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(const struct path *path);
extern int __mnt_want_write(struct vfsmount *);
extern void __mnt_drop_write(struct vfsmount *);

struct file_system_type;
extern struct vfsmount *fc_mount(struct fs_context *fc);
extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, const char *name,
          void *data);
extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
         struct file_system_type *type,
         const char *name, void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(const char *name);

extern unsigned int sysctl_mount_max;

extern bool path_is_mountpoint(const struct path *path);

extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
# 43 "include/linux/fs.h" 2



# 1 "include/uapi/linux/fs.h" 1
# 17 "include/uapi/linux/fs.h"
# 1 "include/linux/fscrypt.h" 1
# 16 "include/linux/fscrypt.h"
# 1 "include/linux/fs.h" 1
# 17 "include/linux/fscrypt.h" 2
# 1 "include/linux/mm.h" 1
# 18 "include/linux/fscrypt.h" 2
# 1 "include/linux/slab.h" 1
# 16 "include/linux/slab.h"
# 1 "include/linux/overflow.h" 1
# 52 "include/linux/overflow.h"
static inline bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
{
 return unlikely(overflow);
}
# 263 "include/linux/overflow.h"
static inline __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (__must_check_overflow( __builtin_choose_expr((((typeof(a))(-1)) < (typeof(a))1), ({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); typeof(a) __tmax = ((typeof(a))((((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))) - 1) + ((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))))); typeof(a) __tmin = ((typeof(a))((typeof(a))-((typeof(a))((((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))) - 1) + ((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1)))))-(typeof(a))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; }))))
  return (~(size_t)0);

 return bytes;
}
# 285 "include/linux/overflow.h"
static inline __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow( __builtin_choose_expr((((typeof(a))(-1)) < (typeof(a))1), ({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); typeof(a) __tmax = ((typeof(a))((((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))) - 1) + ((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))))); typeof(a) __tmin = ((typeof(a))((typeof(a))-((typeof(a))((((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))) - 1) + ((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1)))))-(typeof(a))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; }))))
  return (~(size_t)0);
 if (__must_check_overflow( __builtin_choose_expr((((typeof(bytes))(-1)) < (typeof(bytes))1), ({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); typeof(bytes) __tmax = ((typeof(bytes))((((typeof(bytes))1 << (8*sizeof(typeof(bytes)) - 1 - (((typeof(bytes))(-1)) < (typeof(bytes))1))) - 1) + ((typeof(bytes))1 << (8*sizeof(typeof(bytes)) - 1 - (((typeof(bytes))(-1)) < (typeof(bytes))1))))); typeof(bytes) __tmin = ((typeof(bytes))((typeof(bytes))-((typeof(bytes))((((typeof(bytes))1 << (8*sizeof(typeof(bytes)) - 1 - (((typeof(bytes))(-1)) < (typeof(bytes))1))) - 1) + ((typeof(bytes))1 << (8*sizeof(typeof(bytes)) - 1 - (((typeof(bytes))(-1)) < (typeof(bytes))1)))))-(typeof(bytes))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; }))))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow( __builtin_choose_expr((((typeof(a))(-1)) < (typeof(a))1), ({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); typeof(a) __tmax = ((typeof(a))((((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))) - 1) + ((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))))); typeof(a) __tmin = ((typeof(a))((typeof(a))-((typeof(a))((((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1))) - 1) + ((typeof(a))1 << (8*sizeof(typeof(a)) - 1 - (((typeof(a))(-1)) < (typeof(a))1)))))-(typeof(a))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; }))))
  return (~(size_t)0);
 if (__must_check_overflow( __builtin_choose_expr((((typeof(bytes))(-1)) < (typeof(bytes))1), ({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a + (u64)__b; (((~(__a ^ __b)) & (*__d ^ __a)) & ((typeof(__a))((typeof(__a))-((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1)))))-(typeof(__a))1))) != 0; }), ({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a + __b; *__d < __a; }))))
  return (~(size_t)0);

 return bytes;
}
# 17 "include/linux/slab.h" 2


# 1 "include/linux/percpu-refcount.h" 1
# 59 "include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {







 PERCPU_REF_INIT_ATOMIC = 1 << 0,






 PERCPU_REF_INIT_DEAD = 1 << 1,




 PERCPU_REF_ALLOW_REINIT = 1 << 2,
};

struct percpu_ref_data {
 atomic_long_t count;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 bool allow_reinit:1;
 struct callback_head rcu;
 struct percpu_ref *ref;
};

struct percpu_ref {




 unsigned long percpu_count_ptr;







 struct percpu_ref_data *data;
};

int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_resurrect(struct percpu_ref *ref);
void percpu_ref_reinit(struct percpu_ref *ref);
bool percpu_ref_is_zero(struct percpu_ref *ref);
# 147 "include/linux/percpu-refcount.h"
static inline void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, 
# 149 "include/linux/percpu-refcount.h" 3 4
                                 ((void *)0)
# 149 "include/linux/percpu-refcount.h"
                                     );
}







static inline bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 174 "include/linux/percpu-refcount.h"
 percpu_ptr = ({ do { } while (0); (*(const volatile typeof( _Generic((ref->percpu_count_ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ref->percpu_count_ptr))) *)&(ref->percpu_count_ptr)); });







 if (unlikely(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 198 "include/linux/percpu-refcount.h"
static inline void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 205 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 205 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 205 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 205 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 205 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 205 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 205 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 205 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 205 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 205 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->data->count);

 rcu_read_unlock();
}
# 220 "include/linux/percpu-refcount.h"
static inline void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 235 "include/linux/percpu-refcount.h"
static inline bool percpu_ref_tryget_many(struct percpu_ref *ref,
       unsigned long nr)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 244 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 244 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 244 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 244 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 244 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 244 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 244 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 244 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 244 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 244 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), nr); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic_long_add_unless(&ref->data->count, nr, 0);
 }

 rcu_read_unlock();

 return ret;
}
# 264 "include/linux/percpu-refcount.h"
static inline bool percpu_ref_tryget(struct percpu_ref *ref)
{
 return percpu_ref_tryget_many(ref, 1);
}
# 284 "include/linux/percpu-refcount.h"
static inline bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 292 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 292 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 292 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 292 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 292 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 292 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 292 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 292 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 292 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 292 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), 1); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic_long_inc_not_zero(&ref->data->count);
 }

 rcu_read_unlock();

 return ret;
}
# 313 "include/linux/percpu-refcount.h"
static inline void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 320 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 320 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 320 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 320 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), -(typeof(*percpu_count))(nr)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 2: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 320 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 320 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), -(typeof(*percpu_count))(nr)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 4: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 320 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 320 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), -(typeof(*percpu_count))(nr)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; case 8: ({ do { __preempt_count_add(1); barrier(); } while (0); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))
# 320 "include/linux/percpu-refcount.h" 3 4
 ((void *)0)
# 320 "include/linux/percpu-refcount.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(*percpu_count))) *)(&(*percpu_count)), (__kern_my_cpu_offset())); }), -(typeof(*percpu_count))(nr)); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); });break; default: __bad_size_call_parameter();break; } } while (0);
 else if (unlikely(atomic_long_sub_and_test(nr, &ref->data->count)))
  ref->data->release(ref);

 rcu_read_unlock();
}
# 336 "include/linux/percpu-refcount.h"
static inline void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 350 "include/linux/percpu-refcount.h"
static inline bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 20 "include/linux/slab.h" 2
# 136 "include/linux/slab.h"
# 1 "include/linux/kasan.h" 1




# 1 "include/linux/static_key.h" 1
# 6 "include/linux/kasan.h" 2


struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 69 "include/linux/kasan.h"
static inline int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline void kasan_enable_current(void) {}
static inline void kasan_disable_current(void) {}
# 288 "include/linux/kasan.h"
static inline bool kasan_enabled(void)
{
 return false;
}
static inline bool kasan_has_integrated_init(void)
{
 return false;
}
static inline slab_flags_t kasan_never_merge(void)
{
 return 0;
}
static inline void kasan_unpoison_range(const void *address, size_t size) {}
static inline void kasan_alloc_pages(struct page *page, unsigned int order, bool init) {}
static inline void kasan_free_pages(struct page *page, unsigned int order, bool init) {}
static inline void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}
static inline void kasan_cache_create_kmalloc(struct kmem_cache *cache) {}
static inline size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
static inline void kasan_poison_slab(struct page *page) {}
static inline void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}
static inline bool kasan_slab_free(struct kmem_cache *s, void *object, bool init)
{
 return false;
}
static inline void kasan_kfree_large(void *ptr) {}
static inline void kasan_slab_free_mempool(void *ptr) {}
static inline void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags, bool init)
{
 return object;
}
static inline void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
{
 return (void *)ptr;
}
static inline void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}
static inline bool kasan_check_byte(const void *address)
{
 return true;
}






static inline void kasan_unpoison_task_stack(struct task_struct *task) {}
# 364 "include/linux/kasan.h"
static inline void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline void kasan_cache_shutdown(struct kmem_cache *cache) {}
static inline void kasan_record_aux_stack(void *ptr) {}
# 389 "include/linux/kasan.h"
static inline void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 405 "include/linux/kasan.h"
static inline void kasan_init_sw_tags(void) { }






static inline void kasan_init_hw_tags_cpu(void) { }
static inline void kasan_init_hw_tags(void) { }
# 427 "include/linux/kasan.h"
static inline int kasan_populate_vmalloc(unsigned long start,
     unsigned long size)
{
 return 0;
}

static inline void kasan_poison_vmalloc(const void *start, unsigned long size)
{ }
static inline void kasan_unpoison_vmalloc(const void *start, unsigned long size)
{ }
static inline void kasan_release_vmalloc(unsigned long start,
      unsigned long end,
      unsigned long free_region_start,
      unsigned long free_region_end) {}
# 457 "include/linux/kasan.h"
static inline int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline void kasan_free_shadow(const struct vm_struct *vm) {}






static inline void kasan_non_canonical_hook(unsigned long addr) { }
# 137 "include/linux/slab.h" 2

struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init(void);
bool slab_is_available(void);

extern bool usercopy_fallback;

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);
# 184 "include/linux/slab.h"
void * __attribute__((__warn_unused_result__)) krealloc(const void *, size_t, gfp_t);
void kfree(const void *);
void kfree_sensitive(const void *);
size_t __ksize(const void *);
size_t ksize(const void *);

bool kmem_valid_obj(void *object);
void kmem_dump_obj(void *object);



void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
   bool to_user);
# 309 "include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,
 KMALLOC_RECLAIM,

 KMALLOC_DMA,

 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][(12 + 1) + 1];

static 
# 322 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 322 "include/linux/slab.h"
                      enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{





 if (likely((flags & ((( gfp_t)0x01u) | (( gfp_t)0x10u))) == 0))
  return KMALLOC_NORMAL;





 return flags & (( gfp_t)0x01u) ? KMALLOC_DMA : KMALLOC_RECLAIM;



}
# 350 "include/linux/slab.h"
static 
# 350 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 350 "include/linux/slab.h"
                      unsigned int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= (128))
  return ( __builtin_constant_p((128)) ? (((128)) < 2 ? 0 : 63 - __builtin_clzll((128))) : (sizeof((128)) <= 4) ? __ilog2_u32((128)) : __ilog2_u64((128)) );

 if ((128) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((128) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;
 if (size <= 64 * 1024 * 1024) return 26;
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/slab.h\"; .popsection; .long 14472b - 14470b; .short 386; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0);


 return -1;
}


void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__((128)))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *, void *);
# 404 "include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);





static 
# 411 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 411 "include/linux/slab.h"
                      void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(
# 413 "include/linux/slab.h" 3 4
                     ((void *)0)
# 413 "include/linux/slab.h"
                         , size, p);
}


void *__kmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__assume_aligned__((128)))) __attribute__((__malloc__));
void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
# 449 "include/linux/slab.h"
static 
# 449 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 449 "include/linux/slab.h"
                      void *kmem_cache_alloc_trace(struct kmem_cache *s,
  gfp_t flags, size_t size)
{
 void *ret = kmem_cache_alloc(s, flags);

 ret = kasan_kmalloc(s, ret, size, flags);
 return ret;
}

static 
# 458 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 458 "include/linux/slab.h"
                      void *
kmem_cache_alloc_node_trace(struct kmem_cache *s,
         gfp_t gfpflags,
         int node, size_t size)
{
 void *ret = kmem_cache_alloc_node(s, gfpflags, node);

 ret = kasan_kmalloc(s, ret, size, gfpflags);
 return ret;
}


extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 12)))) __attribute__((__malloc__));




static 
# 475 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 475 "include/linux/slab.h"
                      void *
kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
{
 return kmalloc_order(size, flags, order);
}


static 
# 482 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 482 "include/linux/slab.h"
                      void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 542 "include/linux/slab.h"
static 
# 542 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 542 "include/linux/slab.h"
                      void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << (12 + 1)))
   return kmalloc_large(size, flags);

  index = kmalloc_index(size);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}

static 
# 564 "include/linux/slab.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 564 "include/linux/slab.h"
                      void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (12 + 1))) {
  unsigned int i = kmalloc_index(size);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}







static inline void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (unlikely(__must_check_overflow( __builtin_choose_expr((((typeof(n))(-1)) < (typeof(n))1), ({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); typeof(n) __tmax = ((typeof(n))((((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))) - 1) + ((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))))); typeof(n) __tmin = ((typeof(n))((typeof(n))-((typeof(n))((((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))) - 1) + ((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1)))))-(typeof(n))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; })))))
  return 
# 593 "include/linux/slab.h" 3 4
        ((void *)0)
# 593 "include/linux/slab.h"
            ;
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}
# 606 "include/linux/slab.h"
static __attribute__((__warn_unused_result__)) inline void *
krealloc_array(void *p, size_t new_n, size_t new_size, gfp_t flags)
{
 size_t bytes;

 if (unlikely(__must_check_overflow( __builtin_choose_expr((((typeof(new_n))(-1)) < (typeof(new_n))1), ({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); typeof(new_n) __tmax = ((typeof(new_n))((((typeof(new_n))1 << (8*sizeof(typeof(new_n)) - 1 - (((typeof(new_n))(-1)) < (typeof(new_n))1))) - 1) + ((typeof(new_n))1 << (8*sizeof(typeof(new_n)) - 1 - (((typeof(new_n))(-1)) < (typeof(new_n))1))))); typeof(new_n) __tmin = ((typeof(new_n))((typeof(new_n))-((typeof(new_n))((((typeof(new_n))1 << (8*sizeof(typeof(new_n)) - 1 - (((typeof(new_n))(-1)) < (typeof(new_n))1))) - 1) + ((typeof(new_n))1 << (8*sizeof(typeof(new_n)) - 1 - (((typeof(new_n))(-1)) < (typeof(new_n))1)))))-(typeof(new_n))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; })))))
  return 
# 612 "include/linux/slab.h" 3 4
        ((void *)0)
# 612 "include/linux/slab.h"
            ;

 return krealloc(p, bytes, flags);
}







static inline void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 636 "include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);



static inline void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
           int node)
{
 size_t bytes;

 if (unlikely(__must_check_overflow( __builtin_choose_expr((((typeof(n))(-1)) < (typeof(n))1), ({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); typeof(n) __tmax = ((typeof(n))((((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))) - 1) + ((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))))); typeof(n) __tmin = ((typeof(n))((typeof(n))-((typeof(n))((((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))) - 1) + ((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1)))))-(typeof(n))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; })))))
  return 
# 646 "include/linux/slab.h" 3 4
        ((void *)0)
# 646 "include/linux/slab.h"
            ;
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

static inline void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}



extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
# 674 "include/linux/slab.h"
static inline void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






static inline void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







static inline void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init_late(void);
# 19 "include/linux/fscrypt.h" 2
# 1 "include/uapi/linux/fscrypt.h" 1
# 40 "include/uapi/linux/fscrypt.h"
struct fscrypt_policy_v1 {
 __u8 version;
 __u8 contents_encryption_mode;
 __u8 filenames_encryption_mode;
 __u8 flags;
 __u8 master_key_descriptor[8];
};
# 55 "include/uapi/linux/fscrypt.h"
struct fscrypt_key {
 __u32 mode;
 __u8 raw[64];
 __u32 size;
};






struct fscrypt_policy_v2 {
 __u8 version;
 __u8 contents_encryption_mode;
 __u8 filenames_encryption_mode;
 __u8 flags;
 __u8 __reserved[4];
 __u8 master_key_identifier[16];
};


struct fscrypt_get_policy_ex_arg {
 __u64 policy_size;
 union {
  __u8 version;
  struct fscrypt_policy_v1 v1;
  struct fscrypt_policy_v2 v2;
 } policy;
};
# 102 "include/uapi/linux/fscrypt.h"
struct fscrypt_key_specifier {
 __u32 type;
 __u32 __reserved;
 union {
  __u8 __reserved[32];
  __u8 descriptor[8];
  __u8 identifier[16];
 } u;
};





struct fscrypt_provisioning_key_payload {
 __u32 type;
 __u32 __reserved;
 __u8 raw[];
};


struct fscrypt_add_key_arg {
 struct fscrypt_key_specifier key_spec;
 __u32 raw_size;
 __u32 key_id;
 __u32 __reserved[8];
 __u8 raw[];
};


struct fscrypt_remove_key_arg {
 struct fscrypt_key_specifier key_spec;


 __u32 removal_status_flags;
 __u32 __reserved[5];
};


struct fscrypt_get_key_status_arg {

 struct fscrypt_key_specifier key_spec;
 __u32 __reserved[6];





 __u32 status;

 __u32 status_flags;
 __u32 user_count;
 __u32 __out_reserved[13];
};
# 20 "include/linux/fscrypt.h" 2



union fscrypt_policy_v1;
struct fscrypt_info;
struct seq_file;

struct fscrypt_str {
 unsigned char *name;
 u32 len;
};

struct fscrypt_name {
 const struct qstr *usr_fname;
 struct fscrypt_str disk_name;
 u32 hash;
 u32 minor_hash;
 struct fscrypt_str crypto_buf;
 bool is_nokey_name;
};
# 263 "include/linux/fscrypt.h"
static inline struct fscrypt_info *fscrypt_get_info(const struct inode *inode)
{
 return 
# 265 "include/linux/fscrypt.h" 3 4
       ((void *)0)
# 265 "include/linux/fscrypt.h"
           ;
}

static inline bool fscrypt_needs_contents_encryption(const struct inode *inode)
{
 return false;
}

static inline void fscrypt_handle_d_move(struct dentry *dentry)
{
}

static inline bool fscrypt_is_nokey_name(const struct dentry *dentry)
{
 return false;
}


static inline void fscrypt_enqueue_decrypt_work(struct work_struct *work)
{
}

static inline struct page *fscrypt_encrypt_pagecache_blocks(struct page *page,
           unsigned int len,
           unsigned int offs,
           gfp_t gfp_flags)
{
 return ERR_PTR(-
# 292 "include/linux/fscrypt.h" 3 4
                95
# 292 "include/linux/fscrypt.h"
                          );
}

static inline int fscrypt_encrypt_block_inplace(const struct inode *inode,
      struct page *page,
      unsigned int len,
      unsigned int offs, u64 lblk_num,
      gfp_t gfp_flags)
{
 return -
# 301 "include/linux/fscrypt.h" 3 4
        95
# 301 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_decrypt_pagecache_blocks(struct page *page,
         unsigned int len,
         unsigned int offs)
{
 return -
# 308 "include/linux/fscrypt.h" 3 4
        95
# 308 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_decrypt_block_inplace(const struct inode *inode,
      struct page *page,
      unsigned int len,
      unsigned int offs, u64 lblk_num)
{
 return -
# 316 "include/linux/fscrypt.h" 3 4
        95
# 316 "include/linux/fscrypt.h"
                  ;
}

static inline bool fscrypt_is_bounce_page(struct page *page)
{
 return false;
}

static inline struct page *fscrypt_pagecache_page(struct page *bounce_page)
{
 ({ int __ret_warn_on = !!(1); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/fscrypt.h\"; .popsection; .long 14472b - 14470b; .short 326; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return ERR_PTR(-
# 327 "include/linux/fscrypt.h" 3 4
                22
# 327 "include/linux/fscrypt.h"
                      );
}

static inline void fscrypt_free_bounce_page(struct page *bounce_page)
{
}


static inline int fscrypt_ioctl_set_policy(struct file *filp,
        const void *arg)
{
 return -
# 338 "include/linux/fscrypt.h" 3 4
        95
# 338 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_ioctl_get_policy(struct file *filp, void *arg)
{
 return -
# 343 "include/linux/fscrypt.h" 3 4
        95
# 343 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_ioctl_get_policy_ex(struct file *filp,
           void *arg)
{
 return -
# 349 "include/linux/fscrypt.h" 3 4
        95
# 349 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_ioctl_get_nonce(struct file *filp, void *arg)
{
 return -
# 354 "include/linux/fscrypt.h" 3 4
        95
# 354 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_has_permitted_context(struct inode *parent,
      struct inode *child)
{
 return 0;
}

static inline int fscrypt_set_context(struct inode *inode, void *fs_data)
{
 return -
# 365 "include/linux/fscrypt.h" 3 4
        95
# 365 "include/linux/fscrypt.h"
                  ;
}

struct fscrypt_dummy_policy {
};

static inline void fscrypt_show_test_dummy_encryption(struct seq_file *seq,
            char sep,
            struct super_block *sb)
{
}

static inline void
fscrypt_free_dummy_policy(struct fscrypt_dummy_policy *dummy_policy)
{
}


static inline void fscrypt_sb_free(struct super_block *sb)
{
}

static inline int fscrypt_ioctl_add_key(struct file *filp, void *arg)
{
 return -
# 389 "include/linux/fscrypt.h" 3 4
        95
# 389 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_ioctl_remove_key(struct file *filp, void *arg)
{
 return -
# 394 "include/linux/fscrypt.h" 3 4
        95
# 394 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_ioctl_remove_key_all_users(struct file *filp,
           void *arg)
{
 return -
# 400 "include/linux/fscrypt.h" 3 4
        95
# 400 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_ioctl_get_key_status(struct file *filp,
            void *arg)
{
 return -
# 406 "include/linux/fscrypt.h" 3 4
        95
# 406 "include/linux/fscrypt.h"
                  ;
}



static inline int fscrypt_prepare_new_inode(struct inode *dir,
         struct inode *inode,
         bool *encrypt_ret)
{
 if (IS_ENCRYPTED(dir))
  return -
# 416 "include/linux/fscrypt.h" 3 4
         95
# 416 "include/linux/fscrypt.h"
                   ;
 return 0;
}

static inline void fscrypt_put_encryption_info(struct inode *inode)
{
 return;
}

static inline void fscrypt_free_inode(struct inode *inode)
{
}

static inline int fscrypt_drop_inode(struct inode *inode)
{
 return 0;
}


static inline int fscrypt_setup_filename(struct inode *dir,
      const struct qstr *iname,
      int lookup, struct fscrypt_name *fname)
{
 if (IS_ENCRYPTED(dir))
  return -
# 440 "include/linux/fscrypt.h" 3 4
         95
# 440 "include/linux/fscrypt.h"
                   ;

 memset(fname, 0, sizeof(*fname));
 fname->usr_fname = iname;
 fname->disk_name.name = (unsigned char *)iname->name;
 fname->disk_name.len = iname->len;
 return 0;
}

static inline void fscrypt_free_filename(struct fscrypt_name *fname)
{
 return;
}

static inline int fscrypt_fname_alloc_buffer(u32 max_encrypted_len,
          struct fscrypt_str *crypto_str)
{
 return -
# 457 "include/linux/fscrypt.h" 3 4
        95
# 457 "include/linux/fscrypt.h"
                  ;
}

static inline void fscrypt_fname_free_buffer(struct fscrypt_str *crypto_str)
{
 return;
}

static inline int fscrypt_fname_disk_to_usr(const struct inode *inode,
         u32 hash, u32 minor_hash,
         const struct fscrypt_str *iname,
         struct fscrypt_str *oname)
{
 return -
# 470 "include/linux/fscrypt.h" 3 4
        95
# 470 "include/linux/fscrypt.h"
                  ;
}

static inline bool fscrypt_match_name(const struct fscrypt_name *fname,
          const u8 *de_name, u32 de_name_len)
{

 if (de_name_len != fname->disk_name.len)
  return false;
 return !memcmp(de_name, fname->disk_name.name, fname->disk_name.len);
}

static inline u64 fscrypt_fname_siphash(const struct inode *dir,
     const struct qstr *name)
{
 ({ int __ret_warn_on = !!(1); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/fscrypt.h\"; .popsection; .long 14472b - 14470b; .short 485; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return 0;
}

static inline int fscrypt_d_revalidate(struct dentry *dentry,
           unsigned int flags)
{
 return 1;
}


static inline void fscrypt_decrypt_bio(struct bio *bio)
{
}

static inline int fscrypt_zeroout_range(const struct inode *inode, unsigned long lblk,
     sector_t pblk, unsigned int len)
{
 return -
# 503 "include/linux/fscrypt.h" 3 4
        95
# 503 "include/linux/fscrypt.h"
                  ;
}



static inline int fscrypt_file_open(struct inode *inode, struct file *filp)
{
 if (IS_ENCRYPTED(inode))
  return -
# 511 "include/linux/fscrypt.h" 3 4
         95
# 511 "include/linux/fscrypt.h"
                   ;
 return 0;
}

static inline int __fscrypt_prepare_link(struct inode *inode, struct inode *dir,
      struct dentry *dentry)
{
 return -
# 518 "include/linux/fscrypt.h" 3 4
        95
# 518 "include/linux/fscrypt.h"
                  ;
}

static inline int __fscrypt_prepare_rename(struct inode *old_dir,
        struct dentry *old_dentry,
        struct inode *new_dir,
        struct dentry *new_dentry,
        unsigned int flags)
{
 return -
# 527 "include/linux/fscrypt.h" 3 4
        95
# 527 "include/linux/fscrypt.h"
                  ;
}

static inline int __fscrypt_prepare_lookup(struct inode *dir,
        struct dentry *dentry,
        struct fscrypt_name *fname)
{
 return -
# 534 "include/linux/fscrypt.h" 3 4
        95
# 534 "include/linux/fscrypt.h"
                  ;
}

static inline int __fscrypt_prepare_readdir(struct inode *dir)
{
 return -
# 539 "include/linux/fscrypt.h" 3 4
        95
# 539 "include/linux/fscrypt.h"
                  ;
}

static inline int __fscrypt_prepare_setattr(struct dentry *dentry,
         struct iattr *attr)
{
 return -
# 545 "include/linux/fscrypt.h" 3 4
        95
# 545 "include/linux/fscrypt.h"
                  ;
}

static inline int fscrypt_prepare_setflags(struct inode *inode,
        unsigned int oldflags,
        unsigned int flags)
{
 return 0;
}

static inline int fscrypt_prepare_symlink(struct inode *dir,
       const char *target,
       unsigned int len,
       unsigned int max_len,
       struct fscrypt_str *disk_link)
{
 if (IS_ENCRYPTED(dir))
  return -
# 562 "include/linux/fscrypt.h" 3 4
         95
# 562 "include/linux/fscrypt.h"
                   ;
 disk_link->name = (unsigned char *)target;
 disk_link->len = len + 1;
 if (disk_link->len > max_len)
  return -
# 566 "include/linux/fscrypt.h" 3 4
         36
# 566 "include/linux/fscrypt.h"
                     ;
 return 0;
}

static inline int __fscrypt_encrypt_symlink(struct inode *inode,
         const char *target,
         unsigned int len,
         struct fscrypt_str *disk_link)
{
 return -
# 575 "include/linux/fscrypt.h" 3 4
        95
# 575 "include/linux/fscrypt.h"
                  ;
}

static inline const char *fscrypt_get_symlink(struct inode *inode,
           const void *caddr,
           unsigned int max_size,
           struct delayed_call *done)
{
 return ERR_PTR(-
# 583 "include/linux/fscrypt.h" 3 4
                95
# 583 "include/linux/fscrypt.h"
                          );
}

static inline void fscrypt_set_ops(struct super_block *sb,
       const struct fscrypt_operations *s_cop)
{
}
# 614 "include/linux/fscrypt.h"
static inline bool __fscrypt_inode_uses_inline_crypto(const struct inode *inode)
{
 return false;
}

static inline void fscrypt_set_bio_crypt_ctx(struct bio *bio,
          const struct inode *inode,
          u64 first_lblk, gfp_t gfp_mask) { }

static inline void fscrypt_set_bio_crypt_ctx_bh(
      struct bio *bio,
      const struct buffer_head *first_bh,
      gfp_t gfp_mask) { }

static inline bool fscrypt_mergeable_bio(struct bio *bio,
      const struct inode *inode,
      u64 next_lblk)
{
 return true;
}

static inline bool fscrypt_mergeable_bio_bh(struct bio *bio,
         const struct buffer_head *next_bh)
{
 return true;
}
# 651 "include/linux/fscrypt.h"
static inline bool fscrypt_inode_uses_inline_crypto(const struct inode *inode)
{
 return fscrypt_needs_contents_encryption(inode) &&
        __fscrypt_inode_uses_inline_crypto(inode);
}
# 666 "include/linux/fscrypt.h"
static inline bool fscrypt_inode_uses_fs_layer_crypto(const struct inode *inode)
{
 return fscrypt_needs_contents_encryption(inode) &&
        !__fscrypt_inode_uses_inline_crypto(inode);
}
# 681 "include/linux/fscrypt.h"
static inline bool fscrypt_has_encryption_key(const struct inode *inode)
{
 return fscrypt_get_info(inode) != 
# 683 "include/linux/fscrypt.h" 3 4
                                  ((void *)0)
# 683 "include/linux/fscrypt.h"
                                      ;
}
# 704 "include/linux/fscrypt.h"
static inline int fscrypt_prepare_link(struct dentry *old_dentry,
           struct inode *dir,
           struct dentry *dentry)
{
 if (IS_ENCRYPTED(dir))
  return __fscrypt_prepare_link(d_inode(old_dentry), dir, dentry);
 return 0;
}
# 735 "include/linux/fscrypt.h"
static inline int fscrypt_prepare_rename(struct inode *old_dir,
      struct dentry *old_dentry,
      struct inode *new_dir,
      struct dentry *new_dentry,
      unsigned int flags)
{
 if (IS_ENCRYPTED(old_dir) || IS_ENCRYPTED(new_dir))
  return __fscrypt_prepare_rename(old_dir, old_dentry,
      new_dir, new_dentry, flags);
 return 0;
}
# 770 "include/linux/fscrypt.h"
static inline int fscrypt_prepare_lookup(struct inode *dir,
      struct dentry *dentry,
      struct fscrypt_name *fname)
{
 if (IS_ENCRYPTED(dir))
  return __fscrypt_prepare_lookup(dir, dentry, fname);

 memset(fname, 0, sizeof(*fname));
 fname->usr_fname = &dentry->d_name;
 fname->disk_name.name = (unsigned char *)dentry->d_name.name;
 fname->disk_name.len = dentry->d_name.len;
 return 0;
}
# 797 "include/linux/fscrypt.h"
static inline int fscrypt_prepare_readdir(struct inode *dir)
{
 if (IS_ENCRYPTED(dir))
  return __fscrypt_prepare_readdir(dir);
 return 0;
}
# 822 "include/linux/fscrypt.h"
static inline int fscrypt_prepare_setattr(struct dentry *dentry,
       struct iattr *attr)
{
 if (IS_ENCRYPTED(d_inode(dentry)))
  return __fscrypt_prepare_setattr(dentry, attr);
 return 0;
}
# 845 "include/linux/fscrypt.h"
static inline int fscrypt_encrypt_symlink(struct inode *inode,
       const char *target,
       unsigned int len,
       struct fscrypt_str *disk_link)
{
 if (IS_ENCRYPTED(inode))
  return __fscrypt_encrypt_symlink(inode, target, len, disk_link);
 return 0;
}


static inline void fscrypt_finalize_bounce_page(struct page **pagep)
{
 struct page *page = *pagep;

 if (fscrypt_is_bounce_page(page)) {
  *pagep = fscrypt_pagecache_page(page);
  fscrypt_free_bounce_page(page);
 }
}
# 18 "include/uapi/linux/fs.h" 2
# 54 "include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 286 "include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 47 "include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct fiemap_extent_info;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct oob_poll_wait;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_spec;
struct fileattr;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 223 "include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};




# 1 "include/linux/quota.h" 1
# 40 "include/linux/quota.h"
# 1 "include/linux/percpu_counter.h" 1
# 20 "include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);
void percpu_counter_sync(struct percpu_counter *fbc);

static inline int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{

 s64 ret = ({ do { } while (0); (*(const volatile typeof( _Generic((fbc->count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (fbc->count))) *)&(fbc->count)); });

 if (ret >= 0)
  return ret;
 return 0;
}

static inline bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != 
# 92 "include/linux/percpu_counter.h" 3 4
                         ((void *)0)
# 92 "include/linux/percpu_counter.h"
                             );
}
# 181 "include/linux/percpu_counter.h"
static inline void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 41 "include/linux/quota.h" 2

# 1 "include/uapi/linux/dqblk_xfs.h" 1
# 53 "include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;


 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s8 d_itimer_hi;
 __s8 d_btimer_hi;
 __s8 d_rtbtimer_hi;
 __s8 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 159 "include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 202 "include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u16 qs_rtbwarnlimit;
 __u16 qs_pad3;
 __u32 qs_pad4;
 __u64 qs_pad2[7];
};
# 43 "include/linux/quota.h" 2
# 1 "include/linux/dqblk_v1.h" 1
# 44 "include/linux/quota.h" 2
# 1 "include/linux/dqblk_v2.h" 1
# 9 "include/linux/dqblk_v2.h"
# 1 "include/linux/dqblk_qtree.h" 1
# 18 "include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "include/linux/dqblk_v2.h" 2
# 45 "include/linux/quota.h" 2



# 1 "include/linux/projid.h" 1
# 17 "include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 49 "include/linux/quota.h" 2
# 1 "include/uapi/linux/quota.h" 1
# 90 "include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "include/linux/quota.h"
static inline struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/quota.h\"; .popsection; .long 14472b - 14470b; .short 114; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0);
 }
 return kqid;
}







static inline struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/quota.h\"; .popsection; .long 14472b - 14470b; .short 141; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0);
 }
 return kqid;
}





static inline struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline int info_dirty(struct mem_dqinfo *info)
{
 return test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 464 "include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 491 "include/linux/quota.h"
static inline unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static 
# 502 "include/linux/quota.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 502 "include/linux/quota.h"
                      unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}





static inline void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype)
{
 return;
}


struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 245 "include/linux/fs.h" 2
# 278 "include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 291 "include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;
struct readahead_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 324 "include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 union {
  unsigned int ki_cookie;
  struct wait_page_queue *ki_waitq;
 };


};

static inline bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == 
# 346 "include/linux/fs.h" 3 4
                             ((void *)0)
# 346 "include/linux/fs.h"
                                 ;
}
# 358 "include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);
 void (*readahead)(struct readahead_control *);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 454 "include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;




 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) __attribute__((__designated_init__));
# 488 "include/linux/fs.h"
static inline bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline int i_mmap_trylock_write(struct address_space *mapping)
{
 return down_write_trylock(&mapping->i_mmap_rwsem);
}

static inline void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}

static inline void i_mmap_assert_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}

static inline void i_mmap_assert_write_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}




static inline int mapping_mapped(struct address_space *mapping)
{
 return !(({ do { } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == 
# 533 "include/linux/fs.h" 3 4
        ((void *)0)
# 533 "include/linux/fs.h"
        );
}
# 545 "include/linux/fs.h"
static inline int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -
# 553 "include/linux/fs.h" 3 4
      1
# 553 "include/linux/fs.h"
           ;
}

static inline void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -
# 564 "include/linux/fs.h" 3 4
      16
# 564 "include/linux/fs.h"
           ;
}

static inline void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 583 "include/linux/fs.h"
struct posix_acl;



static inline struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;


 seqcount_t i_size_seqcount;



 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;

 struct bdi_writeback *i_wb;


 int i_wb_frn_winner;
 u16 i_wb_frn_avg_time;
 u16 i_wb_frn_history;

 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;
# 721 "include/linux/fs.h"
 void *i_private;
} __attribute__((__designated_init__));

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 763 "include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

static inline void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read(&inode->i_rwsem);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);
# 831 "include/linux/fs.h"
static inline loff_t i_size_read(const struct inode *inode)
{

 loff_t i_size;
 unsigned int seq;

 do {
  seq = ({ ; ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_sequence((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&inode->i_size_seqcount))))) & 1) cpu_relax(); kcsan_atomic_next(1000); __seq; }); barrier(); _seq; }); });
  i_size = inode->i_size;
 } while (do_read_seqcount_retry(_Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_ptr((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&inode->i_size_seqcount)))), seq));
 return i_size;
# 852 "include/linux/fs.h"
}






static inline void i_size_write(struct inode *inode, loff_t i_size)
{

 do { __preempt_count_add(1); barrier(); } while (0);
 do { _Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_assert((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_assert((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_assert((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_assert((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_assert((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_assert((void *)((&inode->i_size_seqcount)))); if (_Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_preemptible((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_preemptible((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_preemptible((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_preemptible((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_preemptible((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_preemptible((void *)((&inode->i_size_seqcount))))) do { __preempt_count_add(1); barrier(); } while (0); do_write_seqcount_begin(_Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_ptr((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&inode->i_size_seqcount))))); } while (0);
 inode->i_size = i_size;
 do { do_write_seqcount_end(_Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_ptr((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&inode->i_size_seqcount))))); if (_Generic(*(&inode->i_size_seqcount), seqcount_t: __seqprop_preemptible((void *)(&inode->i_size_seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_preemptible((void *)((&inode->i_size_seqcount))), seqcount_spinlock_t: __seqprop_spinlock_preemptible((void *)((&inode->i_size_seqcount))), seqcount_rwlock_t: __seqprop_rwlock_preemptible((void *)((&inode->i_size_seqcount))), seqcount_mutex_t: __seqprop_mutex_preemptible((void *)((&inode->i_size_seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_preemptible((void *)((&inode->i_size_seqcount))))) do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0); } while (0);
 do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0);







}

static inline unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};
# 903 "include/linux/fs.h"
struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;
 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;
 void *oob_data;



 struct hlist_head *f_ep;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
 errseq_t f_sb_err;
} __attribute__((__designated_init__))
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[];
};

static inline struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1012 "include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
 bool (*lm_breaker_owns_lease)(struct file_lock *);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);


# 1 "include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1049 "include/linux/fs.h" 2
# 1067 "include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} __attribute__((__designated_init__));

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1119 "include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);


extern int fcntl_getlk64(struct file *, unsigned int, struct flock64 *);
extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,
   struct flock64 *);


extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);

struct notifier_block;
extern int lease_register_notifier(struct notifier_block *);
extern void lease_unregister_notifier(struct notifier_block *);

struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1304 "include/linux/fs.h"
static inline struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1404 "include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;
# 1454 "include/linux/fs.h"
 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 atomic_long_t s_fsnotify_inode_refs;


 int s_readonly_remount;


 errseq_t s_wb_err;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock ;
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} __attribute__((__designated_init__));






static inline uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}
# 1590 "include/linux/fs.h"
static inline kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return make_kuid(mnt_userns, __kuid_val(kuid));
}
# 1604 "include/linux/fs.h"
static inline kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return make_kgid(mnt_userns, __kgid_val(kgid));
}
# 1618 "include/linux/fs.h"
static inline kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kuid_into_mnt(mnt_userns, inode->i_uid);
}
# 1632 "include/linux/fs.h"
static inline kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kgid_into_mnt(mnt_userns, inode->i_gid);
}
# 1646 "include/linux/fs.h"
static inline kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return (kuid_t){ from_kuid(mnt_userns, kuid) };
}
# 1660 "include/linux/fs.h"
static inline kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return (kgid_t){ from_kgid(mnt_userns, kgid) };
}
# 1678 "include/linux/fs.h"
static inline kuid_t mapped_fsuid(struct user_namespace *mnt_userns)
{
 return kuid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsuid; })));
}
# 1695 "include/linux/fs.h"
static inline kgid_t mapped_fsgid(struct user_namespace *mnt_userns)
{
 return kgid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsgid; })));
}
# 1708 "include/linux/fs.h"
static inline void inode_fsuid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_uid = mapped_fsuid(mnt_userns);
}
# 1722 "include/linux/fs.h"
static inline void inode_fsgid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_gid = mapped_fsgid(mnt_userns);
}
# 1739 "include/linux/fs.h"
static inline bool fsuidgid_has_mapping(struct super_block *sb,
     struct user_namespace *mnt_userns)
{
 struct user_namespace *s_user_ns = sb->s_user_ns;

 return kuid_has_mapping(s_user_ns, mapped_fsuid(mnt_userns)) &&
        kgid_has_mapping(s_user_ns, mapped_fsgid(mnt_userns));
}

extern struct timespec64 current_time(struct inode *inode);
# 1758 "include/linux/fs.h"
static inline void __sb_end_write(struct super_block *sb, int level)
{
 percpu_up_read(sb->s_writers.rw_sem + level-1);
}

static inline void __sb_start_write(struct super_block *sb, int level)
{
 percpu_down_read(sb->s_writers.rw_sem + level - 1);
}

static inline bool __sb_start_write_trylock(struct super_block *sb, int level)
{
 return percpu_down_read_trylock(sb->s_writers.rw_sem + level - 1);
}
# 1785 "include/linux/fs.h"
static inline void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1797 "include/linux/fs.h"
static inline void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1809 "include/linux/fs.h"
static inline void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1833 "include/linux/fs.h"
static inline void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE);
}

static inline bool sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_WRITE);
}
# 1862 "include/linux/fs.h"
static inline void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1880 "include/linux/fs.h"
static inline void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS);
}

static inline bool sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_FS);
}

bool inode_owner_or_capable(struct user_namespace *mnt_userns,
       const struct inode *inode);




int vfs_create(struct user_namespace *, struct inode *,
        struct dentry *, umode_t, bool);
int vfs_mkdir(struct user_namespace *, struct inode *,
       struct dentry *, umode_t);
int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
              umode_t, dev_t);
int vfs_symlink(struct user_namespace *, struct inode *,
  struct dentry *, const char *);
int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
      struct dentry *, struct inode **);
int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
        struct inode **);
# 1921 "include/linux/fs.h"
struct renamedata {
 struct user_namespace *old_mnt_userns;
 struct inode *old_dir;
 struct dentry *old_dentry;
 struct user_namespace *new_mnt_userns;
 struct inode *new_dir;
 struct dentry *new_dentry;
 struct inode **delegated_inode;
 unsigned int flags;
} __attribute__((__designated_init__));

int vfs_rename(struct renamedata *);

static inline int vfs_whiteout(struct user_namespace *mnt_userns,
          struct inode *dir, struct dentry *dentry)
{
 return vfs_mknod(mnt_userns, dir, dentry, S_IFCHR | 0,
    0);
}

struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
      struct dentry *dentry, umode_t mode, int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

int vfs_fchown(struct file *file, uid_t user, gid_t group);
int vfs_fchmod(struct file *file, umode_t mode);
int vfs_utimes(const struct path *path, struct timespec64 *times);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);


extern long compat_ptr_ioctl(struct file *file, unsigned int cmd,
     unsigned long arg);
extern long compat_ptr_oob_ioctl(struct file *file, unsigned int cmd,
     unsigned long arg);
# 1967 "include/linux/fs.h"
void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
        const struct inode *dir, umode_t mode);
extern bool may_open_dev(const struct path *path);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};
# 2025 "include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, bool spin);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 ssize_t (*oob_read) (struct file *, char *, size_t);
 ssize_t (*oob_write) (struct file *, const char *, size_t);
 long (*oob_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_oob_ioctl) (struct file *, unsigned int, unsigned long);
 __poll_t (*oob_poll) (struct file *, struct oob_poll_wait *);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} __attribute__((__designated_init__));

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct user_namespace *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct user_namespace *, struct inode *,struct dentry *,
         umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
   const char *);
 int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t,dev_t);
 int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct user_namespace *, struct dentry *,
   struct iattr *);
 int (*getattr) (struct user_namespace *, const struct path *,
   struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct user_namespace *, struct inode *,
   struct dentry *, umode_t);
 int (*set_acl)(struct user_namespace *, struct inode *,
         struct posix_acl *, int);
 int (*fileattr_set)(struct user_namespace *mnt_userns,
       struct dentry *dentry, struct fileattr *fa);
 int (*fileattr_get)(struct dentry *dentry, struct fileattr *fa);
} __attribute__((__aligned__((1 << (6)))));

static inline ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 2231 "include/linux/fs.h"
static inline bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2261 "include/linux/fs.h"
static inline bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
       struct inode *inode)
{
 return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
}

static inline enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline int iocb_flags(struct file *file);

static inline u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}

static inline void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src,
          struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = kiocb_src->ki_flags,
  .ki_hint = kiocb_src->ki_hint,
  .ki_ioprio = kiocb_src->ki_ioprio,
  .ki_pos = kiocb_src->ki_pos,
 };
}
# 2411 "include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}
# 2431 "include/linux/fs.h"
static inline bool inode_is_dirtytime_only(struct inode *inode)
{
 return (inode->i_state & ((1 << 11) | (1 << 3) |
      (1 << 5) | (1 << 4))) == (1 << 11);
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
static inline void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;
# 2485 "include/linux/fs.h"
 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_spec *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2551 "include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct file *);
extern int locks_mandatory_area(struct inode *, struct file *, loff_t, loff_t, unsigned char);






static inline int __mandatory_lock(struct inode *ino)
{
 return (ino->i_mode & (S_ISGID | S_IXGRP)) == S_ISGID;
}






static inline int mandatory_lock(struct inode *ino)
{
 return ((ino)->i_sb->s_flags & (64)) && __mandatory_lock(ino);
}

static inline int locks_verify_locked(struct file *file)
{
 if (mandatory_lock(file_inode(file)))
  return locks_mandatory_locked(file);
 return 0;
}

static inline int locks_verify_truncate(struct inode *inode,
        struct file *f,
        loff_t size)
{
 if (!inode->i_flctx || !mandatory_lock(inode))
  return 0;

 if (size < inode->i_size) {
  return locks_mandatory_area(inode, f, size, inode->i_size - 1,
    1);
 } else {
  return locks_mandatory_area(inode, f, inode->i_size, size - 1,
    1);
 }
}
# 2669 "include/linux/fs.h"
static inline int break_lease(struct inode *inode, unsigned int mode)
{






 barrier();
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline int break_deleg(struct inode *inode, unsigned int mode)
{






 barrier();
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -
# 2702 "include/linux/fs.h" 3 4
            11 
# 2702 "include/linux/fs.h"
                        && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = 
# 2715 "include/linux/fs.h" 3 4
                   ((void *)0)
# 2715 "include/linux/fs.h"
                       ;
 return ret;
}

static inline int break_layout(struct inode *inode, bool wait)
{
 barrier();
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2759 "include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(((size_t)&((struct filename *)0)->iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

static inline struct user_namespace *file_mnt_user_ns(struct file *file)
{
 return mnt_user_ns(file->f_path.mnt);
}
extern long vfs_truncate(const struct path *, loff_t);
int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
  unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       const char *, int, umode_t);
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;




extern struct super_block *blockdev_superblock;
static inline bool sb_is_blkdev_sb(struct super_block *sb)
{
 return 1 && sb == blockdev_superblock;
}

void emergency_thaw_all(void);
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;
# 2830 "include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}

extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

void invalidate_mapping_pagevec(struct address_space *mapping,
    unsigned long start, unsigned long end,
    unsigned long *nr_pagevec);

static inline void invalidate_remote_inode(struct inode *inode)
{
 if (S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
     S_ISLNK(inode->i_mode))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern bool filemap_range_needs_writeback(struct address_space *,
       loff_t lstart, loff_t lend);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);

static inline int filemap_write_and_wait(struct address_space *mapping)
{
 return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2930 "include/linux/fs.h"
static inline void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (unlikely(err))
  __filemap_set_wb_err(mapping, err);
}
# 2947 "include/linux/fs.h"
static inline int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2960 "include/linux/fs.h"
static inline errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}
# 2972 "include/linux/fs.h"
static inline errseq_t file_sample_sb_err(struct file *file)
{
 return errseq_sample(&file->f_path.dentry->d_sb->s_wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);


extern int bmap(struct inode *inode, sector_t *block);







int notify_change(struct user_namespace *, struct dentry *,
    struct iattr *, struct inode **);
int inode_permission(struct user_namespace *, struct inode *, int);
int generic_permission(struct user_namespace *, struct inode *, int);
static inline int file_permission(struct file *file, int mask)
{
 return inode_permission(file_mnt_user_ns(file),
    file_inode(file), mask);
}
static inline int path_permission(const struct path *path, int mask)
{
 return inode_permission(mnt_user_ns(path->mnt),
    d_inode(path->dentry), mask);
}
int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
     struct inode *inode);

static inline bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (S_IXUSR|S_IXGRP|S_IXOTH)) || S_ISDIR(inode->i_mode);
}

static inline bool inode_wrong_type(const struct inode *inode, umode_t mode)
{
 return (inode->i_mode ^ mode) & S_IFMT;
}

static inline void file_start_write(struct file *file)
{
 if (!S_ISREG(file_inode(file)->i_mode))
  return;
 sb_start_write(file_inode(file)->i_sb);
}

static inline bool file_start_write_trylock(struct file *file)
{
 if (!S_ISREG(file_inode(file)->i_mode))
  return true;
 return sb_start_write_trylock(file_inode(file)->i_sb);
}

static inline void file_end_write(struct file *file)
{
 if (!S_ISREG(file_inode(file)->i_mode))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 3078 "include/linux/fs.h"
static inline int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -
# 3080 "include/linux/fs.h" 3 4
                                                               26
# 3080 "include/linux/fs.h"
                                                                      ;
}
static inline int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -
# 3085 "include/linux/fs.h" 3 4
                                                               26
# 3085 "include/linux/fs.h"
                                                                      ;
}
static inline void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline void i_readcount_dec(struct inode *inode)
{
 do { if (unlikely(!atomic_read(&inode->i_readcount))) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/fs.h\"; .popsection; .long 14472b - 14470b; .short 3104; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
 atomic_dec(&inode->i_readcount);
}
static inline void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 3121 "include/linux/fs.h"
extern int do_pipe_flags(int *, int);

extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}
extern void d_mark_dontcache(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
        int (*)(struct inode *, void *), void *);
extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);
# 3198 "include/linux/fs.h"
static inline bool is_zero_ino(ino_t ino)
{
 return (u32)ino == 0;
}

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);

extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_write_check_limits(struct file *file, loff_t pos,
  loff_t *count);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
  ssize_t already_read);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
      struct iov_iter *iter);
ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
       struct iov_iter *iter);


extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, 
# 3312 "include/linux/fs.h" 3 4
             ((void *)0)
# 3312 "include/linux/fs.h"
                 , 
# 3312 "include/linux/fs.h" 3 4
                   ((void *)0)
# 3312 "include/linux/fs.h"
                       , DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3325 "include/linux/fs.h"
static inline void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3337 "include/linux/fs.h"
static inline void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}




void dio_warn_stale_pagecache(struct file *filp);

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
  int flags);
int vfs_fstat(int fd, struct kstat *stat);

static inline int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_fstatat(-100, filename, stat, 0);
}
static inline int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_fstatat(-100, name, stat, 0x100);
}

extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct user_namespace *, struct dentry *,
     struct iattr *);
extern int simple_getattr(struct user_namespace *, const struct path *,
     struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct user_namespace *, struct inode *,
    struct dentry *, struct inode *, struct dentry *,
    unsigned int);
extern void simple_recursive_removal(struct dentry *,
                              void (*callback)(struct dentry *));
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int noop_set_page_dirty(struct page *page);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);

extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
void setattr_copy(struct user_namespace *, struct inode *inode,
    const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline bool vma_is_dax(const struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!0 || !vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if (S_ISCHR(inode->i_mode))
  return false;
 return true;
}

static inline int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= ( int) (( __kernel_rwf_t)0x00000010);
 if (file->f_flags & 0200000)
  res |= (1 << 17);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & (1 << 0))))
  res |= ( int) (( __kernel_rwf_t)0x00000002);
 if (file->f_flags & 04000000)
  res |= ( int) (( __kernel_rwf_t)0x00000004);
 return res;
}

static inline int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 int kiocb_flags = 0;


 do { } while (0);

 if (!flags)
  return 0;
 if (unlikely(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))))
  return -
# 3534 "include/linux/fs.h" 3 4
         95
# 3534 "include/linux/fs.h"
                   ;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -
# 3538 "include/linux/fs.h" 3 4
          95
# 3538 "include/linux/fs.h"
                    ;
  kiocb_flags |= (1 << 20);
 }
 kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
 if (flags & (( __kernel_rwf_t)0x00000004))
  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);

 ki->ki_flags |= kiocb_flags;
 return 0;
}

static inline ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3615 "include/linux/fs.h"
static inline __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) get_filesystem_list(char *buf);
# 3646 "include/linux/fs.h"
static inline bool is_sxid(umode_t mode)
{
 return (mode & S_ISUID) || ((mode & S_ISGID) && (mode & S_IXGRP));
}

static inline int check_sticky(struct user_namespace *mnt_userns,
          struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & S_ISVTX))
  return 0;

 return __check_sticky(mnt_userns, dir, inode);
}

static inline void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= (1 << 12);
}

static inline bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & (1 << 4));
}

static inline bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & (1 << 4));
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);






static inline int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 142 "arch/arm64/include/asm/elf.h" 2



typedef unsigned long elf_greg_t;





typedef elf_greg_t elf_gregset_t[(sizeof(struct user_pt_regs) / sizeof(elf_greg_t))];
typedef struct user_fpsimd_state elf_fpregset_t;
# 185 "arch/arm64/include/asm/elf.h"
struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
# 211 "arch/arm64/include/asm/elf.h"
typedef unsigned int compat_elf_greg_t;
typedef compat_elf_greg_t compat_elf_gregset_t[18];
# 245 "arch/arm64/include/asm/elf.h"
extern int aarch32_setup_additional_pages(struct linux_binprm *bprm,
       int uses_interp);





struct arch_elf_state {
 int flags;
};







static inline int arch_parse_elf_property(u32 type, const void *data,
       size_t datasz, bool compat,
       struct arch_elf_state *arch)
{

 if (1 && compat)
  return 0;

 if (type == 0xc0000000) {
  const u32 *p = data;

  if (datasz != sizeof(*p))
   return -
# 274 "arch/arm64/include/asm/elf.h" 3 4
          8
# 274 "arch/arm64/include/asm/elf.h"
                 ;

  if (system_supports_bti() &&
      (*p & (1U << 0)))
   arch->flags |= (1 << 0);
 }

 return 0;
}

static inline int arch_elf_pt_proc(void *ehdr, void *phdr,
       struct file *f, bool is_interp,
       struct arch_elf_state *state)
{
 return 0;
}

static inline int arch_check_elf(void *ehdr, bool has_interp,
     void *interp_ehdr,
     struct arch_elf_state *state)
{
 return 0;
}
# 7 "include/linux/elf.h" 2
# 52 "include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 65 "include/linux/elf.h"
struct file;
struct coredump_params;


static inline int elf_coredump_extra_notes_size(void) { return 0; }
static inline int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 81 "include/linux/elf.h"
struct gnu_property {
 u32 pr_type;
 u32 pr_datasz;
};

struct arch_elf_state;
# 96 "include/linux/elf.h"
extern int arch_parse_elf_property(u32 type, const void *data, size_t datasz,
       bool compat, struct arch_elf_state *arch);



int arch_elf_adjust_prot(int prot, const struct arch_elf_state *state,
    bool has_interp, bool is_interp);
# 19 "include/linux/module.h" 2

# 1 "include/linux/kobject.h" 1
# 20 "include/linux/kobject.h"
# 1 "include/linux/sysfs.h" 1
# 16 "include/linux/sysfs.h"
# 1 "include/linux/kernfs.h" 1
# 13 "include/linux/kernfs.h"
# 1 "include/linux/idr.h" 1
# 19 "include/linux/idr.h"
struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "include/linux/idr.h"
static inline unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((idr->idr_next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (idr->idr_next))) *)&(idr->idr_next)); });
}
# 79 "include/linux/idr.h"
static inline void idr_set_cursor(struct idr *idr, unsigned int val)
{
 do { do { } while (0); do { *(volatile typeof(idr->idr_next) *)&(idr->idr_next) = (val); } while (0); } while (0);
}
# 112 "include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "include/linux/idr.h"
static inline void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((23 + 0)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "include/linux/idr.h"
static inline void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline void idr_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))
# 174 "include/linux/idr.h" 3 4
((void *)0)
# 174 "include/linux/idr.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock), (__kern_my_cpu_offset())); })); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule(); } while (0); } while (0);
}
# 240 "include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 271 "include/linux/idr.h"
static inline int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 289 "include/linux/idr.h"
static inline int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 307 "include/linux/idr.h"
static inline int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (23 + 0)) << ( unsigned)((( xa_mark_t)0U)))))));
}
# 325 "include/linux/idr.h"
static inline bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 14 "include/linux/kernfs.h" 2






struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};






enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 76 "include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,




 KERNFS_ROOT_SUPPORT_USER_XATTR = 0x0008,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};
# 123 "include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 135 "include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;





 u64 id;

 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 168 "include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_id_lowbits;
 u32 id_highbits;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 236 "include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 252 "include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}

static inline ino_t kernfs_id_ino(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return id;
 else
  return (u32)id;
}

static inline u32 kernfs_id_gen(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return 1;
 else
  return id >> 32;
}

static inline ino_t kernfs_ino(struct kernfs_node *kn)
{
 return kernfs_id_ino(kn->id);
}

static inline ino_t kernfs_gen(struct kernfs_node *kn)
{
 return kernfs_id_gen(kn->id);
}
# 328 "include/linux/kernfs.h"
static inline void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/kernfs.h\"; .popsection; .long 14472b - 14470b; .short 330; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 ({ int __ret_warn_on = !!(!(({ do { } while (0); (*(const volatile typeof( _Generic(((&kn->dir.children)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&kn->dir.children)->rb_node))) *)&((&kn->dir.children)->rb_node)); }) == 
# 331 "include/linux/kernfs.h" 3 4
((void *)0)
# 331 "include/linux/kernfs.h"
)); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/kernfs.h\"; .popsection; .long 14472b - 14470b; .short 331; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 kn->flags |= KERNFS_NS;
}







static inline bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *root,
         u64 id);
# 540 "include/linux/kernfs.h"
static inline int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, 
# 542 "include/linux/kernfs.h" 3 4
                                 ((void *)0)
# 542 "include/linux/kernfs.h"
                                     , buf, buflen);
}

static inline struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, 
# 548 "include/linux/kernfs.h" 3 4
                                        ((void *)0)
# 548 "include/linux/kernfs.h"
                                            );
}

static inline struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, 
# 554 "include/linux/kernfs.h" 3 4
                                        ((void *)0)
# 554 "include/linux/kernfs.h"
                                            );
}

static inline struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, 
# 563 "include/linux/kernfs.h" 3 4
             ((void *)0)
# 563 "include/linux/kernfs.h"
                 );
}

static inline struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, kuid_t uid, kgid_t gid,
        loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = 
# 572 "include/linux/kernfs.h" 3 4
                             ((void *)0)
# 572 "include/linux/kernfs.h"
                                 ;




 return __kernfs_create_file(parent, name, mode, uid, gid,
        size, ops, priv, ns, key);
}

static inline struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode,
         (kuid_t){ 0 }, (kgid_t){ 0 },
         size, ops, priv, 
# 587 "include/linux/kernfs.h" 3 4
                         ((void *)0)
# 587 "include/linux/kernfs.h"
                             );
}

static inline int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, 
# 593 "include/linux/kernfs.h" 3 4
                                              ((void *)0)
# 593 "include/linux/kernfs.h"
                                                  );
}

static inline int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, 
# 600 "include/linux/kernfs.h" 3 4
                                                  ((void *)0)
# 600 "include/linux/kernfs.h"
                                                      );
}
# 17 "include/linux/sysfs.h" 2




# 1 "include/linux/kobject_ns.h" 1
# 19 "include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "include/linux/sysfs.h" 2



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 165 "include/linux/sysfs.h"
struct file;
struct vm_area_struct;
struct address_space;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 struct address_space *mapping;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 232 "include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
      struct kobject *target_kobj,
      const char *target_name,
      const char *symlink_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}

int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
       kgid_t kgid);
int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
       const char *name, kuid_t kuid, kgid_t kgid);
int sysfs_groups_change_owner(struct kobject *kobj,
         const struct attribute_group **groups,
         kuid_t kuid, kgid_t kgid);
int sysfs_group_change_owner(struct kobject *kobj,
        const struct attribute_group *groups, kuid_t kuid,
        kgid_t kgid);
__attribute__((__format__(printf, 2, 3)))
int sysfs_emit(char *buf, const char *fmt, ...);
__attribute__((__format__(printf, 3, 4)))
int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
# 598 "include/linux/sysfs.h"
static inline int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, 
# 601 "include/linux/sysfs.h" 3 4
                                        ((void *)0)
# 601 "include/linux/sysfs.h"
                                            );
}

static inline void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, 
# 607 "include/linux/sysfs.h" 3 4
                                 ((void *)0)
# 607 "include/linux/sysfs.h"
                                     );
}

static inline int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, 
# 613 "include/linux/sysfs.h" 3 4
                                                              ((void *)0)
# 613 "include/linux/sysfs.h"
                                                                  );
}

static inline void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "include/linux/kobject.h" 2


# 1 "include/linux/kref.h" 1
# 19 "include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 62 "include/linux/kref.h"
static inline int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "include/linux/kref.h"
static inline int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 24 "include/linux/kobject.h" 2
# 41 "include/linux/kobject.h"
extern u64 uevent_seqnum;
# 53 "include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create(void);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 131 "include/linux/kobject.h"
static inline bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/kobject.h\"; .popsection; .long 14472b - 14470b; .short 133; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[64];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 192 "include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} __attribute__((__designated_init__));

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { } while (0); ((struct kset *)(__mptr - ((size_t)&((struct kset *)0)->kobj))); }) : 
# 208 "include/linux/kobject.h" 3 4
                                                      ((void *)0)
# 208 "include/linux/kobject.h"
                                                          ;
}

static inline struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : 
# 213 "include/linux/kobject.h" 3 4
                                            ((void *)0)
# 213 "include/linux/kobject.h"
                                                ;
}

static inline void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 21 "include/linux/module.h" 2
# 1 "include/linux/moduleparam.h" 1
# 36 "include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 304 "include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 372 "include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 382 "include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 411 "include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_hexint;
extern int param_set_hexint(const char *val, const struct kernel_param *kp);
extern int param_get_hexint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 524 "include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 585 "include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 22 "include/linux/module.h" 2


# 1 "include/linux/rbtree_latch.h" 1
# 40 "include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_latch_t seq;
 struct rb_root tree[2];
};
# 64 "include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static 
# 69 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 69 "include/linux/rbtree_latch.h"
                      struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); do { } while (0); ((struct latch_tree_node *)(__mptr - ((size_t)&((struct latch_tree_node *)0)->node[idx]))); });
}

static 
# 75 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 75 "include/linux/rbtree_latch.h"
                      void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = 
# 82 "include/linux/rbtree_latch.h" 3 4
                         ((void *)0)
# 82 "include/linux/rbtree_latch.h"
                             ;
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static 
# 99 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 99 "include/linux/rbtree_latch.h"
                      void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static 
# 105 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 105 "include/linux/rbtree_latch.h"
                      struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((ltr->tree[idx].rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ltr->tree[idx].rb_node))) *)&(ltr->tree[idx].rb_node)); }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((node->rb_left), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_left))) *)&(node->rb_left)); }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ do { } while (0); (*(const volatile typeof( _Generic((node->rb_right), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_right))) *)&(node->rb_right)); }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return 
# 125 "include/linux/rbtree_latch.h" 3 4
       ((void *)0)
# 125 "include/linux/rbtree_latch.h"
           ;
}
# 143 "include/linux/rbtree_latch.h"
static 
# 143 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 143 "include/linux/rbtree_latch.h"
                      void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 170 "include/linux/rbtree_latch.h"
static 
# 170 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 170 "include/linux/rbtree_latch.h"
                      void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 199 "include/linux/rbtree_latch.h"
static 
# 199 "include/linux/rbtree_latch.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 199 "include/linux/rbtree_latch.h"
                      struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_latch_retry(&root->seq, seq));

 return node;
}
# 25 "include/linux/module.h" 2
# 1 "include/linux/error-injection.h" 1





# 1 "include/asm-generic/error-injection.h" 1
# 7 "include/linux/error-injection.h" 2
# 15 "include/linux/error-injection.h"
static inline bool within_error_injection_list(unsigned long addr)
{
 return false;
}

static inline int get_injectable_error_type(unsigned long addr)
{
 return EI_ETYPE_NONE;
}
# 26 "include/linux/module.h" 2
# 1 "include/linux/tracepoint-defs.h" 1
# 12 "include/linux/tracepoint-defs.h"
# 1 "include/linux/static_key.h" 1
# 13 "include/linux/tracepoint-defs.h" 2

struct static_call_key;

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 struct static_call_key *static_call_key;
 void *static_call_tramp;
 void *iterator;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};


typedef const int tracepoint_ptr_t;




struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 27 "include/linux/module.h" 2


# 1 "include/linux/cfi.h" 1
# 30 "include/linux/module.h" 2


# 1 "arch/arm64/include/asm/module.h" 1







# 1 "include/asm-generic/module.h" 1
# 9 "arch/arm64/include/asm/module.h" 2


struct mod_plt_sec {
 int plt_shndx;
 int plt_num_entries;
 int plt_max_entries;
};

struct mod_arch_specific {
 struct mod_plt_sec core;
 struct mod_plt_sec init;


 struct plt_entry *ftrace_trampolines;
};


u64 module_emit_plt_entry(struct module *mod, Elf64_Shdr *sechdrs,
     void *loc, const Elf64_Rela *rela,
     Elf64_Sym *sym);

u64 module_emit_veneer_for_adrp(struct module *mod, Elf64_Shdr *sechdrs,
    void *loc, u64 val);


extern u64 module_alloc_base;




struct plt_entry {
# 48 "arch/arm64/include/asm/module.h"
 __le32 adrp;
 __le32 add;
 __le32 br;
};

static inline bool is_forbidden_offset_for_adrp(void *place)
{
 return 1 &&
        cpus_have_const_cap(43) &&
        ((u64)place & 0xfff) >= 0xff8;
}

struct plt_entry get_plt_entry(u64 dst, void *pc);
bool plt_entries_equal(const struct plt_entry *a, const struct plt_entry *b);

static inline bool plt_entry_is_initialized(const struct plt_entry *e)
{
 return e->adrp || e->add || e->br;
}
# 33 "include/linux/module.h" 2



struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} __attribute__((__designated_init__));

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
};

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 294 "include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 347 "include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 363 "include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
 bool using_gplonly_symbols;






 bool async_probe_requested;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;

 void *noinstr_text_start;
 unsigned int noinstr_text_size;






 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;
# 472 "include/linux/module.h"
 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;
# 510 "include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 530 "include/linux/module.h"
} __attribute__((__aligned__((1 << (6))))) __attribute__((__designated_init__));





static inline unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}





static inline bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 631 "include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 811 "include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 823 "include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 840 "include/linux/module.h"
static inline bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}
# 852 "include/linux/module.h"
static inline bool module_sig_ok(struct module *module)
{
 return true;
}


int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);
# 9 "kernel/evl/init.c" 2
# 1 "include/evl/init.h" 1
# 10 "include/evl/init.h"
# 1 "include/linux/dovetail.h" 1
# 14 "include/linux/dovetail.h"
# 1 "include/linux/irqstage.h" 1
# 17 "include/linux/irqstage.h"
struct kvm_oob_notifier;

struct irq_stage {
 int index;
 const char *name;
};

extern struct irq_stage inband_stage;

extern struct irq_stage oob_stage;

struct irq_event_map;

struct irq_log {
 unsigned long index_0;
 struct irq_event_map *map;
};


struct irq_stage_data {
 struct irq_log log;
 struct irq_stage *stage;



};


struct irq_pipeline_data {
 struct irq_stage_data stages[2];
 struct pt_regs tick_regs;

 struct task_struct *task_inflight;
 struct task_struct *rqlock_owner;

 struct kvm_oob_notifier *vcpu_notify;


};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct irq_pipeline_data) irq_pipeline;
# 68 "include/linux/irqstage.h"
static 
# 68 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 68 "include/linux/irqstage.h"
                      void init_task_stall_bits(struct task_struct *p)
{
 __set_bit(0, &p->stall_bits);
 __clear_bit(1, &p->stall_bits);
}

static 
# 74 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 74 "include/linux/irqstage.h"
                      void stall_inband_nocheck(void)
{
 __set_bit(0, &get_current()->stall_bits);
 barrier();
}

static 
# 80 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 80 "include/linux/irqstage.h"
                      void stall_inband(void)
{
 ({ int __ret_warn_on = !!(irq_pipeline_debug() && running_oob()); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/irqstage.h\"; .popsection; .long 14472b - 14470b; .short 82; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 stall_inband_nocheck();
}

static 
# 86 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 86 "include/linux/irqstage.h"
                      void unstall_inband_nocheck(void)
{
 barrier();
 __clear_bit(0, &get_current()->stall_bits);
}

static 
# 92 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 92 "include/linux/irqstage.h"
                      void unstall_inband(void)
{
 ({ int __ret_warn_on = !!(irq_pipeline_debug() && running_oob()); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/irqstage.h\"; .popsection; .long 14472b - 14470b; .short 94; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 unstall_inband_nocheck();
}

static 
# 98 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 98 "include/linux/irqstage.h"
                      int test_and_stall_inband_nocheck(void)
{
 return __test_and_set_bit(0, &get_current()->stall_bits);
}

static 
# 103 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 103 "include/linux/irqstage.h"
                      int test_and_stall_inband(void)
{
 ({ int __ret_warn_on = !!(irq_pipeline_debug() && running_oob()); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/irqstage.h\"; .popsection; .long 14472b - 14470b; .short 105; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return test_and_stall_inband_nocheck();
}

static 
# 109 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 109 "include/linux/irqstage.h"
                      int test_inband_stall(void)
{
 return test_bit(0, &get_current()->stall_bits);
}

static 
# 114 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 114 "include/linux/irqstage.h"
                      void stall_oob(void)
{
 __set_bit(1, &get_current()->stall_bits);
 barrier();
}

static 
# 120 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 120 "include/linux/irqstage.h"
                      void unstall_oob(void)
{
 barrier();
 __clear_bit(1, &get_current()->stall_bits);
}

static 
# 126 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 126 "include/linux/irqstage.h"
                      int test_and_stall_oob(void)
{
 return __test_and_set_bit(1, &get_current()->stall_bits);
}

static 
# 131 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 131 "include/linux/irqstage.h"
                      int test_oob_stall(void)
{
 return test_bit(1, &get_current()->stall_bits);
}







static 
# 142 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 143 "include/linux/irqstage.h"
struct irq_stage_data *this_staged(struct irq_stage *stage)
{
 return &({ do { const void *__vpp_verify = (typeof((irq_pipeline.stages) + 0))
# 145 "include/linux/irqstage.h" 3 4
        ((void *)0)
# 145 "include/linux/irqstage.h"
        ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(irq_pipeline.stages)) *)(irq_pipeline.stages), (__kern_my_cpu_offset())); })[stage->index];
}
# 158 "include/linux/irqstage.h"
static 
# 158 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 159 "include/linux/irqstage.h"
struct irq_stage_data *percpu_inband_staged(struct irq_stage *stage, int cpu)
{
 return &(*({ do { const void *__vpp_verify = (typeof((&(irq_pipeline.stages)) + 0))
# 161 "include/linux/irqstage.h" 3 4
        ((void *)0)
# 161 "include/linux/irqstage.h"
        ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(irq_pipeline.stages)))) *)((&(irq_pipeline.stages))), ((__per_cpu_offset[(cpu)]))); }))[stage->index];
}
# 172 "include/linux/irqstage.h"
static 
# 172 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 172 "include/linux/irqstage.h"
                      struct irq_stage_data *this_inband_staged(void)
{
 return ({ do { const void *__vpp_verify = (typeof((&irq_pipeline.stages[0]) + 0))
# 174 "include/linux/irqstage.h" 3 4
       ((void *)0)
# 174 "include/linux/irqstage.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&irq_pipeline.stages[0])) *)(&irq_pipeline.stages[0]), (__kern_my_cpu_offset())); });
}
# 187 "include/linux/irqstage.h"
static 
# 187 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 187 "include/linux/irqstage.h"
                      struct irq_stage_data *this_oob_staged(void)
{
 return ({ do { const void *__vpp_verify = (typeof((&irq_pipeline.stages[1]) + 0))
# 189 "include/linux/irqstage.h" 3 4
       ((void *)0)
# 189 "include/linux/irqstage.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&irq_pipeline.stages[1])) *)(&irq_pipeline.stages[1]), (__kern_my_cpu_offset())); });
}

static 
# 192 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 192 "include/linux/irqstage.h"
                      struct irq_stage_data *__current_irq_staged(void)
{
 return &({ do { const void *__vpp_verify = (typeof((irq_pipeline.stages) + 0))
# 194 "include/linux/irqstage.h" 3 4
        ((void *)0)
# 194 "include/linux/irqstage.h"
        ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(irq_pipeline.stages)) *)(irq_pipeline.stages), (__kern_my_cpu_offset())); })[((preempt_count() & (((1UL << (1))-1) << (((((0 + 8) + 8) + 4) + 4) + 1))) >> (((((0 + 8) + 8) + 4) + 4) + 1))];
}







static 
# 203 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 204 "include/linux/irqstage.h"
void check_staged_locality(struct irq_stage_data *pd)
{







}
# 223 "include/linux/irqstage.h"
static 
# 223 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 224 "include/linux/irqstage.h"
void switch_oob(struct irq_stage_data *pd)
{
 check_staged_locality(pd);
 if (!(preempt_count() & (((1UL << (1))-1) << (((((0 + 8) + 8) + 4) + 4) + 1))))
  __preempt_count_add((1UL << (((((0 + 8) + 8) + 4) + 4) + 1)));
}

static 
# 231 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 232 "include/linux/irqstage.h"
void switch_inband(struct irq_stage_data *pd)
{
 check_staged_locality(pd);
 if (preempt_count() & (((1UL << (1))-1) << (((((0 + 8) + 8) + 4) + 4) + 1)))
  __preempt_count_sub((1UL << (((((0 + 8) + 8) + 4) + 4) + 1)));
}

static 
# 239 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 240 "include/linux/irqstage.h"
void set_current_irq_staged(struct irq_stage_data *pd)
{
 if (pd->stage == &inband_stage)
  switch_inband(pd);
 else
  switch_oob(pd);
}

static 
# 248 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 248 "include/linux/irqstage.h"
                      struct irq_stage *__current_irq_stage(void)
{





 return __current_irq_staged()->stage;
}



static 
# 260 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 260 "include/linux/irqstage.h"
                      bool oob_stage_present(void)
{
 return oob_stage.index != 0;
}






static 
# 270 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 270 "include/linux/irqstage.h"
                      int stage_irqs_pending(struct irq_stage_data *pd)
{
 return pd->log.index_0 != 0;
}

void sync_current_irq_stage(void);

void sync_irq_stage(struct irq_stage *top);

void irq_post_stage(struct irq_stage *stage,
      unsigned int irq);

static 
# 282 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 282 "include/linux/irqstage.h"
                      void irq_post_oob(unsigned int irq)
{
 irq_post_stage(&oob_stage, irq);
}

static 
# 287 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 287 "include/linux/irqstage.h"
                      void irq_post_inband(unsigned int irq)
{
 irq_post_stage(&inband_stage, irq);
}

static 
# 292 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 292 "include/linux/irqstage.h"
                      void oob_irq_disable(void)
{
 native_irq_disable();
 stall_oob();
}

static 
# 298 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 298 "include/linux/irqstage.h"
                      unsigned long oob_irq_save(void)
{
 native_irq_disable();
 return test_and_stall_oob();
}

static 
# 304 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 304 "include/linux/irqstage.h"
                      int oob_irqs_disabled(void)
{
 return test_oob_stall();
}

void oob_irq_enable(void);

void __oob_irq_restore(unsigned long x);

static 
# 313 "include/linux/irqstage.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 313 "include/linux/irqstage.h"
                      void oob_irq_restore(unsigned long x)
{
 if ((x ^ test_oob_stall()) & 1)
  __oob_irq_restore(x);
}

bool stage_disabled(void);

unsigned long test_and_lock_stage(int *irqsoff);

void unlock_stage(unsigned long irqstate);
# 332 "include/linux/irqstage.h"
int enable_oob_stage(const char *name);

int arch_enable_oob_stage(void);

void disable_oob_stage(void);
# 15 "include/linux/dovetail.h" 2
# 1 "include/uapi/asm-generic/dovetail.h" 1
# 16 "include/linux/dovetail.h" 2
# 1 "arch/arm64/include/asm/dovetail.h" 1
# 24 "arch/arm64/include/asm/dovetail.h"
static inline void arch_dovetail_exec_prepare(void)
{ }

static inline void arch_dovetail_switch_prepare(bool leave_inband)
{ }

static inline void arch_dovetail_switch_finish(bool enter_inband)
{
 fpsimd_restore_current_oob();
}
# 17 "include/linux/dovetail.h" 2

struct pt_regs;
struct task_struct;
struct file;
struct files_struct;

enum inband_event_type {
 INBAND_TASK_SIGNAL,
 INBAND_TASK_MIGRATION,
 INBAND_TASK_EXIT,
 INBAND_TASK_RETUSER,
 INBAND_TASK_PTSTEP,
 INBAND_TASK_PTSTOP,
 INBAND_TASK_PTCONT,
 INBAND_PROCESS_CLEANUP,
};

struct dovetail_migration_data {
 struct task_struct *task;
 int dest_cpu;
};

struct dovetail_altsched_context {
 struct task_struct *task;
 struct mm_struct *active_mm;
 bool borrowed_mm;
};
# 57 "include/linux/dovetail.h"
void inband_task_init(struct task_struct *p);

int pipeline_syscall(unsigned int nr, struct pt_regs *regs);

void __oob_trap_notify(unsigned int exception,
         struct pt_regs *regs);

static 
# 64 "include/linux/dovetail.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 64 "include/linux/dovetail.h"
                      void oob_trap_notify(unsigned int exception,
     struct pt_regs *regs)
{
 if (running_oob() && !test_thread_local_flags(0x0008))
  __oob_trap_notify(exception, regs);
}

void __oob_trap_unwind(unsigned int exception,
  struct pt_regs *regs);

static 
# 74 "include/linux/dovetail.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 74 "include/linux/dovetail.h"
                      void oob_trap_unwind(unsigned int exception,
     struct pt_regs *regs)
{
 if (test_thread_local_flags(0x0008))
  __oob_trap_unwind(exception, regs);
}

void inband_event_notify(enum inband_event_type,
    void *data);

void inband_clock_was_set(void);

static inline void inband_signal_notify(struct task_struct *p)
{
 if (test_ti_local_flags(task_thread_info(p), 0x0002))
  inband_event_notify(INBAND_TASK_SIGNAL, p);
}

static inline void inband_migration_notify(struct task_struct *p, int cpu)
{
 if (test_ti_local_flags(task_thread_info(p), 0x0002)) {
  struct dovetail_migration_data d = {
   .task = p,
   .dest_cpu = cpu,
  };
  inband_event_notify(INBAND_TASK_MIGRATION, &d);
 }
}

static inline void inband_exit_notify(void)
{
 inband_event_notify(INBAND_TASK_EXIT, 
# 105 "include/linux/dovetail.h" 3 4
                                      ((void *)0)
# 105 "include/linux/dovetail.h"
                                          );
}

static inline void inband_cleanup_notify(struct mm_struct *mm)
{





 inband_event_notify(INBAND_PROCESS_CLEANUP, mm);
}

static inline void inband_ptstop_notify(void)
{
 if (test_thread_local_flags(0x0002))
  inband_event_notify(INBAND_TASK_PTSTOP, get_current());
}

static inline void inband_ptcont_notify(void)
{
 if (test_thread_local_flags(0x0002))
  inband_event_notify(INBAND_TASK_PTCONT, get_current());
}

static inline void inband_ptstep_notify(struct task_struct *tracee)
{
 if (test_ti_local_flags(task_thread_info(tracee), 0x0002))
  inband_event_notify(INBAND_TASK_PTSTEP, tracee);
}

static inline
void prepare_inband_switch(struct task_struct *next)
{
 struct task_struct *prev = get_current();

 if (test_ti_local_flags(task_thread_info(next), 0x0002))
  ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(irq_pipeline.rqlock_owner)) + 0))
# 142 "include/linux/dovetail.h" 3 4
 ((void *)0)
# 142 "include/linux/dovetail.h"
 ; (void)__vpp_verify; } while (0); switch(sizeof(irq_pipeline.rqlock_owner)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(irq_pipeline.rqlock_owner)) + 0))
# 142 "include/linux/dovetail.h" 3 4
 ((void *)0)
# 142 "include/linux/dovetail.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(irq_pipeline.rqlock_owner))) *)(&(irq_pipeline.rqlock_owner)), (__kern_my_cpu_offset())); }) = prev; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(irq_pipeline.rqlock_owner)) + 0))
# 142 "include/linux/dovetail.h" 3 4
 ((void *)0)
# 142 "include/linux/dovetail.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(irq_pipeline.rqlock_owner))) *)(&(irq_pipeline.rqlock_owner)), (__kern_my_cpu_offset())); }) = prev; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(irq_pipeline.rqlock_owner)) + 0))
# 142 "include/linux/dovetail.h" 3 4
 ((void *)0)
# 142 "include/linux/dovetail.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(irq_pipeline.rqlock_owner))) *)(&(irq_pipeline.rqlock_owner)), (__kern_my_cpu_offset())); }) = prev; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(irq_pipeline.rqlock_owner)) + 0))
# 142 "include/linux/dovetail.h" 3 4
 ((void *)0)
# 142 "include/linux/dovetail.h"
 ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(irq_pipeline.rqlock_owner))) *)(&(irq_pipeline.rqlock_owner)), (__kern_my_cpu_offset())); }) = prev; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

void inband_retuser_notify(void);

bool inband_switch_tail(void);

void oob_trampoline(void);

void arch_inband_task_init(struct task_struct *p);

int dovetail_start(void);

void dovetail_stop(void);

void dovetail_init_altsched(struct dovetail_altsched_context *p);

void dovetail_start_altsched(void);

void dovetail_stop_altsched(void);

__attribute__((__warn_unused_result__)) int dovetail_leave_inband(void);

static inline void dovetail_leave_oob(void)
{
 clear_thread_local_flags(0x0001|0x0004);
 clear_thread_flag(27);
}

void dovetail_resume_inband(void);

bool dovetail_context_switch(struct dovetail_altsched_context *out,
   struct dovetail_altsched_context *in,
   bool leave_inband);

static inline
struct oob_thread_state *dovetail_current_state(void)
{
 return &((struct thread_info *)get_current())->oob_state;
}

static inline
struct oob_thread_state *dovetail_task_state(struct task_struct *p)
{
 return &task_thread_info(p)->oob_state;
}

static inline
struct oob_mm_state *dovetail_mm_state(void)
{
 if (get_current()->flags & 0x00200000)
  return 
# 193 "include/linux/dovetail.h" 3 4
        ((void *)0)
# 193 "include/linux/dovetail.h"
            ;

 return &get_current()->mm->oob_state;
}

void dovetail_call_mayday(struct pt_regs *regs);

static inline void dovetail_send_mayday(struct task_struct *castaway)
{
 struct thread_info *ti = task_thread_info(castaway);

 if (test_ti_local_flags(ti, 0x0002))
  set_ti_thread_flag(ti, 27);
}

static inline void dovetail_request_ucall(struct task_struct *task)
{
 struct thread_info *ti = task_thread_info(task);

 if (test_ti_local_flags(ti, 0x0002))
  set_ti_thread_flag(ti, 7);
}

static inline void dovetail_clear_ucall(void)
{
 if (test_thread_flag(7))
  clear_thread_flag(7);
}

void install_inband_fd(unsigned int fd, struct file *file,
         struct files_struct *files);

void uninstall_inband_fd(unsigned int fd, struct file *file,
    struct files_struct *files);

void replace_inband_fd(unsigned int fd, struct file *file,
         struct files_struct *files);
# 308 "include/linux/dovetail.h"
static 
# 308 "include/linux/dovetail.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 308 "include/linux/dovetail.h"
                      bool dovetailing(void)
{
 return 1;
}

static 
# 313 "include/linux/dovetail.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 313 "include/linux/dovetail.h"
                      bool dovetail_debug(void)
{
 return 0;
}
# 11 "include/evl/init.h" 2

struct evl_machine_cpudata {
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct evl_machine_cpudata) evl_machine_cpudata;

extern struct cpumask evl_oob_cpus;




static inline void evl_warn_init(const char *fn, int level, int status)
{ }
# 10 "kernel/evl/init.c" 2
# 1 "include/evl/sched.h" 1
# 13 "include/evl/sched.h"
# 1 "include/linux/irq_pipeline.h" 1
# 11 "include/linux/irq_pipeline.h"
struct cpuidle_device;
struct cpuidle_state;
struct irq_desc;




# 1 "include/linux/irqdomain.h" 1
# 34 "include/linux/irqdomain.h"
# 1 "include/linux/irqhandler.h" 1
# 10 "include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
# 35 "include/linux/irqdomain.h" 2
# 1 "include/linux/of.h" 1
# 18 "include/linux/of.h"
# 1 "include/linux/mod_devicetable.h" 1
# 38 "include/linux/mod_devicetable.h"
struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 121 "include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 166 "include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};





struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};

struct sdw_device_id {
 __u16 mfg_id;
 __u16 part_id;
 __u8 sdw_version;
 __u8 class_id;
 kernel_ulong_t driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 342 "include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 
# 351 "include/linux/mod_devicetable.h" 3 4
                                              32 
# 351 "include/linux/mod_devicetable.h"
                                                            + 1];
 kernel_ulong_t keybit[0x2ff / 
# 352 "include/linux/mod_devicetable.h" 3 4
                                                32 
# 352 "include/linux/mod_devicetable.h"
                                                              + 1];
 kernel_ulong_t relbit[0x0f / 
# 353 "include/linux/mod_devicetable.h" 3 4
                                                32 
# 353 "include/linux/mod_devicetable.h"
                                                              + 1];
 kernel_ulong_t absbit[0x3f / 
# 354 "include/linux/mod_devicetable.h" 3 4
                                                32 
# 354 "include/linux/mod_devicetable.h"
                                                              + 1];
 kernel_ulong_t mscbit[0x07 / 
# 355 "include/linux/mod_devicetable.h" 3 4
                                                32 
# 355 "include/linux/mod_devicetable.h"
                                                              + 1];
 kernel_ulong_t ledbit[0x0f / 
# 356 "include/linux/mod_devicetable.h" 3 4
                                                32 
# 356 "include/linux/mod_devicetable.h"
                                                              + 1];
 kernel_ulong_t sndbit[0x07 / 
# 357 "include/linux/mod_devicetable.h" 3 4
                                                32 
# 357 "include/linux/mod_devicetable.h"
                                                              + 1];
 kernel_ulong_t ffbit[0x7f / 
# 358 "include/linux/mod_devicetable.h" 3 4
                                              32 
# 358 "include/linux/mod_devicetable.h"
                                                            + 1];
 kernel_ulong_t swbit[0x10 / 
# 359 "include/linux/mod_devicetable.h" 3 4
                                              32 
# 359 "include/linux/mod_devicetable.h"
                                                            + 1];
 kernel_ulong_t propbit[0x1f / 
# 360 "include/linux/mod_devicetable.h" 3 4
                                                  32 
# 360 "include/linux/mod_devicetable.h"
                                                                + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 393 "include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 415 "include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 429 "include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 guid_t guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct pci_epf_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 479 "include/linux/mod_devicetable.h"
struct i3c_device_id {
 __u8 match_flags;
 __u8 dcr;
 __u16 manuf_id;
 __u16 part_id;
 __u16 extra_info;

 const void *data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct slim_device_id {
 __u16 manf_id, prod_code;
 __u16 dev_index, instance;


 kernel_ulong_t driver_data;
};




struct apr_device_id {
 char name[32];
 __u32 domain_id;
 __u32 svc_id;
 __u32 svc_version;
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_BIOS_RELEASE,
 DMI_EC_FIRMWARE_RELEASE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_PRODUCT_SKU,
 DMI_PRODUCT_FAMILY,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
 DMI_OEM_STRING,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 586 "include/linux/mod_devicetable.h"
struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 613 "include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 642 "include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 666 "include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 steppings;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 687 "include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 712 "include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 733 "include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 757 "include/linux/mod_devicetable.h"
struct fsl_mc_device_id {
 __u16 vendor;
 const char obj_type[16];
};
# 775 "include/linux/mod_devicetable.h"
struct tb_service_id {
 __u32 match_flags;
 char protocol_key[8 + 1];
 __u32 protocol_id;
 __u32 protocol_version;
 __u32 protocol_revision;
 kernel_ulong_t driver_data;
};
# 799 "include/linux/mod_devicetable.h"
struct typec_device_id {
 __u16 svid;
 __u8 mode;
 kernel_ulong_t driver_data;
};






struct tee_client_device_id {
 uuid_t uuid;
};
# 823 "include/linux/mod_devicetable.h"
struct wmi_device_id {
 const char guid_string[36 +1];
 const void *context;
};
# 836 "include/linux/mod_devicetable.h"
struct mhi_device_id {
 const char chan[32];
 kernel_ulong_t driver_data;
};




struct auxiliary_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};







struct ssam_device_id {
 __u8 match_flags;

 __u8 domain;
 __u8 category;
 __u8 target;
 __u8 instance;
 __u8 function;

 kernel_ulong_t driver_data;
};
# 885 "include/linux/mod_devicetable.h"
struct dfl_device_id {
 __u16 type;
 __u16 feature_id;
 kernel_ulong_t driver_data;
};
# 19 "include/linux/of.h" 2



# 1 "include/linux/property.h" 1
# 14 "include/linux/property.h"
# 1 "include/linux/fwnode.h" 1
# 16 "include/linux/fwnode.h"
struct fwnode_operations;
struct device;
# 30 "include/linux/fwnode.h"
struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
 struct device *dev;
 struct list_head suppliers;
 struct list_head consumers;
 u8 flags;
};

struct fwnode_link {
 struct fwnode_handle *supplier;
 struct list_head s_hook;
 struct fwnode_handle *consumer;
 struct list_head c_hook;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 73 "include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 u64 args[8];
};
# 104 "include/linux/fwnode.h"
struct fwnode_operations {
 struct fwnode_handle *(*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 const void *(*device_get_match_data)(const struct fwnode_handle *fwnode,
          const struct device *dev);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 const char *(*get_name)(const struct fwnode_handle *fwnode);
 const char *(*get_name_prefix)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
 int (*add_links)(struct fwnode_handle *fwnode);
};
# 166 "include/linux/fwnode.h"
static inline void fwnode_init(struct fwnode_handle *fwnode,
          const struct fwnode_operations *ops)
{
 fwnode->ops = ops;
 INIT_LIST_HEAD(&fwnode->consumers);
 INIT_LIST_HEAD(&fwnode->suppliers);
}

static inline void fwnode_dev_initialized(struct fwnode_handle *fwnode,
       bool initialized)
{
 if (IS_ERR_OR_NULL(fwnode))
  return;

 if (initialized)
  fwnode->flags |= ((((1UL))) << (2));
 else
  fwnode->flags &= ~((((1UL))) << (2));
}

extern u32 fw_devlink_get_flags(void);
extern bool fw_devlink_is_strict(void);
int fwnode_link_add(struct fwnode_handle *con, struct fwnode_handle *sup);
void fwnode_links_purge(struct fwnode_handle *fwnode);
void fw_devlink_purge_absent_suppliers(struct fwnode_handle *fwnode);
# 15 "include/linux/property.h" 2


struct device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_REF,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

struct fwnode_handle *dev_fwnode(struct device *dev);

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_device_is_available(const struct fwnode_handle *fwnode);
bool fwnode_property_present(const struct fwnode_handle *fwnode,
        const char *propname);
int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(const struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(const struct fwnode_handle *fwnode,
     const char *propname, const char *string);
int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
           const char *prop, const char *nargs_prop,
           unsigned int nargs, unsigned int index,
           struct fwnode_reference_args *args);

struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *fwnode,
         const char *name,
         unsigned int index);

const char *fwnode_get_name(const struct fwnode_handle *fwnode);
const char *fwnode_get_name_prefix(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_parent(
 struct fwnode_handle *fwnode);
struct device *fwnode_get_next_parent_dev(struct fwnode_handle *fwnode);
unsigned int fwnode_count_parents(const struct fwnode_handle *fwn);
struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *fwn,
         unsigned int depth);
bool fwnode_is_ancestor_of(struct fwnode_handle *test_ancestor,
      struct fwnode_handle *test_child);
struct fwnode_handle *fwnode_get_next_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
struct fwnode_handle *fwnode_get_next_available_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
# 107 "include/linux/property.h"
struct fwnode_handle *device_get_next_child_node(
 struct device *dev, struct fwnode_handle *child);





struct fwnode_handle *fwnode_get_named_child_node(
 const struct fwnode_handle *fwnode, const char *childname);
struct fwnode_handle *device_get_named_child_node(struct device *dev,
        const char *childname);

struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *fwnode);
void fwnode_handle_put(struct fwnode_handle *fwnode);

int fwnode_irq_get(struct fwnode_handle *fwnode, unsigned int index);

unsigned int device_get_child_node_count(struct device *dev);

static inline bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline int device_property_count_u8(struct device *dev, const char *propname)
{
 return device_property_read_u8_array(dev, propname, 
# 158 "include/linux/property.h" 3 4
                                                    ((void *)0)
# 158 "include/linux/property.h"
                                                        , 0);
}

static inline int device_property_count_u16(struct device *dev, const char *propname)
{
 return device_property_read_u16_array(dev, propname, 
# 163 "include/linux/property.h" 3 4
                                                     ((void *)0)
# 163 "include/linux/property.h"
                                                         , 0);
}

static inline int device_property_count_u32(struct device *dev, const char *propname)
{
 return device_property_read_u32_array(dev, propname, 
# 168 "include/linux/property.h" 3 4
                                                     ((void *)0)
# 168 "include/linux/property.h"
                                                         , 0);
}

static inline int device_property_count_u64(struct device *dev, const char *propname)
{
 return device_property_read_u64_array(dev, propname, 
# 173 "include/linux/property.h" 3 4
                                                     ((void *)0)
# 173 "include/linux/property.h"
                                                         , 0);
}

static inline int device_property_string_array_count(struct device *dev,
           const char *propname)
{
 return device_property_read_string_array(dev, propname, 
# 179 "include/linux/property.h" 3 4
                                                        ((void *)0)
# 179 "include/linux/property.h"
                                                            , 0);
}

static inline bool fwnode_property_read_bool(const struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline int fwnode_property_read_u8(const struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline int fwnode_property_read_u16(const struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline int fwnode_property_read_u32(const struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline int fwnode_property_read_u64(const struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}

static inline int fwnode_property_count_u8(const struct fwnode_handle *fwnode,
        const char *propname)
{
 return fwnode_property_read_u8_array(fwnode, propname, 
# 215 "include/linux/property.h" 3 4
                                                       ((void *)0)
# 215 "include/linux/property.h"
                                                           , 0);
}

static inline int fwnode_property_count_u16(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u16_array(fwnode, propname, 
# 221 "include/linux/property.h" 3 4
                                                        ((void *)0)
# 221 "include/linux/property.h"
                                                            , 0);
}

static inline int fwnode_property_count_u32(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u32_array(fwnode, propname, 
# 227 "include/linux/property.h" 3 4
                                                        ((void *)0)
# 227 "include/linux/property.h"
                                                            , 0);
}

static inline int fwnode_property_count_u64(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u64_array(fwnode, propname, 
# 233 "include/linux/property.h" 3 4
                                                        ((void *)0)
# 233 "include/linux/property.h"
                                                            , 0);
}

static inline int
fwnode_property_string_array_count(const struct fwnode_handle *fwnode,
       const char *propname)
{
 return fwnode_property_read_string_array(fwnode, propname, 
# 240 "include/linux/property.h" 3 4
                                                           ((void *)0)
# 240 "include/linux/property.h"
                                                               , 0);
}

struct software_node;







struct software_node_ref_args {
 const struct software_node *node;
 unsigned int nargs;
 u64 args[8];
};
# 273 "include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_inline;
 enum dev_prop_type type;
 union {
  const void *pointer;
  union {
   u8 u8_data[sizeof(u64) / sizeof(u8)];
   u16 u16_data[sizeof(u64) / sizeof(u16)];
   u32 u32_data[sizeof(u64) / sizeof(u32)];
   u64 u64_data[sizeof(u64) / sizeof(u64)];
   const char *str[sizeof(u64) / sizeof(char *)];
  } value;
 };
};
# 375 "include/linux/property.h"
struct property_entry *
property_entries_dup(const struct property_entry *properties);

void property_entries_free(const struct property_entry *properties);

int device_add_properties(struct device *dev,
     const struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

const void *device_get_match_data(struct device *dev);

int device_get_phy_mode(struct device *dev);

void *device_get_mac_address(struct device *dev, char *addr, int alen);

int fwnode_get_phy_mode(struct fwnode_handle *fwnode);
void *fwnode_get_mac_address(struct fwnode_handle *fwnode,
        char *addr, int alen);
struct fwnode_handle *fwnode_graph_get_next_endpoint(
 const struct fwnode_handle *fwnode, struct fwnode_handle *prev);
struct fwnode_handle *
fwnode_graph_get_port_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port_parent(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_endpoint(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *
fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port,
        u32 endpoint);

static inline bool fwnode_graph_is_endpoint(struct fwnode_handle *fwnode)
{
 return fwnode_property_present(fwnode, "remote-endpoint");
}
# 429 "include/linux/property.h"
struct fwnode_handle *
fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *fwnode,
    u32 port, u32 endpoint, unsigned long flags);





int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
    struct fwnode_endpoint *endpoint);

typedef void *(*devcon_match_fn_t)(struct fwnode_handle *fwnode, const char *id,
       void *data);

void *fwnode_connection_find_match(struct fwnode_handle *fwnode,
       const char *con_id, void *data,
       devcon_match_fn_t match);

static inline void *device_connection_find_match(struct device *dev,
       const char *con_id, void *data,
       devcon_match_fn_t match)
{
 return fwnode_connection_find_match(dev_fwnode(dev), con_id, data, match);
}
# 463 "include/linux/property.h"
struct software_node {
 const char *name;
 const struct software_node *parent;
 const struct property_entry *properties;
};

bool is_software_node(const struct fwnode_handle *fwnode);
const struct software_node *
to_software_node(const struct fwnode_handle *fwnode);
struct fwnode_handle *software_node_fwnode(const struct software_node *node);

const struct software_node *
software_node_find_by_name(const struct software_node *parent,
      const char *name);

int software_node_register_nodes(const struct software_node *nodes);
void software_node_unregister_nodes(const struct software_node *nodes);

int software_node_register_node_group(const struct software_node **node_group);
void software_node_unregister_node_group(const struct software_node **node_group);

int software_node_register(const struct software_node *node);
void software_node_unregister(const struct software_node *node);

int software_node_notify(struct device *dev, unsigned long action);

struct fwnode_handle *
fwnode_create_software_node(const struct property_entry *properties,
       const struct fwnode_handle *parent);
void fwnode_remove_software_node(struct fwnode_handle *fwnode);

int device_add_software_node(struct device *dev, const struct software_node *node);
void device_remove_software_node(struct device *dev);

int device_create_managed_software_node(struct device *dev,
     const struct property_entry *properties,
     const struct software_node *parent);
# 23 "include/linux/of.h" 2



# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 27 "include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;

 unsigned long _flags;





 struct bin_attribute attr;

};





struct device_node {
 const char *name;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;

 struct kobject kobj;

 unsigned long _flags;
 void *data;




};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
extern const struct fwnode_operations of_fwnode_ops;
static inline void of_node_init(struct device_node *node)
{

 kobject_init(&node->kobj, &of_node_ktype);

 fwnode_init(&node->fwnode, &of_fwnode_ops);
}
# 121 "include/linux/of.h"
extern struct device_node *of_node_get(struct device_node *node);
extern void of_node_put(struct device_node *node);
# 133 "include/linux/of.h"
extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 153 "include/linux/of.h"
void of_core_init(void);

static inline bool is_of_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
}
# 178 "include/linux/of.h"
static inline bool of_have_populated_dt(void)
{
 return of_root != 
# 180 "include/linux/of.h" 3 4
                  ((void *)0)
# 180 "include/linux/of.h"
                      ;
}

static inline bool of_node_is_root(const struct device_node *node)
{
 return node && (node->parent == 
# 185 "include/linux/of.h" 3 4
                                ((void *)0)
# 185 "include/linux/of.h"
                                    );
}

static inline int of_node_check_flag(struct device_node *n, unsigned long flag)
{
 return test_bit(flag, &n->_flags);
}

static inline int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return test_and_set_bit(flag, &n->_flags);
}

static inline void of_node_set_flag(struct device_node *n, unsigned long flag)
{
 set_bit(flag, &n->_flags);
}

static inline void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
 clear_bit(flag, &n->_flags);
}


static inline int of_property_check_flag(struct property *p, unsigned long flag)
{
 return test_bit(flag, &p->_flags);
}

static inline void of_property_set_flag(struct property *p, unsigned long flag)
{
 set_bit(flag, &p->_flags);
}

static inline void of_property_clear_flag(struct property *p, unsigned long flag)
{
 clear_bit(flag, &p->_flags);
}


extern struct device_node *__of_find_all_nodes(struct device_node *prev);
extern struct device_node *of_find_all_nodes(struct device_node *prev);






static inline u64 of_read_number(const __be32 *cell, int size)
{
 u64 r = 0;
 for (; size--; cell++)
  r = (r << 32) | (__builtin_constant_p((__u32)(( __u32)(__be32)(*cell))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*cell)));
 return r;
}


static inline unsigned long of_read_ulong(const __be32 *cell, int size)
{

 return of_read_number(cell, size);
}
# 256 "include/linux/of.h"
extern bool of_node_name_eq(const struct device_node *np, const char *name);
extern bool of_node_name_prefix(const struct device_node *np, const char *prefix);

static inline const char *of_node_full_name(const struct device_node *np)
{
 return np ? np->full_name : "<no-node>";
}




extern struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name);
extern struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type);
extern struct device_node *of_find_compatible_node(struct device_node *from,
 const char *type, const char *compat);
extern struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match);

extern struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts);
static inline struct device_node *of_find_node_by_path(const char *path)
{
 return of_find_node_opts_by_path(path, 
# 282 "include/linux/of.h" 3 4
                                       ((void *)0)
# 282 "include/linux/of.h"
                                           );
}

extern struct device_node *of_find_node_by_phandle(phandle handle);
extern struct device_node *of_get_parent(const struct device_node *node);
extern struct device_node *of_get_next_parent(struct device_node *node);
extern struct device_node *of_get_next_child(const struct device_node *node,
          struct device_node *prev);
extern struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev);

extern struct device_node *of_get_compatible_child(const struct device_node *parent,
     const char *compatible);
extern struct device_node *of_get_child_by_name(const struct device_node *node,
     const char *name);


extern struct device_node *of_find_next_cache_node(const struct device_node *);
extern int of_find_last_cache_level(unsigned int cpu);
extern struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name);

extern struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp);
extern int of_property_count_elems_of_size(const struct device_node *np,
    const char *propname, int elem_size);
extern int of_property_read_u32_index(const struct device_node *np,
           const char *propname,
           u32 index, u32 *out_value);
extern int of_property_read_u64_index(const struct device_node *np,
           const char *propname,
           u32 index, u64 *out_value);
extern int of_property_read_variable_u8_array(const struct device_node *np,
     const char *propname, u8 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u16_array(const struct device_node *np,
     const char *propname, u16 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u32_array(const struct device_node *np,
     const char *propname,
     u32 *out_values,
     size_t sz_min,
     size_t sz_max);
extern int of_property_read_u64(const struct device_node *np,
    const char *propname, u64 *out_value);
extern int of_property_read_variable_u64_array(const struct device_node *np,
     const char *propname,
     u64 *out_values,
     size_t sz_min,
     size_t sz_max);

extern int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string);
extern int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string);
extern int of_property_read_string_helper(const struct device_node *np,
           const char *propname,
           const char **out_strs, size_t sz, int index);
extern int of_device_is_compatible(const struct device_node *device,
       const char *);
extern int of_device_compatible_match(struct device_node *device,
          const char *const *compat);
extern bool of_device_is_available(const struct device_node *device);
extern bool of_device_is_big_endian(const struct device_node *device);
extern const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp);
extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
extern struct device_node *of_get_next_cpu_node(struct device_node *prev);
extern struct device_node *of_get_cpu_state_node(struct device_node *cpu_node,
       int index);




extern int of_n_addr_cells(struct device_node *np);
extern int of_n_size_cells(struct device_node *np);
extern const struct of_device_id *of_match_node(
 const struct of_device_id *matches, const struct device_node *node);
extern int of_modalias_node(struct device_node *node, char *modalias, int len);
extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
extern struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index);
extern int of_parse_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_args_map(const struct device_node *np,
 const char *list_name, const char *stem_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args);
extern int of_count_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name);


extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count);

extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size);

extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
extern int of_alias_get_id(struct device_node *np, const char *stem);
extern int of_alias_get_highest_id(const char *stem);
extern int of_alias_get_alias_list(const struct of_device_id *matches,
       const char *stem, unsigned long *bitmap,
       unsigned int nbits);

extern int of_machine_is_compatible(const char *compat);

extern int of_add_property(struct device_node *np, struct property *prop);
extern int of_remove_property(struct device_node *np, struct property *prop);
extern int of_update_property(struct device_node *np, struct property *newprop);
# 413 "include/linux/of.h"
extern int of_attach_node(struct device_node *);
extern int of_detach_node(struct device_node *);
# 438 "include/linux/of.h"
static inline int of_property_read_u8_array(const struct device_node *np,
         const char *propname,
         u8 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u8_array(np, propname, out_values,
           sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 470 "include/linux/of.h"
static inline int of_property_read_u16_array(const struct device_node *np,
          const char *propname,
          u16 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u16_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 500 "include/linux/of.h"
static inline int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u32_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 530 "include/linux/of.h"
static inline int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u64_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 550 "include/linux/of.h"
const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
          u32 *pu);







const char *of_prop_next_string(struct property *prop, const char *cur);

bool of_console_check(struct device_node *dn, char *name, int index);

extern int of_cpu_node_to_id(struct device_node *np);

int of_map_id(struct device_node *np, u32 id,
        const char *map_name, const char *map_mask_name,
        struct device_node **target, u32 *id_out);

phys_addr_t of_dma_get_max_cpu_address(struct device_node *np);

struct kimage;
void *of_kexec_alloc_and_setup_fdt(const struct kimage *image,
       unsigned long initrd_load_addr,
       unsigned long initrd_len,
       const char *cmdline, size_t extra_fdt_size);
int ima_get_kexec_buffer(void **addr, size_t *size);
int ima_free_kexec_buffer(void);
# 1031 "include/linux/of.h"
static inline int of_prop_val_eq(struct property *p1, struct property *p2)
{
 return p1->length == p2->length &&
        !memcmp(p1->value, p2->value, (size_t)p1->length);
}


extern int of_node_to_nid(struct device_node *np);
# 1047 "include/linux/of.h"
extern int of_numa_init(void);







static inline struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, 
# 1059 "include/linux/of.h" 3 4
                                                      ((void *)0)
# 1059 "include/linux/of.h"
                                                          );
}

static inline const char *of_node_get_device_type(const struct device_node *np)
{
 return of_get_property(np, "device_type", 
# 1064 "include/linux/of.h" 3 4
                                          ((void *)0)
# 1064 "include/linux/of.h"
                                              );
}

static inline bool of_node_is_type(const struct device_node *np, const char *type)
{
 const char *match = of_node_get_device_type(np);

 return np && match && type && !strcmp(match, type);
}
# 1087 "include/linux/of.h"
static inline int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 1106 "include/linux/of.h"
static inline int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 1125 "include/linux/of.h"
static inline int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 1144 "include/linux/of.h"
static inline int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 1163 "include/linux/of.h"
static inline int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 1183 "include/linux/of.h"
static inline int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, 
# 1186 "include/linux/of.h" 3 4
                                                    ((void *)0)
# 1186 "include/linux/of.h"
                                                        , 0, 0);
}
# 1208 "include/linux/of.h"
static inline int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 1225 "include/linux/of.h"
static inline bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, 
# 1228 "include/linux/of.h" 3 4
                                                       ((void *)0)
# 1228 "include/linux/of.h"
                                                           );

 return prop ? true : false;
}

static inline int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 1310 "include/linux/of.h"
static inline int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, 
# 1315 "include/linux/of.h" 3 4
((void *)0)
# 1315 "include/linux/of.h"
); child != 
# 1315 "include/linux/of.h" 3 4
((void *)0)
# 1315 "include/linux/of.h"
; child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, 
# 1326 "include/linux/of.h" 3 4
((void *)0)
# 1326 "include/linux/of.h"
); child != 
# 1326 "include/linux/of.h" 3 4
((void *)0)
# 1326 "include/linux/of.h"
; child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1347 "include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef int (*of_init_fn_1_ret)(struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1372 "include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1390 "include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};


extern int of_reconfig_notifier_register(struct notifier_block *);
extern int of_reconfig_notifier_unregister(struct notifier_block *);
extern int of_reconfig_notify(unsigned long, struct of_reconfig_data *rd);
extern int of_reconfig_get_state_change(unsigned long action,
     struct of_reconfig_data *arg);

extern void of_changeset_init(struct of_changeset *ocs);
extern void of_changeset_destroy(struct of_changeset *ocs);
extern int of_changeset_apply(struct of_changeset *ocs);
extern int of_changeset_revert(struct of_changeset *ocs);
extern int of_changeset_action(struct of_changeset *ocs,
  unsigned long action, struct device_node *np,
  struct property *prop);

static inline int of_changeset_attach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0001, np, 
# 1418 "include/linux/of.h" 3 4
                                                             ((void *)0)
# 1418 "include/linux/of.h"
                                                                 );
}

static inline int of_changeset_detach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0002, np, 
# 1424 "include/linux/of.h" 3 4
                                                             ((void *)0)
# 1424 "include/linux/of.h"
                                                                 );
}

static inline int of_changeset_add_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0003, np, prop);
}

static inline int of_changeset_remove_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0004, np, prop);
}

static inline int of_changeset_update_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0005, np, prop);
}
# 1471 "include/linux/of.h"
static inline bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}





enum of_overlay_notify_action {
 OF_OVERLAY_PRE_APPLY = 0,
 OF_OVERLAY_POST_APPLY,
 OF_OVERLAY_PRE_REMOVE,
 OF_OVERLAY_POST_REMOVE,
};

struct of_overlay_notify_data {
 struct device_node *overlay;
 struct device_node *target;
};



int of_overlay_fdt_apply(const void *overlay_fdt, u32 overlay_fdt_size,
    int *ovcs_id);
int of_overlay_remove(int *ovcs_id);
int of_overlay_remove_all(void);

int of_overlay_notifier_register(struct notifier_block *nb);
int of_overlay_notifier_unregister(struct notifier_block *nb);
# 36 "include/linux/irqdomain.h" 2



struct device_node;
struct fwnode_handle;
struct irq_domain;
struct irq_chip;
struct irq_data;
struct cpumask;
struct seq_file;
struct irq_affinity_desc;
# 63 "include/linux/irqdomain.h"
struct irq_fwspec {
 struct fwnode_handle *fwnode;
 int param_count;
 u32 param[16];
};
# 76 "include/linux/irqdomain.h"
enum irq_domain_bus_token {
 DOMAIN_BUS_ANY = 0,
 DOMAIN_BUS_WIRED,
 DOMAIN_BUS_GENERIC_MSI,
 DOMAIN_BUS_PCI_MSI,
 DOMAIN_BUS_PLATFORM_MSI,
 DOMAIN_BUS_NEXUS,
 DOMAIN_BUS_IPI,
 DOMAIN_BUS_FSL_MC_MSI,
 DOMAIN_BUS_TI_SCI_INTA_MSI,
 DOMAIN_BUS_WAKEUP,
 DOMAIN_BUS_VMD_MSI,
};
# 105 "include/linux/irqdomain.h"
struct irq_domain_ops {
 int (*match)(struct irq_domain *d, struct device_node *node,
       enum irq_domain_bus_token bus_token);
 int (*select)(struct irq_domain *d, struct irq_fwspec *fwspec,
        enum irq_domain_bus_token bus_token);
 int (*map)(struct irq_domain *d, unsigned int virq, irq_hw_number_t hw);
 void (*unmap)(struct irq_domain *d, unsigned int virq);
 int (*xlate)(struct irq_domain *d, struct device_node *node,
       const u32 *intspec, unsigned int intsize,
       unsigned long *out_hwirq, unsigned int *out_type);


 int (*alloc)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs, void *arg);
 void (*free)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs);
 int (*activate)(struct irq_domain *d, struct irq_data *irqd, bool reserve);
 void (*deactivate)(struct irq_domain *d, struct irq_data *irq_data);
 int (*translate)(struct irq_domain *d, struct irq_fwspec *fwspec,
    unsigned long *out_hwirq, unsigned int *out_type);





};

extern struct irq_domain_ops irq_generic_chip_ops;

struct irq_domain_chip_generic;
# 161 "include/linux/irqdomain.h"
struct irq_domain {
 struct list_head link;
 const char *name;
 const struct irq_domain_ops *ops;
 void *host_data;
 unsigned int flags;
 unsigned int mapcount;


 struct fwnode_handle *fwnode;
 enum irq_domain_bus_token bus_token;
 struct irq_domain_chip_generic *gc;

 struct irq_domain *parent;



 irq_hw_number_t hwirq_max;
 unsigned int revmap_direct_max_irq;
 unsigned int revmap_size;
 struct xarray revmap_tree;
 struct mutex revmap_tree_mutex;
 unsigned int linear_revmap[];
};


enum {

 IRQ_DOMAIN_FLAG_HIERARCHY = (1 << 0),


 IRQ_DOMAIN_NAME_ALLOCATED = (1 << 1),


 IRQ_DOMAIN_FLAG_IPI_PER_CPU = (1 << 2),


 IRQ_DOMAIN_FLAG_IPI_SINGLE = (1 << 3),


 IRQ_DOMAIN_FLAG_MSI = (1 << 4),


 IRQ_DOMAIN_FLAG_MSI_REMAP = (1 << 5),






 IRQ_DOMAIN_MSI_NOMASK_QUIRK = (1 << 6),






 IRQ_DOMAIN_FLAG_NONCORE = (1 << 16),
};

static inline struct device_node *irq_domain_get_of_node(struct irq_domain *d)
{
 return ({ typeof(d->fwnode) __to_of_node_fwnode = (d->fwnode); is_of_node(__to_of_node_fwnode) ? ({ void *__mptr = (void *)(__to_of_node_fwnode); do { } while (0); ((struct device_node *)(__mptr - ((size_t)&((struct device_node *)0)->fwnode))); }) : 
# 223 "include/linux/irqdomain.h" 3 4
       ((void *)0)
# 223 "include/linux/irqdomain.h"
       ; });
}


struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int type, int id,
      const char *name, phys_addr_t *pa);

enum {
 IRQCHIP_FWNODE_REAL,
 IRQCHIP_FWNODE_NAMED,
 IRQCHIP_FWNODE_NAMED_ID,
};

static inline
struct fwnode_handle *irq_domain_alloc_named_fwnode(const char *name)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED, 0, name, 
# 239 "include/linux/irqdomain.h" 3 4
                                                                ((void *)0)
# 239 "include/linux/irqdomain.h"
                                                                    );
}

static inline
struct fwnode_handle *irq_domain_alloc_named_id_fwnode(const char *name, int id)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED_ID, id, name,
      
# 246 "include/linux/irqdomain.h" 3 4
     ((void *)0)
# 246 "include/linux/irqdomain.h"
         );
}

static inline struct fwnode_handle *irq_domain_alloc_fwnode(phys_addr_t *pa)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_REAL, 0, 
# 251 "include/linux/irqdomain.h" 3 4
                                                         ((void *)0)
# 251 "include/linux/irqdomain.h"
                                                             , pa);
}

void irq_domain_free_fwnode(struct fwnode_handle *fwnode);
struct irq_domain *__irq_domain_add(struct fwnode_handle *fwnode, int size,
        irq_hw_number_t hwirq_max, int direct_max,
        const struct irq_domain_ops *ops,
        void *host_data);
struct irq_domain *irq_domain_create_simple(struct fwnode_handle *fwnode,
         unsigned int size,
         unsigned int first_irq,
         const struct irq_domain_ops *ops,
         void *host_data);
struct irq_domain *irq_domain_add_legacy(struct device_node *of_node,
      unsigned int size,
      unsigned int first_irq,
      irq_hw_number_t first_hwirq,
      const struct irq_domain_ops *ops,
      void *host_data);
struct irq_domain *irq_domain_create_legacy(struct fwnode_handle *fwnode,
         unsigned int size,
         unsigned int first_irq,
         irq_hw_number_t first_hwirq,
         const struct irq_domain_ops *ops,
         void *host_data);
extern struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *fwspec,
         enum irq_domain_bus_token bus_token);
extern bool irq_domain_check_msi_remap(void);
extern void irq_set_default_host(struct irq_domain *host);
extern struct irq_domain *irq_get_default_host(void);
extern int irq_domain_alloc_descs(int virq, unsigned int nr_irqs,
      irq_hw_number_t hwirq, int node,
      const struct irq_affinity_desc *affinity);

static inline struct fwnode_handle *of_node_to_fwnode(struct device_node *node)
{
 return node ? &node->fwnode : 
# 287 "include/linux/irqdomain.h" 3 4
                              ((void *)0)
# 287 "include/linux/irqdomain.h"
                                  ;
}

extern const struct fwnode_operations irqchip_fwnode_ops;

static inline bool is_fwnode_irqchip(struct fwnode_handle *fwnode)
{
 return fwnode && fwnode->ops == &irqchip_fwnode_ops;
}

extern void irq_domain_update_bus_token(struct irq_domain *domain,
     enum irq_domain_bus_token bus_token);

static inline
struct irq_domain *irq_find_matching_fwnode(struct fwnode_handle *fwnode,
         enum irq_domain_bus_token bus_token)
{
 struct irq_fwspec fwspec = {
  .fwnode = fwnode,
 };

 return irq_find_matching_fwspec(&fwspec, bus_token);
}

static inline struct irq_domain *irq_find_matching_host(struct device_node *node,
       enum irq_domain_bus_token bus_token)
{
 return irq_find_matching_fwnode(of_node_to_fwnode(node), bus_token);
}

static inline struct irq_domain *irq_find_host(struct device_node *node)
{
 struct irq_domain *d;

 d = irq_find_matching_host(node, DOMAIN_BUS_WIRED);
 if (!d)
  d = irq_find_matching_host(node, DOMAIN_BUS_ANY);

 return d;
}

static inline struct irq_domain *irq_domain_add_simple(struct device_node *of_node,
             unsigned int size,
             unsigned int first_irq,
             const struct irq_domain_ops *ops,
             void *host_data)
{
 return irq_domain_create_simple(of_node_to_fwnode(of_node), size, first_irq, ops, host_data);
}
# 344 "include/linux/irqdomain.h"
static inline struct irq_domain *irq_domain_add_linear(struct device_node *of_node,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), size, size, 0, ops, host_data);
}
static inline struct irq_domain *irq_domain_add_nomap(struct device_node *of_node,
      unsigned int max_irq,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), 0, max_irq, max_irq, ops, host_data);
}
static inline struct irq_domain *irq_domain_add_legacy_isa(
    struct device_node *of_node,
    const struct irq_domain_ops *ops,
    void *host_data)
{
 return irq_domain_add_legacy(of_node, 16, 0, 0, ops,
         host_data);
}
static inline struct irq_domain *irq_domain_add_tree(struct device_node *of_node,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), 0, ~0, 0, ops, host_data);
}

static inline struct irq_domain *irq_domain_create_linear(struct fwnode_handle *fwnode,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, size, size, 0, ops, host_data);
}

static inline struct irq_domain *irq_domain_create_tree(struct fwnode_handle *fwnode,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, 0, ~0, 0, ops, host_data);
}

extern void irq_domain_remove(struct irq_domain *host);

extern int irq_domain_associate(struct irq_domain *domain, unsigned int irq,
     irq_hw_number_t hwirq);
extern void irq_domain_associate_many(struct irq_domain *domain,
          unsigned int irq_base,
          irq_hw_number_t hwirq_base, int count);

extern unsigned int irq_create_mapping_affinity(struct irq_domain *host,
          irq_hw_number_t hwirq,
          const struct irq_affinity_desc *affinity);
extern unsigned int irq_create_fwspec_mapping(struct irq_fwspec *fwspec);
extern void irq_dispose_mapping(unsigned int virq);

static inline unsigned int irq_create_mapping(struct irq_domain *host,
           irq_hw_number_t hwirq)
{
 return irq_create_mapping_affinity(host, hwirq, 
# 405 "include/linux/irqdomain.h" 3 4
                                                ((void *)0)
# 405 "include/linux/irqdomain.h"
                                                    );
}
# 419 "include/linux/irqdomain.h"
static inline unsigned int irq_linear_revmap(struct irq_domain *domain,
          irq_hw_number_t hwirq)
{
 return hwirq < domain->revmap_size ? domain->linear_revmap[hwirq] : 0;
}
extern unsigned int irq_find_mapping(struct irq_domain *host,
         irq_hw_number_t hwirq);
extern unsigned int irq_create_direct_mapping(struct irq_domain *host);

extern const struct irq_domain_ops irq_domain_simple_ops;


int irq_domain_xlate_onecell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_twocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_onetwocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);

int irq_domain_translate_twocell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);

int irq_domain_translate_onecell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);


int irq_reserve_ipi(struct irq_domain *domain, const struct cpumask *dest);
int irq_destroy_ipi(unsigned int irq, const struct cpumask *dest);


extern struct irq_data *irq_domain_get_irq_data(struct irq_domain *domain,
      unsigned int virq);
extern void irq_domain_set_info(struct irq_domain *domain, unsigned int virq,
    irq_hw_number_t hwirq, struct irq_chip *chip,
    void *chip_data, irq_flow_handler_t handler,
    void *handler_data, const char *handler_name);
extern void irq_domain_reset_irq_data(struct irq_data *irq_data);

extern struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *parent,
   unsigned int flags, unsigned int size,
   struct fwnode_handle *fwnode,
   const struct irq_domain_ops *ops, void *host_data);

static inline struct irq_domain *irq_domain_add_hierarchy(struct irq_domain *parent,
         unsigned int flags,
         unsigned int size,
         struct device_node *node,
         const struct irq_domain_ops *ops,
         void *host_data)
{
 return irq_domain_create_hierarchy(parent, flags, size,
        of_node_to_fwnode(node),
        ops, host_data);
}

extern int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
       unsigned int nr_irqs, int node, void *arg,
       bool realloc,
       const struct irq_affinity_desc *affinity);
extern void irq_domain_free_irqs(unsigned int virq, unsigned int nr_irqs);
extern int irq_domain_activate_irq(struct irq_data *irq_data, bool early);
extern void irq_domain_deactivate_irq(struct irq_data *irq_data);

static inline int irq_domain_alloc_irqs(struct irq_domain *domain,
   unsigned int nr_irqs, int node, void *arg)
{
 return __irq_domain_alloc_irqs(domain, -1, nr_irqs, node, arg, false,
           
# 493 "include/linux/irqdomain.h" 3 4
          ((void *)0)
# 493 "include/linux/irqdomain.h"
              );
}

extern int irq_domain_alloc_irqs_hierarchy(struct irq_domain *domain,
        unsigned int irq_base,
        unsigned int nr_irqs, void *arg);
extern int irq_domain_set_hwirq_and_chip(struct irq_domain *domain,
      unsigned int virq,
      irq_hw_number_t hwirq,
      struct irq_chip *chip,
      void *chip_data);
extern void irq_domain_free_irqs_common(struct irq_domain *domain,
     unsigned int virq,
     unsigned int nr_irqs);
extern void irq_domain_free_irqs_top(struct irq_domain *domain,
         unsigned int virq, unsigned int nr_irqs);

extern int irq_domain_push_irq(struct irq_domain *domain, int virq, void *arg);
extern int irq_domain_pop_irq(struct irq_domain *domain, int virq);

extern int irq_domain_alloc_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs, void *arg);

extern void irq_domain_free_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs);

extern int irq_domain_disconnect_hierarchy(struct irq_domain *domain,
        unsigned int virq);

static inline bool irq_domain_is_hierarchy(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_HIERARCHY;
}

static inline bool irq_domain_is_ipi(struct irq_domain *domain)
{
 return domain->flags &
  (IRQ_DOMAIN_FLAG_IPI_PER_CPU | IRQ_DOMAIN_FLAG_IPI_SINGLE);
}

static inline bool irq_domain_is_ipi_per_cpu(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_PER_CPU;
}

static inline bool irq_domain_is_ipi_single(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_SINGLE;
}

static inline bool irq_domain_is_msi(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI;
}

static inline bool irq_domain_is_msi_remap(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI_REMAP;
}

extern bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *domain);
# 19 "include/linux/irq_pipeline.h" 2

# 1 "include/linux/interrupt.h" 1
# 9 "include/linux/interrupt.h"
# 1 "include/linux/irqreturn.h" 1
# 11 "include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 10 "include/linux/interrupt.h" 2

# 1 "include/linux/hardirq.h" 1




# 1 "include/linux/context_tracking_state.h" 1





# 1 "include/linux/static_key.h" 1
# 7 "include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 49 "include/linux/context_tracking_state.h"
static inline bool context_tracking_in_user(void) { return false; }
static inline bool context_tracking_enabled(void) { return false; }
static inline bool context_tracking_enabled_cpu(int cpu) { return false; }
static inline bool context_tracking_enabled_this_cpu(void) { return false; }
# 6 "include/linux/hardirq.h" 2


# 1 "include/linux/ftrace_irq.h" 1
# 10 "include/linux/ftrace_irq.h"
static inline void ftrace_nmi_enter(void)
{




}

static inline void ftrace_nmi_exit(void)
{




}
# 9 "include/linux/hardirq.h" 2

# 1 "include/linux/vtime.h" 1
# 28 "include/linux/vtime.h"
static inline void vtime_user_enter(struct task_struct *tsk) { }
static inline void vtime_user_exit(struct task_struct *tsk) { }
static inline void vtime_guest_enter(struct task_struct *tsk) { }
static inline void vtime_guest_exit(struct task_struct *tsk) { }
static inline void vtime_init_idle(struct task_struct *tsk, int cpu) { }
# 41 "include/linux/vtime.h"
static inline void vtime_account_irq(struct task_struct *tsk, unsigned int offset) { }
static inline void vtime_account_softirq(struct task_struct *tsk) { }
static inline void vtime_account_hardirq(struct task_struct *tsk) { }
static inline void vtime_flush(struct task_struct *tsk) { }
# 116 "include/linux/vtime.h"
static inline bool vtime_accounting_enabled_this_cpu(void) { return false; }
static inline void vtime_task_switch(struct task_struct *prev) { }

static 
# 119 "include/linux/vtime.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 119 "include/linux/vtime.h"
                      void vtime_account_guest_enter(void)
{
 get_current()->flags |= 0x00000001;
}

static 
# 124 "include/linux/vtime.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 124 "include/linux/vtime.h"
                      void vtime_account_guest_exit(void)
{
 get_current()->flags &= ~0x00000001;
}





extern void irqtime_account_irq(struct task_struct *tsk, unsigned int offset);




static inline void account_softirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << (0 + 8)));
 irqtime_account_irq(tsk, (1UL << (0 + 8)));
}

static inline void account_softirq_exit(struct task_struct *tsk)
{
 vtime_account_softirq(tsk);
 irqtime_account_irq(tsk, 0);
}

static inline void account_hardirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
 irqtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
}

static inline void account_hardirq_exit(struct task_struct *tsk)
{
 vtime_account_hardirq(tsk);
 irqtime_account_irq(tsk, 0);
}
# 11 "include/linux/hardirq.h" 2

# 1 "arch/arm64/include/asm/hardirq.h" 1
# 12 "arch/arm64/include/asm/hardirq.h"
# 1 "arch/arm64/include/asm/irq.h" 1






# 1 "include/asm-generic/irq.h" 1
# 14 "include/asm-generic/irq.h"
static inline int irq_canonicalize(int irq)
{
 return irq;
}
# 8 "arch/arm64/include/asm/irq.h" 2

struct pt_regs;

int set_handle_irq(void (*handle_irq)(struct pt_regs *));

int set_handle_fiq(void (*handle_fiq)(struct pt_regs *));

static inline int nr_legacy_irqs(void)
{
 return 0;
}
# 13 "arch/arm64/include/asm/hardirq.h" 2
# 1 "arch/arm64/include/asm/kvm_arm.h" 1
# 10 "arch/arm64/include/asm/kvm_arm.h"
# 1 "arch/arm64/include/asm/esr.h" 1
# 326 "arch/arm64/include/asm/esr.h"
static inline bool esr_is_data_abort(u32 esr)
{
 const u32 ec = (((esr) & ((((0x3FUL))) << (26))) >> (26));

 return ec == (0x24) || ec == (0x25);
}

const char *esr_get_class_string(u32 esr);
# 11 "arch/arm64/include/asm/kvm_arm.h" 2
# 14 "arch/arm64/include/asm/hardirq.h" 2



# 1 "include/asm-generic/hardirq.h" 1







typedef struct {
 unsigned int __softirq_pending;



} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << (6)))));

# 1 "include/linux/irq.h" 1
# 19 "include/linux/irq.h"
# 1 "include/linux/irq_work.h" 1
# 16 "include/linux/irq_work.h"
struct irq_work {
 struct __call_single_node node;
 void (*func)(struct irq_work *);
};
# 33 "include/linux/irq_work.h"
static inline
void init_irq_work(struct irq_work *work, void (*func)(struct irq_work *))
{
 *work = (struct irq_work){ .node = { .u_flags = (0), }, .func = (func), };
}

static inline bool irq_work_is_pending(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_PENDING;
}

static inline bool irq_work_is_busy(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_BUSY;
}

bool irq_work_queue(struct irq_work *work);
bool irq_work_queue_on(struct irq_work *work, int cpu);

void irq_work_tick(void);
void irq_work_sync(struct irq_work *work);


# 1 "arch/arm64/include/asm/irq_work.h" 1




extern void arch_irq_work_raise(void);

static inline bool arch_irq_work_has_interrupt(void)
{
 return true;
}
# 57 "include/linux/irq_work.h" 2

void irq_work_run(void);
bool irq_work_needs_cpu(void);
void irq_work_single(void *arg);
# 20 "include/linux/irq.h" 2

# 1 "include/linux/io.h" 1
# 13 "include/linux/io.h"
# 1 "arch/arm64/include/asm/io.h" 1
# 12 "arch/arm64/include/asm/io.h"
# 1 "include/linux/pgtable.h" 1





# 1 "arch/arm64/include/asm/pgtable.h" 1
# 9 "arch/arm64/include/asm/pgtable.h"
# 1 "arch/arm64/include/asm/proc-fns.h" 1
# 16 "arch/arm64/include/asm/proc-fns.h"
struct cpu_suspend_ctx;

extern void cpu_do_idle(void);
extern void cpu_do_suspend(struct cpu_suspend_ctx *ptr);
extern u64 cpu_do_resume(phys_addr_t ptr, u64 idmap_ttbr);
# 10 "arch/arm64/include/asm/pgtable.h" 2




# 1 "arch/arm64/include/asm/pgtable-prot.h" 1
# 34 "arch/arm64/include/asm/pgtable-prot.h"
extern bool arm64_use_ng_mappings;
# 15 "arch/arm64/include/asm/pgtable.h" 2
# 1 "arch/arm64/include/asm/tlbflush.h" 1
# 76 "arch/arm64/include/asm/tlbflush.h"
static inline unsigned long get_trans_granule(void)
{
 switch (((1UL) << 12)) {
 case 0x00001000:
  return 1;
 case 0x00004000:
  return 2;
 case 0x00010000:
  return 3;
 default:
  return 0;
 }
}
# 230 "arch/arm64/include/asm/tlbflush.h"
static inline void local_flush_tlb_all(void)
{
 asm volatile("dsb " "nshst" : : : "memory");
 asm ( "tlbi " "vmalle1" "\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vmalle1" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : );
 asm volatile("dsb " "nsh" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline void flush_tlb_all(void)
{
 asm volatile("dsb " "ishst" : : : "memory");
 asm ( "tlbi " "vmalle1is" "\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vmalle1is" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : );
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline void flush_tlb_mm(struct mm_struct *mm)
{
 unsigned long asid = ({ unsigned long __ta = (0) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 248 "arch/arm64/include/asm/tlbflush.h" 3 4
                     64 
# 248 "arch/arm64/include/asm/tlbflush.h"
                     - 1 - (43))))); __ta |= (unsigned long)(((mm)->context.id.counter & 0xffff)) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm ( "tlbi " "aside1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "aside1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (asid));
 do { if (arm64_kernel_unmapped_at_el0()) asm ( "tlbi " "aside1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "aside1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((asid) | ((((1UL))) << 48))); } while (0);
 asm volatile("dsb " "ish" : : : "memory");
}

static inline void flush_tlb_page_nosync(struct vm_area_struct *vma,
      unsigned long uaddr)
{
 unsigned long addr = ({ unsigned long __ta = (uaddr) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 259 "arch/arm64/include/asm/tlbflush.h" 3 4
                     64 
# 259 "arch/arm64/include/asm/tlbflush.h"
                     - 1 - (43))))); __ta |= (unsigned long)(((vma->vm_mm)->context.id.counter & 0xffff)) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm ( "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
 do { if (arm64_kernel_unmapped_at_el0()) asm ( "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
}

static inline void flush_tlb_page(struct vm_area_struct *vma,
      unsigned long uaddr)
{
 flush_tlb_page_nosync(vma, uaddr);
 asm volatile("dsb " "ish" : : : "memory");
}







static inline void __flush_tlb_range(struct vm_area_struct *vma,
         unsigned long start, unsigned long end,
         unsigned long stride, bool last_level,
         int tlb_level)
{
 int num = 0;
 int scale = 0;
 unsigned long asid = ((vma->vm_mm)->context.id.counter & 0xffff);
 unsigned long addr;
 unsigned long pages;

 start = ((start) & ~((__typeof__(start))((stride)-1)));
 end = ((((end)-1) | ((__typeof__(end))((stride)-1)))+1);
 pages = (end - start) >> 12;







 if ((!system_supports_tlb_range() &&
      (end - start) >= ((1 << (12 - 3)) * stride)) ||
     pages >= ((unsigned long)((31) + 1) << (5 * (3) + 1))) {
  flush_tlb_mm(vma->vm_mm);
  return;
 }

 asm volatile("dsb " "ishst" : : : "memory");
# 327 "arch/arm64/include/asm/tlbflush.h"
 while (pages > 0) {
  if (!system_supports_tlb_range() ||
      pages % 2 == 1) {
   addr = ({ unsigned long __ta = (start) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 330 "arch/arm64/include/asm/tlbflush.h" 3 4
         64 
# 330 "arch/arm64/include/asm/tlbflush.h"
         - 1 - (43))))); __ta |= (unsigned long)(asid) << 48; __ta; });
   if (last_level) {
    do { u64 arg = addr; if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 332 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 332 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47))))); arg |= ({ ({ do { } while (0); do { } while (0); do { } while (0); do { } while (0); do { } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 332 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 332 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 332 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 332 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 332 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 332 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))); }); } asm ( "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0);
    do { if (arm64_kernel_unmapped_at_el0()) do { u64 arg = (addr | ((((1UL))) << 48)); if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 333 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 333 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47))))); arg |= ({ ({ do { } while (0); do { } while (0); do { } while (0); do { } while (0); do { } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 333 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 333 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 333 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 333 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 333 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 333 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))); }); } asm ( "tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0); } while (0);
   } else {
    do { u64 arg = addr; if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 335 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 335 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47))))); arg |= ({ ({ do { } while (0); do { } while (0); do { } while (0); do { } while (0); do { } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 335 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 335 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 335 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 335 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 335 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 335 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))); }); } asm ( "tlbi " "vae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0);
    do { if (arm64_kernel_unmapped_at_el0()) do { u64 arg = (addr | ((((1UL))) << 48)); if (cpus_have_const_cap(7) && tlb_level) { u64 ttl = tlb_level & 3; ttl |= get_trans_granule() << 2; arg &= ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 336 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 336 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47))))); arg |= ({ ({ do { } while (0); do { } while (0); do { } while (0); do { } while (0); do { } while (0); }); ((typeof(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 336 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 336 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))))(ttl) << (__builtin_ffsll(((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 336 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 336 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))) - 1)) & (((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((44) > (47)) * 0l)) : (int *)8))), (44) > (47), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (44)) + 1) & (~(((0ULL))) >> (
# 336 "arch/arm64/include/asm/tlbflush.h" 3 4
   64 
# 336 "arch/arm64/include/asm/tlbflush.h"
   - 1 - (47)))))); }); } asm ( "tlbi " "vae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (arg)); } while(0); } while (0);
   }
   start += stride;
   pages -= stride >> 12;
   continue;
  }

  num = ((((pages) >> (5 * (scale) + 1)) & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (4)) * 0l)) : (int *)8))), (0) > (4), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 343 "arch/arm64/include/asm/tlbflush.h" 3 4
       64 
# 343 "arch/arm64/include/asm/tlbflush.h"
       - 1 - (4)))))) - 1);
  if (num >= 0) {
   addr = ({ unsigned long __ta = (start) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (36)) * 0l)) : (int *)8))), (0) > (36), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 345 "arch/arm64/include/asm/tlbflush.h" 3 4
         64 
# 345 "arch/arm64/include/asm/tlbflush.h"
         - 1 - (36))))); __ta |= (unsigned long)(tlb_level) << 37; __ta |= (unsigned long)(num) << 39; __ta |= (unsigned long)(scale) << 44; __ta |= get_trans_granule() << 46; __ta |= (unsigned long)(asid) << 48; __ta; })
                       ;
   if (last_level) {
    asm ( "tlbi " "rvale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
    do { if (arm64_kernel_unmapped_at_el0()) asm ( "tlbi " "rvale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
   } else {
    asm ( "tlbi " "rvae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
    do { if (arm64_kernel_unmapped_at_el0()) asm ( "tlbi " "rvae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "rvae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
   }
   start += ((unsigned long)((num) + 1) << (5 * (scale) + 1)) << 12;
   pages -= ((unsigned long)((num) + 1) << (5 * (scale) + 1));
  }
  scale++;
 }
 asm volatile("dsb " "ish" : : : "memory");
}

static inline void flush_tlb_range(struct vm_area_struct *vma,
       unsigned long start, unsigned long end)
{





 __flush_tlb_range(vma, start, end, ((1UL) << 12), false, 0);
}

static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end)
{
 unsigned long addr;

 if ((end - start) > ((1 << (12 - 3)) * ((1UL) << 12))) {
  flush_tlb_all();
  return;
 }

 start = ({ unsigned long __ta = (start) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 382 "arch/arm64/include/asm/tlbflush.h" 3 4
        64 
# 382 "arch/arm64/include/asm/tlbflush.h"
        - 1 - (43))))); __ta |= (unsigned long)(0) << 48; __ta; });
 end = ({ unsigned long __ta = (end) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 383 "arch/arm64/include/asm/tlbflush.h" 3 4
      64 
# 383 "arch/arm64/include/asm/tlbflush.h"
      - 1 - (43))))); __ta |= (unsigned long)(0) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 for (addr = start; addr < end; addr += 1 << (12 - 12))
  asm ( "tlbi " "vaale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vaale1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}





static inline void __flush_tlb_kernel_pgtable(unsigned long kaddr)
{
 unsigned long addr = ({ unsigned long __ta = (kaddr) >> 12; __ta &= ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (43)) * 0l)) : (int *)8))), (0) > (43), 0))); })))) + (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (
# 398 "arch/arm64/include/asm/tlbflush.h" 3 4
                     64 
# 398 "arch/arm64/include/asm/tlbflush.h"
                     - 1 - (43))))); __ta |= (unsigned long)(0) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm ( "tlbi " "vaae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "59" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "dsb ish\n		tlbi " "vaae1is" ", %0" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n" : : "r" (addr));
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}
# 16 "arch/arm64/include/asm/pgtable.h" 2
# 34 "arch/arm64/include/asm/pgtable.h"
# 1 "arch/arm64/include/asm/fixmap.h" 1
# 21 "arch/arm64/include/asm/fixmap.h"
# 1 "arch/arm64/include/asm/boot.h" 1
# 22 "arch/arm64/include/asm/fixmap.h" 2
# 35 "arch/arm64/include/asm/fixmap.h"
enum fixed_addresses {
 FIX_HOLE,
# 48 "arch/arm64/include/asm/fixmap.h"
 FIX_FDT_END,
 FIX_FDT = FIX_FDT_END + (0x00200000 + 0x00200000) / ((1UL) << 12) - 1,

 FIX_EARLYCON_MEM_BASE,
 FIX_TEXT_POKE0,



 FIX_APEI_GHES_IRQ,
 FIX_APEI_GHES_SEA,







 FIX_ENTRY_TRAMP_DATA,
 FIX_ENTRY_TRAMP_TEXT,


 __end_of_permanent_fixed_addresses,
# 79 "arch/arm64/include/asm/fixmap.h"
 FIX_BTMAP_END = __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + ((0x00040000 / ((1UL) << 12)) * 7) - 1,





 FIX_PTE,
 FIX_PMD,
 FIX_PUD,
 FIX_PGD,

 __end_of_fixed_addresses
};






void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) early_fixmap_init(void);






extern void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot);

# 1 "include/asm-generic/fixmap.h" 1
# 30 "include/asm-generic/fixmap.h"
static 
# 30 "include/asm-generic/fixmap.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 30 "include/asm-generic/fixmap.h"
                      unsigned long fix_to_virt(const unsigned int idx)
{
 do { } while (0);
 return (((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) - ((idx) << 12));
}

static inline unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (unlikely(vaddr >= ((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) || vaddr < (((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) - (__end_of_permanent_fixed_addresses << 12)))) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/asm-generic/fixmap.h\"; .popsection; .long 14472b - 14470b; .short 38; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
 return ((((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x02000000) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
# 109 "arch/arm64/include/asm/fixmap.h" 2
# 35 "arch/arm64/include/asm/pgtable.h" 2
# 61 "arch/arm64/include/asm/pgtable.h"
extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)];
# 147 "arch/arm64/include/asm/pgtable.h"
static inline pte_t clear_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) &= ~((prot).pgprot);
 return pte;
}

static inline pte_t set_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) |= ((prot).pgprot);
 return pte;
}

static inline pmd_t clear_pmd_bit(pmd_t pmd, pgprot_t prot)
{
 ((pmd).pmd) &= ~((prot).pgprot);
 return pmd;
}

static inline pmd_t set_pmd_bit(pmd_t pmd, pgprot_t prot)
{
 ((pmd).pmd) |= ((prot).pgprot);
 return pmd;
}

static inline pte_t pte_mkwrite(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline pte_t pte_mkclean(pte_t pte)
{
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline pte_t pte_mkdirty(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));

 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))))
  pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline pte_t pte_wrprotect(pte_t pte)
{




 if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
  pte = pte_mkdirty(pte);

 pte = clear_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline pte_t pte_mkold(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline pte_t pte_mkyoung(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline pte_t pte_mkspecial(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 56)) } ));
}

static inline pte_t pte_mkcont(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(3)) << 0)) } ));
}

static inline pte_t pte_mknoncont(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
}

static inline pte_t pte_mkpresent(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 0)) } ));
}

static inline pmd_t pmd_mkcont(pmd_t pmd)
{
 return ((pmd_t) { (((pmd).pmd) | (((pmdval_t)(1)) << 52)) } );
}

static inline pte_t pte_mkdevmap(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 57) | (((pteval_t)(1)) << 56)) } ));
}

static inline void set_pte(pte_t *ptep, pte_t pte)
{
 do { do { } while (0); do { *(volatile typeof(*ptep) *)&(*ptep) = (pte); } while (0); } while (0);





 if (((((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 54))) == ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 54)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

extern void __sync_icache_dcache(pte_t pteval);
# 283 "arch/arm64/include/asm/pgtable.h"
static inline void __check_racy_pte_update(struct mm_struct *mm, pte_t *ptep,
        pte_t pte)
{
 pte_t old_pte;

 if (!0)
  return;

 old_pte = ({ do { } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });

 if (!(!!(((old_pte).pte) & (((pteval_t)(1)) << 0))) || !(!!(((pte).pte) & (((pteval_t)(1)) << 0))))
  return;
 if (mm != get_current()->active_mm && atomic_read(&mm->mm_users) <= 1)
  return;






 ((void)(sizeof(( long)(!(!!(((pte).pte) & (((pteval_t)(1)) << 10)))))))

                                                ;
 ((void)(sizeof(( long)((!!(((old_pte).pte) & ((((pteval_t)(1)) << 51)))) && !((!!(((pte).pte) & (((pteval_t)(1)) << 55))) || ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))))))

                                                ;
}

static inline void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) && (!(((pte).pte) & (((pteval_t)(1)) << 54))) && !(!!(((pte).pte) & (((pteval_t)(1)) << 56))))
  __sync_icache_dcache(pte);

 if (system_supports_mte() &&
     (!!(((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) && ((((pte).pte) & (((pteval_t)(7)) << 2)) == (((pteval_t)((1))) << 2)) && !(!!(((pte).pte) & (((pteval_t)(1)) << 56))))
  mte_sync_tags(ptep, pte);

 __check_racy_pte_update(mm, ptep, pte);

 set_pte(ptep, pte);
}
# 340 "arch/arm64/include/asm/pgtable.h"
static inline pte_t pgd_pte(pgd_t pgd)
{
 return ((pte_t) { (((pgd).pgd)) } );
}

static inline pte_t p4d_pte(p4d_t p4d)
{
 return ((pte_t) { (((((p4d).pgd).pgd))) } );
}

static inline pte_t pud_pte(pud_t pud)
{
 return ((pte_t) { (((pud).pud)) } );
}

static inline pud_t pte_pud(pte_t pte)
{
 return ((pud_t) { (((pte).pte)) } );
}

static inline pmd_t pud_pmd(pud_t pud)
{
 return ((pmd_t) { (((pud).pud)) } );
}

static inline pte_t pmd_pte(pmd_t pmd)
{
 return ((pte_t) { (((pmd).pmd)) } );
}

static inline pmd_t pte_pmd(pte_t pte)
{
 return ((pmd_t) { (((pte).pte)) } );
}

static inline pgprot_t mk_pud_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(((pudval_t)(1)) << 1)) | (((pudval_t)(1)) << 0)) } );
}

static inline pgprot_t mk_pmd_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(((pmdval_t)(1)) << 1)) | (((pmdval_t)(1)) << 0)) } );
}





static inline int pte_protnone(pte_t pte)
{
 return (((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))) == (((pteval_t)(1)) << 58);
}

static inline int pmd_protnone(pmd_t pmd)
{
 return pte_protnone(pmd_pte(pmd));
}




static inline int pmd_present(pmd_t pmd)
{
 return (!!(((pmd_pte(pmd)).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) || (!!(((pmd).pmd) & (((pteval_t)(1)) << 59)));
}






static inline int pmd_trans_huge(pmd_t pmd)
{
 return ((pmd).pmd) && pmd_present(pmd) && !(((pmd).pmd) & (((pmdval_t)(1)) << 1));
}
# 429 "arch/arm64/include/asm/pgtable.h"
static inline pmd_t pmd_mkinvalid(pmd_t pmd)
{
 pmd = set_pmd_bit(pmd, ((pgprot_t) { ((((pteval_t)(1)) << 59)) } ));
 pmd = clear_pmd_bit(pmd, ((pgprot_t) { ((((pmdval_t)(1)) << 0)) } ));

 return pmd;
}
# 446 "arch/arm64/include/asm/pgtable.h"
static inline pmd_t pmd_mkdevmap(pmd_t pmd)
{
 return pte_pmd(set_pte_bit(pmd_pte(pmd), ((pgprot_t) { ((((pteval_t)(1)) << 57)) } )));
}
# 508 "arch/arm64/include/asm/pgtable.h"
struct file;
extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
         unsigned long size, pgprot_t vma_prot);
# 535 "arch/arm64/include/asm/pgtable.h"
extern pgd_t init_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t init_pg_end[];
extern pgd_t swapper_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t idmap_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t idmap_pg_end[];
extern pgd_t tramp_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];
extern pgd_t reserved_pg_dir[(1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3)))];

extern void set_swapper_pgd(pgd_t *pgdp, pgd_t pgd);

static inline bool in_swapper_pgdir(void *addr)
{
 return ((unsigned long)addr & (~(((1UL) << 12)-1))) ==
         ((unsigned long)swapper_pg_dir & (~(((1UL) << 12)-1)));
}

static inline void set_pmd(pmd_t *pmdp, pmd_t pmd)
{







 do { do { } while (0); do { *(volatile typeof(*pmdp) *)&(*pmdp) = (pmd); } while (0); } while (0);

 if ((!!(((pmd_pte(pmd)).pte) & (((pteval_t)(1)) << 0)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

static inline void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, ((pmd_t) { (0) } ));
}

static inline phys_addr_t pmd_page_paddr(pmd_t pmd)
{
 return (((pmd_pte(pmd)).pte) & (((((pteval_t)(1)) << (48 - 12)) - 1) << 12));
}

static inline unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)((void *)((unsigned long)(((phys_addr_t)(pmd_page_paddr(pmd))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 612 "arch/arm64/include/asm/pgtable.h"
static inline void set_pud(pud_t *pudp, pud_t pud)
{







 do { do { } while (0); do { *(volatile typeof(*pudp) *)&(*pudp) = (pud); } while (0); } while (0);

 if ((!!(((pud_pte(pud)).pte) & (((pteval_t)(1)) << 0)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

static inline void pud_clear(pud_t *pudp)
{
 set_pud(pudp, ((pud_t) { (0) } ));
}

static inline phys_addr_t pud_page_paddr(pud_t pud)
{
 return (((pud_pte(pud)).pte) & (((((pteval_t)(1)) << (48 - 12)) - 1) << 12));
}

static inline unsigned long pud_page_vaddr(pud_t pud)
{
 return (unsigned long)((void *)((unsigned long)(((phys_addr_t)(pud_page_paddr(pud))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 678 "arch/arm64/include/asm/pgtable.h"
static inline void set_p4d(p4d_t *p4dp, p4d_t p4d)
{
 if (in_swapper_pgdir(p4dp)) {
  set_swapper_pgd((pgd_t *)p4dp, ((pgd_t) { (((((p4d).pgd).pgd))) } ));
  return;
 }

 do { do { } while (0); do { *(volatile typeof(*p4dp) *)&(*p4dp) = (p4d); } while (0); } while (0);
 asm volatile("dsb " "ishst" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline void p4d_clear(p4d_t *p4dp)
{
 set_p4d(p4dp, ((p4d_t) { ((pgd_t) { (0) } ) }));
}

static inline phys_addr_t p4d_page_paddr(p4d_t p4d)
{
 return (((p4d_pte(p4d)).pte) & (((((pteval_t)(1)) << (48 - 12)) - 1) << 12));
}

static inline unsigned long p4d_page_vaddr(p4d_t p4d)
{
 return (unsigned long)((void *)((unsigned long)(((phys_addr_t)(p4d_page_paddr(p4d))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((-((((1UL))) << ((48)))))));
}
# 737 "arch/arm64/include/asm/pgtable.h"
static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
{




 const pteval_t mask = (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54) | (((pteval_t)(1)) << 7) |
         (((pteval_t)(1)) << 58) | (((pteval_t)(1)) << 0) | ((((pteval_t)(1)) << 51)) | (((pteval_t)(1)) << 50) |
         (((pteval_t)(7)) << 2);

 if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
  pte = pte_mkdirty(pte);
 ((pte).pte) = (((pte).pte) & ~mask) | (((newprot).pgprot) & mask);
 return pte;
}

static inline pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 return pte_pmd(pte_modify(pmd_pte(pmd), newprot));
}


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);



static inline int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty)
{
 return ptep_set_access_flags(vma, address, (pte_t *)pmdp, pmd_pte(entry), dirty);
}

static inline int pud_devmap(pud_t pud)
{
 return 0;
}

static inline int pgd_devmap(pgd_t pgd)
{
 return 0;
}






static inline int __ptep_test_and_clear_young(pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ do { } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
 do {
  old_pte = pte;
  pte = pte_mkold(pte);
  ((pte).pte) = ({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg((__ai_ptr), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(__ai_ptr))); __ret; }); })
                                           ;
 } while (((pte).pte) != ((old_pte).pte));

 return (!!(((pte).pte) & (((pteval_t)(1)) << 10)));
}

static inline int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep)
{
 return __ptep_test_and_clear_young(ptep);
}


static inline int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep)
{
 int young = ptep_test_and_clear_young(vma, address, ptep);

 if (young) {
# 824 "arch/arm64/include/asm/pgtable.h"
  flush_tlb_page_nosync(vma, address);
 }

 return young;
}



static inline int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp)
{
 return ptep_test_and_clear_young(vma, address, (pte_t *)pmdp);
}



static inline pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long address, pte_t *ptep)
{
 return ((pte_t) { (({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg((unsigned long)(0), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); })) } );
}



static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long address, pmd_t *pmdp)
{
 return pte_pmd(ptep_get_and_clear(mm, address, (pte_t *)pmdp));
}







static inline void ptep_set_wrprotect(struct mm_struct *mm, unsigned long address, pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ do { } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
 do {
  old_pte = pte;
  pte = pte_wrprotect(pte);
  ((pte).pte) = ({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg((__ai_ptr), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(__ai_ptr))); __ret; }); })
                                           ;
 } while (((pte).pte) != ((old_pte).pte));
}



static inline void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pmd_t *pmdp)
{
 ptep_set_wrprotect(mm, address, (pte_t *)pmdp);
}


static inline pmd_t pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 return ((pmd_t) { (({ typeof(&((*pmdp).pmd)) __ai_ptr = (&((*pmdp).pmd)); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg((unsigned long)(((pmd).pmd)), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); })) } );
}
# 922 "arch/arm64/include/asm/pgtable.h"
extern int kern_addr_valid(unsigned long addr);
# 959 "arch/arm64/include/asm/pgtable.h"
static inline void update_mmu_cache(struct vm_area_struct *vma,
        unsigned long addr, pte_t *ptep)
{





}
# 983 "arch/arm64/include/asm/pgtable.h"
static inline bool arch_faults_on_old_pte(void)
{
 ({ int __ret_warn_on = !!((preempt_count() == 0 && !native_irqs_disabled() && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"arch/arm64/include/asm/pgtable.h\"; .popsection; .long 14472b - 14470b; .short 985; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });

 return !cpu_has_hw_af();
}






static inline bool arch_wants_old_prefaulted_pte(void)
{
 return !arch_faults_on_old_pte();
}


static inline pgprot_t arch_filter_pgprot(pgprot_t prot)
{
 if (cpus_have_const_cap(15))
  return prot;

 if (((prot).pgprot) != ((((pgprot_t) { ((((((pteval_t)(3)) << 0) | (((pteval_t)(1)) << 10) | (((pteval_t)(3)) << 8)) | (((pteval_t)((0))) << 2)) | (((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 11) | (((pteval_t)(1)) << 53)) } )).pgprot))
  return prot;

 return ((pgprot_t) { ((((((pteval_t)(3)) << 0) | (((pteval_t)(1)) << 10) | (((pteval_t)(3)) << 8)) | (((pteval_t)((0))) << 2)) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 11) | (((pteval_t)(1)) << 53)) } );
}
# 7 "include/linux/pgtable.h" 2







# 1 "include/asm-generic/pgtable_uffd.h" 1




static 
# 5 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 5 "include/asm-generic/pgtable_uffd.h"
                      int pte_uffd_wp(pte_t pte)
{
 return 0;
}

static 
# 10 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 10 "include/asm-generic/pgtable_uffd.h"
                      int pmd_uffd_wp(pmd_t pmd)
{
 return 0;
}

static 
# 15 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 15 "include/asm-generic/pgtable_uffd.h"
                      pte_t pte_mkuffd_wp(pte_t pte)
{
 return pte;
}

static 
# 20 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 20 "include/asm-generic/pgtable_uffd.h"
                      pmd_t pmd_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static 
# 25 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 25 "include/asm-generic/pgtable_uffd.h"
                      pte_t pte_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static 
# 30 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 30 "include/asm-generic/pgtable_uffd.h"
                      pmd_t pmd_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}

static 
# 35 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 35 "include/asm-generic/pgtable_uffd.h"
                      pte_t pte_swp_mkuffd_wp(pte_t pte)
{
 return pte;
}

static 
# 40 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 40 "include/asm-generic/pgtable_uffd.h"
                      int pte_swp_uffd_wp(pte_t pte)
{
 return 0;
}

static 
# 45 "include/asm-generic/pgtable_uffd.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 45 "include/asm-generic/pgtable_uffd.h"
                      pte_t pte_swp_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline pmd_t pmd_swp_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline int pmd_swp_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline pmd_t pmd_swp_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}
# 15 "include/linux/pgtable.h" 2
# 43 "include/linux/pgtable.h"
static inline unsigned long pte_index(unsigned long address)
{
 return (address >> 12) & ((1 << (12 - 3)) - 1);
}


static inline unsigned long pmd_index(unsigned long address)
{
 return (address >> ((12 - 3) * (4 - (2)) + 3)) & ((1 << (12 - 3)) - 1);
}




static inline unsigned long pud_index(unsigned long address)
{
 return (address >> ((12 - 3) * (4 - (1)) + 3)) & ((1 << (12 - 3)) - 1);
}
# 70 "include/linux/pgtable.h"
static inline pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}
# 89 "include/linux/pgtable.h"
static inline pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return (pmd_t *)pud_page_vaddr(*pud) + pmd_index(address);
}




static inline pud_t *pud_offset(p4d_t *p4d, unsigned long address)
{
 return (pud_t *)p4d_page_vaddr(*p4d) + pud_index(address);
}



static inline pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
{
 return (pgd + (((address) >> ((12 - 3) * (4 - (4 - 4)) + 3)) & ((1 << ((48) - ((12 - 3) * (4 - (4 - 4)) + 3))) - 1)));
};
# 131 "include/linux/pgtable.h"
static inline pmd_t *pmd_off(struct mm_struct *mm, unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((mm)->pgd, (va)), va), va), va);
}

static inline pmd_t *pmd_off_k(unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((&init_mm)->pgd, ((va))), va), va), va);
}

static inline pte_t *virt_to_kpte(unsigned long vaddr)
{
 pmd_t *pmd = pmd_off_k(vaddr);

 return (!((*pmd).pmd)) ? 
# 145 "include/linux/pgtable.h" 3 4
                        ((void *)0) 
# 145 "include/linux/pgtable.h"
                             : pte_offset_kernel(pmd, vaddr);
}
# 227 "include/linux/pgtable.h"
extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);
# 255 "include/linux/pgtable.h"
static inline pte_t ptep_get(pte_t *ptep)
{
 return ({ do { } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
}
# 310 "include/linux/pgtable.h"
static inline pte_t ptep_get_lockless(pte_t *ptep)
{
 return ptep_get(ptep);
}
# 328 "include/linux/pgtable.h"
static inline pud_t pudp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long address,
         pud_t *pudp)
{
 pud_t pud = *pudp;

 pud_clear(pudp);
 return pud;
}





static inline pmd_t pmdp_huge_get_and_clear_full(struct vm_area_struct *vma,
         unsigned long address, pmd_t *pmdp,
         int full)
{
 return pmdp_huge_get_and_clear(vma->vm_mm, address, pmdp);
}



static inline pud_t pudp_huge_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pud_t *pudp,
         int full)
{
 return pudp_huge_get_and_clear(mm, address, pudp);
}




static inline pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pte_t *ptep,
         int full)
{
 pte_t pte;
 pte = ptep_get_and_clear(mm, address, ptep);
 return pte;
}
# 381 "include/linux/pgtable.h"
static inline void update_mmu_tlb(struct vm_area_struct *vma,
    unsigned long address, pte_t *ptep)
{
}
# 394 "include/linux/pgtable.h"
static inline void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 set_pte(ptep, ((pte_t) { (0) } ));
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 436 "include/linux/pgtable.h"
static inline pte_t pte_sw_mkyoung(pte_t pte)
{
 return pte;
}
# 493 "include/linux/pgtable.h"
static inline void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 do { } while (0);
}





extern pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp);
# 518 "include/linux/pgtable.h"
extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 532 "include/linux/pgtable.h"
static inline pmd_t generic_pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 pmd_t old_pmd = *pmdp;
 set_pte_at(vma->vm_mm, address, (pte_t *)pmdp, pmd_pte(pmd));
 return old_pmd;
}



extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);



static inline int pte_same(pte_t pte_a, pte_t pte_b)
{
 return ((pte_a).pte) == ((pte_b).pte);
}
# 560 "include/linux/pgtable.h"
static inline int pte_unused(pte_t pte)
{
 return 0;
}
# 592 "include/linux/pgtable.h"
static inline int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return ((pmd_a).pmd) == ((pmd_b).pmd);
}

static inline int pud_same(pud_t pud_a, pud_t pud_b)
{
 return ((pud_a).pud) == ((pud_b).pud);
}



static inline int p4d_same(p4d_t p4d_a, p4d_t p4d_b)
{
 return ((((p4d_a).pgd).pgd)) == ((((p4d_b).pgd).pgd));
}



static inline int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
{
 return ((pgd_a).pgd) == ((pgd_b).pgd);
}
# 664 "include/linux/pgtable.h"
static inline void arch_do_swap_page(struct mm_struct *mm,
         struct vm_area_struct *vma,
         unsigned long addr,
         pte_t pte, pte_t oldpte)
{

}
# 682 "include/linux/pgtable.h"
static inline int arch_unmap_one(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long addr,
      pte_t orig_pte)
{
 return 0;
}
# 697 "include/linux/pgtable.h"
static inline int arch_prepare_to_swap(struct page *page)
{
 return 0;
}



static inline void arch_swap_invalidate_page(int type, unsigned long offset)
{
}

static inline void arch_swap_invalidate_area(int type)
{
}



static inline void arch_swap_restore(swp_entry_t entry, struct page *page)
{
}
# 772 "include/linux/pgtable.h"
void pgd_clear_bad(pgd_t *);
# 781 "include/linux/pgtable.h"
void pud_clear_bad(pud_t *);




void pmd_clear_bad(pmd_t *);

static inline int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (unlikely(pgd_bad(*pgd))) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline int p4d_none_or_clear_bad(p4d_t *p4d)
{
 if ((!((((*p4d).pgd).pgd))))
  return 1;
 if (unlikely((!(((((*p4d).pgd).pgd)) & 2)))) {
  do { } while (0);
  return 1;
 }
 return 0;
}

static inline int pud_none_or_clear_bad(pud_t *pud)
{
 if ((!((*pud).pud)))
  return 1;
 if (unlikely((!(((*pud).pud) & (((pudval_t)(1)) << 1))))) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if ((!((*pmd).pmd)))
  return 1;
 if (unlikely((!(((*pmd).pmd) & (((pmdval_t)(1)) << 1))))) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(vma->vm_mm, addr, ptep);
}

static inline void __ptep_modify_prot_commit(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 870 "include/linux/pgtable.h"
static inline pte_t ptep_modify_prot_start(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(vma, addr, ptep);
}





static inline void ptep_modify_prot_commit(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep, pte_t old_pte, pte_t pte)
{
 __ptep_modify_prot_commit(vma, addr, ptep, pte);
}
# 922 "include/linux/pgtable.h"
static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((4))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((4))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((2))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((2))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((5))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((5))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 return newprot;
}
# 997 "include/linux/pgtable.h"
static inline int pte_soft_dirty(pte_t pte)
{
 return 0;
}

static inline int pmd_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline int pte_swp_soft_dirty(pte_t pte)
{
 return 0;
}

static inline pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 1069 "include/linux/pgtable.h"
static inline int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size)
{
 return 0;
}





static inline void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn)
{
}





static inline int track_pfn_copy(struct vm_area_struct *vma)
{
 return 0;
}






static inline void untrack_pfn(struct vm_area_struct *vma,
          unsigned long pfn, unsigned long size)
{
}




static inline void untrack_pfn_moved(struct vm_area_struct *vma)
{
}
# 1134 "include/linux/pgtable.h"
static inline int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}
# 1200 "include/linux/pgtable.h"
static inline int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline int pud_none_or_trans_huge_or_dev_or_clear_bad(pud_t *pud)
{
 pud_t pudval = ({ do { } while (0); (*(const volatile typeof( _Generic((*pud), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*pud))) *)&(*pud)); });

 if ((!((pudval).pud)) || pud_trans_huge(pudval) || pud_devmap(pudval))
  return 1;
 if (unlikely((!(((pudval).pud) & (((pudval_t)(1)) << 1))))) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}


static inline int pud_trans_unstable(pud_t *pud)
{




 return 0;

}


static inline pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 1267 "include/linux/pgtable.h"
static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 1285 "include/linux/pgtable.h"
 barrier();
# 1302 "include/linux/pgtable.h"
 if ((!((pmdval).pmd)) || pmd_trans_huge(pmdval) ||
  (1 && !pmd_present(pmdval)))
  return 1;
 if (unlikely((!(((pmdval).pmd) & (((pmdval_t)(1)) << 1))))) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 1324 "include/linux/pgtable.h"
static inline int pmd_trans_unstable(pmd_t *pmd)
{

 return pmd_none_or_trans_huge_or_clear_bad(pmd);



}







static inline int pmd_devmap_trans_unstable(pmd_t *pmd)
{
 return (!!(((pmd_pte(*pmd)).pte) & (((pteval_t)(1)) << 57))) || pmd_trans_unstable(pmd);
}
# 1372 "include/linux/pgtable.h"
static inline int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline int p4d_clear_huge(p4d_t *p4d)
{
 return 0;
}


int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
int p4d_free_pud_page(p4d_t *p4d, unsigned long addr);
int pud_free_pmd_page(pud_t *pud, unsigned long addr);
int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
# 1447 "include/linux/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline void init_espfix_bsp(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pgtable_cache_init(void);


static inline bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
{
 return true;
}

static inline bool arch_has_pfn_modify_check(void)
{
 return false;
}
# 1508 "include/linux/pgtable.h"
typedef unsigned int pgtbl_mod_mask;
# 13 "arch/arm64/include/asm/io.h" 2




# 1 "arch/arm64/include/generated/asm/early_ioremap.h" 1
# 1 "include/asm-generic/early_ioremap.h" 1
# 11 "include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void *early_memremap_prot(resource_size_t phys_addr,
     unsigned long size, unsigned long prot_val);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);





extern void early_ioremap_shutdown(void);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 1 "arch/arm64/include/generated/asm/early_ioremap.h" 2
# 18 "arch/arm64/include/asm/io.h" 2







static inline void __raw_writeb(u8 val, volatile void *addr)
{
 asm volatile("strb %w0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline void __raw_writew(u16 val, volatile void *addr)
{
 asm volatile("strh %w0, [%1]" : : "rZ" (val), "r" (addr));
}


static 
# 37 "arch/arm64/include/asm/io.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 37 "arch/arm64/include/asm/io.h"
                      void __raw_writel(u32 val, volatile void *addr)
{
 asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline void __raw_writeq(u64 val, volatile void *addr)
{
 asm volatile("str %x0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline u8 __raw_readb(const volatile void *addr)
{
 u8 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldrb %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "56" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "ldarb %w0, [%1]" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}


static inline u16 __raw_readw(const volatile void *addr)
{
 u16 val;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldrh %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "56" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "ldarh %w0, [%1]" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}


static 
# 72 "arch/arm64/include/asm/io.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 72 "arch/arm64/include/asm/io.h"
                      u32 __raw_readl(const volatile void *addr)
{
 u32 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldr %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "56" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "ldar %w0, [%1]" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}


static inline u64 __raw_readq(const volatile void *addr)
{
 u64 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldr %0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "56" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".subsection 1\n" "663:\n\t" "ldar %0, [%1]" "\n" "664:\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n\t" ".previous\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}
# 155 "arch/arm64/include/asm/io.h"
extern void __memcpy_fromio(void *, const volatile void *, size_t);
extern void __memcpy_toio(volatile void *, const void *, size_t);
extern void __memset_io(volatile void *, int, size_t);
# 166 "arch/arm64/include/asm/io.h"
extern void *__ioremap(phys_addr_t phys_addr, size_t size, pgprot_t prot);
extern void iounmap(volatile void *addr);
extern void *ioremap_cache(phys_addr_t phys_addr, size_t size);
# 185 "arch/arm64/include/asm/io.h"
# 1 "include/asm-generic/io.h" 1
# 18 "include/asm-generic/io.h"
# 1 "arch/arm64/include/generated/asm/mmiowb.h" 1
# 19 "include/asm-generic/io.h" 2
# 1 "include/asm-generic/pci_iomap.h" 1
# 10 "include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 20 "include/asm-generic/io.h" 2
# 317 "include/asm-generic/io.h"
static inline void readsb(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u8 *buf = buffer;

  do {
   u8 x = __raw_readb(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline void readsw(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u16 *buf = buffer;

  do {
   u16 x = __raw_readw(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline void readsl(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u32 *buf = buffer;

  do {
   u32 x = __raw_readl(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline void readsq(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u64 *buf = buffer;

  do {
   u64 x = __raw_readq(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline void writesb(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u8 *buf = buffer;

  do {
   __raw_writeb(*buf++, addr);
  } while (--count);
 }
}




static inline void writesw(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u16 *buf = buffer;

  do {
   __raw_writew(*buf++, addr);
  } while (--count);
 }
}




static inline void writesl(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u32 *buf = buffer;

  do {
   __raw_writel(*buf++, addr);
  } while (--count);
 }
}





static inline void writesq(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u64 *buf = buffer;

  do {
   __raw_writeq(*buf++, addr);
  } while (--count);
 }
}
# 459 "include/asm-generic/io.h"
static inline u8 _inb(unsigned long addr)
{
 u8 val;

 barrier();
 val = __raw_readb(((void *)(((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x00800000) - 0x01000000)) + addr);
 ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(val)) : "memory"); });
 return val;
}




static inline u16 _inw(unsigned long addr)
{
 u16 val;

 barrier();
 val = (( __u16)(__le16)((__le16 )__raw_readw(((void *)(((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x00800000) - 0x01000000)) + addr)));
 ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(val)) : "memory"); });
 return val;
}




static inline u32 _inl(unsigned long addr)
{
 u32 val;

 barrier();
 val = (( __u32)(__le32)((__le32 )__raw_readl(((void *)(((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x00800000) - 0x01000000)) + addr)));
 ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(val)) : "memory"); });
 return val;
}




static inline void _outb(u8 value, unsigned long addr)
{
 asm volatile("dsb " "st" : : : "memory");
 __raw_writeb(value, ((void *)(((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x00800000) - 0x01000000)) + addr);
 do { } while (0);
}




static inline void _outw(u16 value, unsigned long addr)
{
 asm volatile("dsb " "st" : : : "memory");
 __raw_writew((u16 )(( __le16)(__u16)(value)), ((void *)(((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x00800000) - 0x01000000)) + addr);
 do { } while (0);
}




static inline void _outl(u32 value, unsigned long addr)
{
 asm volatile("dsb " "st" : : : "memory");
 __raw_writel((u32 )(( __le32)(__u32)(value)), ((void *)(((-((((1UL))) << ((48) - (12 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? (((sizeof(struct page)) - 1) < 2 ? 0 : 63 - __builtin_clzll((sizeof(struct page)) - 1)) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))))) - 0x00800000) - 0x01000000)) + addr);
 do { } while (0);
}


# 1 "include/linux/logic_pio.h" 1
# 13 "include/linux/logic_pio.h"
enum {
 LOGIC_PIO_INDIRECT,
 LOGIC_PIO_CPU_MMIO,
};

struct logic_pio_hwaddr {
 struct list_head list;
 struct fwnode_handle *fwnode;
 resource_size_t hw_start;
 resource_size_t io_start;
 resource_size_t size;
 unsigned long flags;

 void *hostdata;
 const struct logic_pio_host_ops *ops;
};

struct logic_pio_host_ops {
 u32 (*in)(void *hostdata, unsigned long addr, size_t dwidth);
 void (*out)(void *hostdata, unsigned long addr, u32 val,
      size_t dwidth);
 u32 (*ins)(void *hostdata, unsigned long addr, void *buffer,
     size_t dwidth, unsigned int count);
 void (*outs)(void *hostdata, unsigned long addr, const void *buffer,
       size_t dwidth, unsigned int count);
};


u8 logic_inb(unsigned long addr);
void logic_outb(u8 value, unsigned long addr);
void logic_outw(u16 value, unsigned long addr);
void logic_outl(u32 value, unsigned long addr);
u16 logic_inw(unsigned long addr);
u32 logic_inl(unsigned long addr);
void logic_outb(u8 value, unsigned long addr);
void logic_outw(u16 value, unsigned long addr);
void logic_outl(u32 value, unsigned long addr);
void logic_insb(unsigned long addr, void *buffer, unsigned int count);
void logic_insl(unsigned long addr, void *buffer, unsigned int count);
void logic_insw(unsigned long addr, void *buffer, unsigned int count);
void logic_outsb(unsigned long addr, const void *buffer, unsigned int count);
void logic_outsw(unsigned long addr, const void *buffer, unsigned int count);
void logic_outsl(unsigned long addr, const void *buffer, unsigned int count);
# 116 "include/linux/logic_pio.h"
struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *fwnode);
unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *fwnode,
   resource_size_t hw_addr, resource_size_t size);
int logic_pio_register_range(struct logic_pio_hwaddr *newrange);
void logic_pio_unregister_range(struct logic_pio_hwaddr *range);
resource_size_t logic_pio_to_hwaddr(unsigned long pio);
unsigned long logic_pio_trans_cpuaddr(resource_size_t hw_addr);
# 527 "include/asm-generic/io.h" 2
# 554 "include/asm-generic/io.h"
static inline u8 inb_p(unsigned long addr)
{
 return logic_inb(addr);
}




static inline u16 inw_p(unsigned long addr)
{
 return logic_inw(addr);
}




static inline u32 inl_p(unsigned long addr)
{
 return logic_inl(addr);
}




static inline void outb_p(u8 value, unsigned long addr)
{
 logic_outb(value, addr);
}




static inline void outw_p(u16 value, unsigned long addr)
{
 logic_outw(value, addr);
}




static inline void outl_p(u32 value, unsigned long addr)
{
 logic_outl(value, addr);
}
# 658 "include/asm-generic/io.h"
static inline void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 logic_insb(addr, buffer, count);
}




static inline void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 logic_insw(addr, buffer, count);
}




static inline void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 logic_insl(addr, buffer, count);
}




static inline void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 logic_outsb(addr, buffer, count);
}




static inline void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 logic_outsw(addr, buffer, count);
}




static inline void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 logic_outsl(addr, buffer, count);
}





static inline u8 ioread8(const volatile void *addr)
{
 return ({ u8 __v = ({ u8 __r = __raw_readb(addr); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline u16 ioread16(const volatile void *addr)
{
 return ({ u16 __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline u32 ioread32(const volatile void *addr)
{
 return ({ u32 __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}





static inline u64 ioread64(const volatile void *addr)
{
 return ({ u64 __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}





static inline void iowrite8(u8 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writeb(((value)),((addr)))); });
}




static inline void iowrite16(u16 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writew(( u16)(( __le16)(__u16)((value))),((addr)))); });
}




static inline void iowrite32(u32 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)((value))),((addr)))); });
}





static inline void iowrite64(u64 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writeq(( u64)(( __le64)(__u64)((value))),((addr)))); });
}
# 830 "include/asm-generic/io.h"
static inline void ioread8_rep(const volatile void *addr, void *buffer,
          unsigned int count)
{
 readsb(addr, buffer, count);
}




static inline void ioread16_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsw(addr, buffer, count);
}




static inline void ioread32_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsl(addr, buffer, count);
}





static inline void ioread64_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsq(addr, buffer, count);
}





static inline void iowrite8_rep(volatile void *addr,
    const void *buffer,
    unsigned int count)
{
 writesb(addr, buffer, count);
}




static inline void iowrite16_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesw(addr, buffer, count);
}




static inline void iowrite32_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesl(addr, buffer, count);
}





static inline void iowrite64_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesq(addr, buffer, count);
}
# 186 "arch/arm64/include/asm/io.h" 2






extern int valid_phys_addr_range(phys_addr_t addr, size_t size);
extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);
# 14 "include/linux/io.h" 2


struct device;
struct resource;

__attribute__((__externally_visible__)) void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 38 "include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 56 "include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_uc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_np(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);
# 86 "include/linux/io.h"
static inline void *pci_remap_cfgspace(phys_addr_t offset,
            size_t size)
{
 return __ioremap((offset), (size), ((pgprot_t) { (((((((pteval_t)(3)) << 0) | (((pteval_t)(1)) << 10) | (((pteval_t)(3)) << 8)) | (arm64_use_ng_mappings ? (((pteval_t)(1)) << 11) : 0)) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54) | ((((pteval_t)(1)) << 51)) | (((pteval_t)((4))) << 2))) } )) ?: __ioremap((offset), (size), ((pgprot_t) { (((((((pteval_t)(3)) << 0) | (((pteval_t)(1)) << 10) | (((pteval_t)(3)) << 8)) | (arm64_use_ng_mappings ? (((pteval_t)(1)) << 11) : 0)) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54) | ((((pteval_t)(1)) << 51)) | (((pteval_t)((5))) << 2))) } ));
}
# 115 "include/linux/io.h"
static inline int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size)
{
 return 0;
}

static inline void arch_phys_wc_del(int handle)
{
}



static inline int arch_phys_wc_index(int handle)
{
 return -1;
}




enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 157 "include/linux/io.h"
static inline int arch_io_reserve_memtype_wc(resource_size_t base,
          resource_size_t size)
{
 return 0;
}

static inline void arch_io_free_memtype_wc(resource_size_t base,
        resource_size_t size)
{
}
# 22 "include/linux/irq.h" 2




# 1 "arch/arm64/include/generated/asm/irq_regs.h" 1
# 1 "include/asm-generic/irq_regs.h" 1
# 17 "include/asm-generic/irq_regs.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs *) __irq_regs;

static inline struct pt_regs *get_irq_regs(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 21 "include/asm-generic/irq_regs.h" 3 4
       ((void *)0)
# 21 "include/asm-generic/irq_regs.h"
       ; (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 21 "include/asm-generic/irq_regs.h" 3 4
       ((void *)0)
# 21 "include/asm-generic/irq_regs.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 21 "include/asm-generic/irq_regs.h" 3 4
       ((void *)0)
# 21 "include/asm-generic/irq_regs.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 21 "include/asm-generic/irq_regs.h" 3 4
       ((void *)0)
# 21 "include/asm-generic/irq_regs.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 21 "include/asm-generic/irq_regs.h" 3 4
       ((void *)0)
# 21 "include/asm-generic/irq_regs.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
}

static inline struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 28 "include/asm-generic/irq_regs.h" 3 4
           ((void *)0)
# 28 "include/asm-generic/irq_regs.h"
           ; (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 28 "include/asm-generic/irq_regs.h" 3 4
           ((void *)0)
# 28 "include/asm-generic/irq_regs.h"
           ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 28 "include/asm-generic/irq_regs.h" 3 4
           ((void *)0)
# 28 "include/asm-generic/irq_regs.h"
           ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 28 "include/asm-generic/irq_regs.h" 3 4
           ((void *)0)
# 28 "include/asm-generic/irq_regs.h"
           ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 28 "include/asm-generic/irq_regs.h" 3 4
           ((void *)0)
# 28 "include/asm-generic/irq_regs.h"
           ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 29 "include/asm-generic/irq_regs.h" 3 4
((void *)0)
# 29 "include/asm-generic/irq_regs.h"
; (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 29 "include/asm-generic/irq_regs.h" 3 4
((void *)0)
# 29 "include/asm-generic/irq_regs.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }) = new_regs; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 29 "include/asm-generic/irq_regs.h" 3 4
((void *)0)
# 29 "include/asm-generic/irq_regs.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }) = new_regs; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 29 "include/asm-generic/irq_regs.h" 3 4
((void *)0)
# 29 "include/asm-generic/irq_regs.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }) = new_regs; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))
# 29 "include/asm-generic/irq_regs.h" 3 4
((void *)0)
# 29 "include/asm-generic/irq_regs.h"
; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(__irq_regs))) *)(&(__irq_regs)), (__kern_my_cpu_offset())); }) = new_regs; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 return old_regs;
}
# 1 "arch/arm64/include/generated/asm/irq_regs.h" 2
# 27 "include/linux/irq.h" 2

struct seq_file;
struct module;
struct msi_msg;
struct irq_affinity_desc;
enum irqchip_irq_state;
# 82 "include/linux/irq.h"
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
 IRQ_DISABLE_UNLAZY = (1 << 19),
 IRQ_HIDDEN = (1 << 20),
 IRQ_OOB = (1 << 21),
 IRQ_CHAINED = (1 << 22),
};
# 129 "include/linux/irq.h"
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
 IRQ_SET_MASK_OK_DONE,
};

struct msi_desc;
struct irq_domain;
# 153 "include/linux/irq.h"
struct irq_common_data {
 unsigned int state_use_accessors;

 unsigned int node;

 void *handler_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;

 cpumask_var_t effective_affinity;


 unsigned int ipi_offset;

};
# 184 "include/linux/irq.h"
struct irq_data {
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 struct irq_common_data *common;
 struct irq_chip *chip;
 struct irq_domain *domain;

 struct irq_data *parent_data;




 void *chip_data;
};
# 236 "include/linux/irq.h"
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_ACTIVATED = (1 << 9),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
 IRQD_WAKEUP_ARMED = (1 << 19),
 IRQD_FORWARDED_TO_VCPU = (1 << 20),
 IRQD_AFFINITY_MANAGED = (1 << 21),
 IRQD_IRQ_STARTED = (1 << 22),
 IRQD_MANAGED_SHUTDOWN = (1 << 23),
 IRQD_SINGLE_TARGET = (1 << 24),
 IRQD_DEFAULT_TRIGGER_SET = (1 << 25),
 IRQD_CAN_RESERVE = (1 << 26),
 IRQD_MSI_NOMASK_QUIRK = (1 << 27),
 IRQD_HANDLE_ENFORCE_IRQCTX = (1 << 28),
 IRQD_AFFINITY_ON_ACTIVATE = (1 << 29),
 IRQD_IRQ_ENABLED_ON_SUSPEND = (1 << 30),
 IRQD_SETAFFINITY_BLOCKED = (1 << 31),
};



static inline bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_PENDING;
}

static inline void irqd_set_move_blocked(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_SETAFFINITY_BLOCKED;
}

static inline void irqd_clr_move_blocked(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_SETAFFINITY_BLOCKED;
}

static inline bool irqd_is_setaffinity_blocked(struct irq_data *d)
{
 return irqs_pipelined() && (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_BLOCKED;
}

static inline bool irqd_is_per_cpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_PER_CPU;
}

static inline bool irqd_can_balance(struct irq_data *d)
{
 return !((((d)->common)->state_use_accessors) & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline bool irqd_affinity_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_SET;
}

static inline void irqd_mark_affinity_was_set(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_SET;
}

static inline bool irqd_trigger_type_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_DEFAULT_TRIGGER_SET;
}

static inline u32 irqd_get_trigger_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_TRIGGER_MASK;
}





static inline void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= type & IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= IRQD_DEFAULT_TRIGGER_SET;
}

static inline bool irqd_is_level_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_LEVEL;
}





static inline void irqd_set_single_target(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_SINGLE_TARGET;
}

static inline bool irqd_is_single_target(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SINGLE_TARGET;
}

static inline void irqd_set_handle_enforce_irqctx(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline bool irqd_is_handle_enforce_irqctx(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline bool irqd_is_enabled_on_suspend(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_ENABLED_ON_SUSPEND;
}

static inline bool irqd_is_wakeup_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_STATE;
}

static inline bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MOVE_PCNTXT;
}

static inline bool irqd_irq_disabled(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_DISABLED;
}

static inline bool irqd_irq_masked(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_MASKED;
}

static inline bool irqd_irq_inprogress(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_INPROGRESS;
}

static inline bool irqd_is_wakeup_armed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_ARMED;
}

static inline bool irqd_is_forwarded_to_vcpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_FORWARDED_TO_VCPU;
}

static inline void irqd_set_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_FORWARDED_TO_VCPU;
}

static inline void irqd_clr_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_FORWARDED_TO_VCPU;
}

static inline bool irqd_affinity_is_managed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_MANAGED;
}

static inline bool irqd_is_activated(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_ACTIVATED;
}

static inline void irqd_set_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_ACTIVATED;
}

static inline void irqd_clr_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_ACTIVATED;
}

static inline bool irqd_is_started(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_STARTED;
}

static inline bool irqd_is_managed_and_shutdown(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MANAGED_SHUTDOWN;
}

static inline void irqd_set_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_CAN_RESERVE;
}

static inline void irqd_clr_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_CAN_RESERVE;
}

static inline bool irqd_can_reserve(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_CAN_RESERVE;
}

static inline void irqd_set_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_MSI_NOMASK_QUIRK;
}

static inline void irqd_clr_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_MSI_NOMASK_QUIRK;
}

static inline bool irqd_msi_nomask_quirk(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MSI_NOMASK_QUIRK;
}

static inline void irqd_set_affinity_on_activate(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_ON_ACTIVATE;
}

static inline bool irqd_affinity_on_activate(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_ON_ACTIVATE;
}



static inline irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
# 532 "include/linux/irq.h"
struct irq_chip {
 struct device *parent_device;
 const char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);

 void (*irq_cpu_online)(struct irq_data *data);
 void (*irq_cpu_offline)(struct irq_data *data);

 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);
 int (*irq_request_resources)(struct irq_data *data);
 void (*irq_release_resources)(struct irq_data *data);

 void (*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
 void (*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

 int (*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
 int (*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

 int (*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

 void (*ipi_send_single)(struct irq_data *data, unsigned int cpu);
 void (*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

 int (*irq_nmi_setup)(struct irq_data *data);
 void (*irq_nmi_teardown)(struct irq_data *data);

 unsigned long flags;
};
# 601 "include/linux/irq.h"
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
 IRQCHIP_EOI_THREADED = (1 << 6),
 IRQCHIP_SUPPORTS_LEVEL_MSI = (1 << 7),
 IRQCHIP_SUPPORTS_NMI = (1 << 8),
 IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND = (1 << 9),
 IRQCHIP_PIPELINE_SAFE = (1 << 10),
};

# 1 "include/linux/irqdesc.h" 1
# 13 "include/linux/irqdesc.h"
struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_domain;
struct pt_regs;
# 55 "include/linux/irqdesc.h"
struct irq_desc {
 struct irq_common_data irq_common_data;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;
 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int tot_count;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 atomic_t threads_handled;
 int threads_handled_last;
 hybrid_spinlock_t lock;
 struct cpumask *percpu_enabled;
 const struct cpumask *percpu_affinity;

 const struct cpumask *affinity_hint;
 struct irq_affinity_notify *affinity_notify;




 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;

 unsigned int nr_actions;
 unsigned int no_suspend_depth;
 unsigned int cond_suspend_depth;
 unsigned int force_resume_depth;


 struct proc_dir_entry *dir;






 struct callback_head rcu;
 struct kobject kobj;

 struct mutex request_mutex;
 int parent_irq;
 struct module *owner;
 const char *name;
} ;


extern void irq_lock_sparse(void);
extern void irq_unlock_sparse(void);






static inline unsigned int irq_desc_kstat_cpu(struct irq_desc *desc,
           unsigned int cpu)
{
 return desc->kstat_irqs ? *({ do { const void *__vpp_verify = (typeof((desc->kstat_irqs) + 0))
# 119 "include/linux/irqdesc.h" 3 4
                           ((void *)0)
# 119 "include/linux/irqdesc.h"
                           ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs)), ((__per_cpu_offset[(cpu)]))); }) : 0;
}

static inline struct irq_desc *irq_data_to_desc(struct irq_data *data)
{
 return ({ void *__mptr = (void *)(data->common); do { } while (0); ((struct irq_desc *)(__mptr - ((size_t)&((struct irq_desc *)0)->irq_common_data))); });
}

static inline unsigned int irq_desc_get_irq(struct irq_desc *desc)
{
 return desc->irq_data.irq;
}

static inline struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}

static inline struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return desc->irq_data.chip;
}

static inline void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return desc->irq_data.chip_data;
}

static inline void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return desc->irq_common_data.handler_data;
}





static inline void generic_handle_irq_desc(struct irq_desc *desc)
{
 desc->handle_irq(desc);
}

int generic_handle_irq(unsigned int irq);

void generic_pipeline_irq(unsigned int irq, struct pt_regs *regs);
# 172 "include/linux/irqdesc.h"
int __handle_domain_irq(struct irq_domain *domain, unsigned int hwirq,
   bool lookup, struct pt_regs *regs);


unsigned int irq_find_mapping(struct irq_domain *host,
   irq_hw_number_t hwirq);

static inline int handle_domain_irq(struct irq_domain *domain,
        unsigned int hwirq, struct pt_regs *regs)
{
 unsigned int irq = irq_find_mapping(domain, hwirq);

 generic_pipeline_irq(irq, regs);

 return 0;
}
# 197 "include/linux/irqdesc.h"
int handle_domain_nmi(struct irq_domain *domain, unsigned int hwirq,
        struct pt_regs *regs);




static inline int irq_desc_has_action(struct irq_desc *desc)
{
 return desc && desc->action != 
# 205 "include/linux/irqdesc.h" 3 4
                               ((void *)0)
# 205 "include/linux/irqdesc.h"
                                   ;
}
# 218 "include/linux/irqdesc.h"
static inline void irq_set_handler_locked(struct irq_data *data,
       irq_flow_handler_t handler)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
}
# 238 "include/linux/irqdesc.h"
static inline void
irq_set_chip_handler_name_locked(struct irq_data *data, struct irq_chip *chip,
     irq_flow_handler_t handler, const char *name)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
 desc->name = name;
 data->chip = chip;
}

bool irq_check_status_bit(unsigned int irq, unsigned int bitmask);

static inline bool irq_balancing_disabled(unsigned int irq)
{
 return irq_check_status_bit(irq, (IRQ_PER_CPU | IRQ_NO_BALANCING));
}

static inline bool irq_is_percpu(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU);
}

static inline bool irq_is_percpu_devid(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU_DEVID);
}

void __irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class);

static inline int irq_is_oob(unsigned int irq)
{
 struct irq_desc *desc;

 desc = irq_to_desc(irq);
 return desc->status_use_accessors & IRQ_OOB;
}

static inline void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class)
{
 if (0)
  __irq_set_lockdep_class(irq, lock_class, request_class);
}
# 616 "include/linux/irq.h" 2




# 1 "arch/arm64/include/generated/asm/hw_irq.h" 1
# 1 "include/asm-generic/hw_irq.h" 1
# 1 "arch/arm64/include/generated/asm/hw_irq.h" 2
# 621 "include/linux/irq.h" 2
# 632 "include/linux/irq.h"
struct irqaction;
extern int setup_percpu_irq(unsigned int irq, struct irqaction *new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);

extern void irq_cpu_online(void);
extern void irq_cpu_offline(void);
extern int irq_set_affinity_locked(struct irq_data *data,
       const struct cpumask *cpumask, bool force);
extern int irq_set_vcpu_affinity(unsigned int irq, void *vcpu_info);


extern void irq_migrate_all_off_this_cpu(void);
extern int irq_affinity_online_cpu(unsigned int cpu);
# 659 "include/linux/irq.h"
static inline void irq_move_irq(struct irq_data *data) { }
static inline void irq_move_masked_irq(struct irq_data *data) { }
static inline void irq_force_complete_move(struct irq_desc *desc) { }


extern int no_irq_affinity;


int irq_set_parent(int irq, int parent_irq);
# 679 "include/linux/irq.h"
extern void handle_level_irq(struct irq_desc *desc);
extern void handle_fasteoi_irq(struct irq_desc *desc);
extern void handle_edge_irq(struct irq_desc *desc);
extern void handle_edge_eoi_irq(struct irq_desc *desc);
extern void handle_simple_irq(struct irq_desc *desc);
extern void handle_untracked_irq(struct irq_desc *desc);
extern void handle_percpu_irq(struct irq_desc *desc);
extern void handle_percpu_devid_irq(struct irq_desc *desc);
extern void handle_bad_irq(struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);
extern void handle_synthetic_irq(struct irq_desc *desc);

extern void handle_fasteoi_nmi(struct irq_desc *desc);
extern void handle_percpu_devid_fasteoi_nmi(struct irq_desc *desc);

extern int irq_chip_compose_msi_msg(struct irq_data *data, struct msi_msg *msg);
extern int irq_chip_pm_get(struct irq_data *data);
extern int irq_chip_pm_put(struct irq_data *data);

extern void handle_fasteoi_ack_irq(struct irq_desc *desc);
extern void handle_fasteoi_mask_irq(struct irq_desc *desc);
extern int irq_chip_set_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool val);
extern int irq_chip_get_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool *state);
extern void irq_chip_enable_parent(struct irq_data *data);
extern void irq_chip_disable_parent(struct irq_data *data);
extern void irq_chip_ack_parent(struct irq_data *data);
extern int irq_chip_retrigger_hierarchy(struct irq_data *data);
extern void irq_chip_mask_parent(struct irq_data *data);
extern void irq_chip_mask_ack_parent(struct irq_data *data);
extern void irq_chip_unmask_parent(struct irq_data *data);
extern void irq_chip_eoi_parent(struct irq_data *data);
extern int irq_chip_set_affinity_parent(struct irq_data *data,
     const struct cpumask *dest,
     bool force);
extern int irq_chip_set_wake_parent(struct irq_data *data, unsigned int on);
extern int irq_chip_set_vcpu_affinity_parent(struct irq_data *data,
          void *vcpu_info);
extern int irq_chip_set_type_parent(struct irq_data *data, unsigned int type);
extern int irq_chip_request_resources_parent(struct irq_data *data);
extern void irq_chip_release_resources_parent(struct irq_data *data);



extern void note_interrupt(struct irq_desc *desc, irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, const char *name);

static inline void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, 
# 746 "include/linux/irq.h" 3 4
                                                 ((void *)0)
# 746 "include/linux/irq.h"
                                                     );
}

extern int irq_set_percpu_devid(unsigned int irq);
extern int irq_set_percpu_devid_partition(unsigned int irq,
       const struct cpumask *affinity);
extern int irq_get_percpu_devid_partition(unsigned int irq,
       struct cpumask *affinity);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    const char *name);

static inline void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, 
# 762 "include/linux/irq.h" 3 4
                                  ((void *)0)
# 762 "include/linux/irq.h"
                                      );
}






static inline void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, 
# 773 "include/linux/irq.h" 3 4
                                  ((void *)0)
# 773 "include/linux/irq.h"
                                      );
}






void
irq_set_chained_handler_and_data(unsigned int irq, irq_flow_handler_t handle,
     void *data);

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : 
# 845 "include/linux/irq.h" 3 4
                     ((void *)0)
# 845 "include/linux/irq.h"
                         ;
}

static inline struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : 
# 856 "include/linux/irq.h" 3 4
                          ((void *)0)
# 856 "include/linux/irq.h"
                              ;
}

static inline void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->handler_data : 
# 867 "include/linux/irq.h" 3 4
                                     ((void *)0)
# 867 "include/linux/irq.h"
                                         ;
}

static inline void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->common->handler_data;
}

static inline struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->msi_desc : 
# 878 "include/linux/irq.h" 3 4
                                 ((void *)0)
# 878 "include/linux/irq.h"
                                     ;
}

static inline struct msi_desc *irq_data_get_msi_desc(struct irq_data *d)
{
 return d->common->msi_desc;
}

static inline u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

static inline int irq_common_data_get_node(struct irq_common_data *d)
{

 return d->node;



}

static inline int irq_data_get_node(struct irq_data *d)
{
 return irq_common_data_get_node(d->common);
}

static inline struct cpumask *irq_get_affinity_mask(int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? d->common->affinity : 
# 910 "include/linux/irq.h" 3 4
                                 ((void *)0)
# 910 "include/linux/irq.h"
                                     ;
}

static inline struct cpumask *irq_data_get_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}


static inline
struct cpumask *irq_data_get_effective_affinity_mask(struct irq_data *d)
{
 return d->common->effective_affinity;
}
static inline void irq_data_update_effective_affinity(struct irq_data *d,
            const struct cpumask *m)
{
 cpumask_copy(d->common->effective_affinity, m);
}
# 941 "include/linux/irq.h"
static inline struct cpumask *irq_get_effective_affinity_mask(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? irq_data_get_effective_affinity_mask(d) : 
# 945 "include/linux/irq.h" 3 4
                                                     ((void *)0)
# 945 "include/linux/irq.h"
                                                         ;
}

unsigned int arch_dynirq_lower_bound(unsigned int from);

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
        struct module *owner,
        const struct irq_affinity_desc *affinity);

int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
      unsigned int cnt, int node, struct module *owner,
      const struct irq_affinity_desc *affinity);
# 989 "include/linux/irq.h"
void irq_free_descs(unsigned int irq, unsigned int cnt);
static inline void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}
# 1009 "include/linux/irq.h"
struct irq_chip_regs {
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;
};
# 1032 "include/linux/irq.h"
struct irq_chip_type {
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;
};
# 1074 "include/linux/irq.h"
struct irq_chip_generic {
 hard_spinlock_t lock;
 void *reg_base;
 u32 (*reg_readl)(void *addr);
 void (*reg_writel)(u32 val, void *addr);
 void (*suspend)(struct irq_chip_generic *gc);
 void (*resume)(struct irq_chip_generic *gc);
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[];
};
# 1107 "include/linux/irq.h"
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
 IRQ_GC_BE_IO = 1 << 4,
};
# 1124 "include/linux/irq.h"
struct irq_domain_chip_generic {
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[];
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_and_ack_set(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


int irq_map_generic_chip(struct irq_domain *d, unsigned int virq,
    irq_hw_number_t hw_irq);
struct irq_chip_generic *
irq_alloc_generic_chip(const char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *
devm_irq_alloc_generic_chip(struct device *dev, const char *name, int num_ct,
       unsigned int irq_base, void *reg_base,
       irq_flow_handler_t handler);
int devm_irq_setup_generic_chip(struct device *dev, struct irq_chip_generic *gc,
    u32 msk, enum irq_gc_flags flags,
    unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);

int __irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
         int num_ct, const char *name,
         irq_flow_handler_t handler,
         unsigned int clr, unsigned int set,
         enum irq_gc_flags flags);
# 1182 "include/linux/irq.h"
static inline void irq_free_generic_chip(struct irq_chip_generic *gc)
{
 kfree(gc);
}

static inline void irq_destroy_generic_chip(struct irq_chip_generic *gc,
         u32 msk, unsigned int clr,
         unsigned int set)
{
 irq_remove_generic_chip(gc, msk, clr, set);
 irq_free_generic_chip(gc);
}

static inline struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ void *__mptr = (void *)(d->chip); do { } while (0); ((struct irq_chip_type *)(__mptr - ((size_t)&((struct irq_chip_type *)0)->chip))); });
}





int irq_switch_oob(unsigned int irq, bool on);




static inline void irq_gc_lock(struct irq_chip_generic *gc)
{
 _raw_spin_lock((&gc->lock));
}

static inline void irq_gc_unlock(struct irq_chip_generic *gc)
{
 _raw_spin_unlock((&gc->lock));
}
# 1233 "include/linux/irq.h"
static inline void irq_reg_writel(struct irq_chip_generic *gc,
      u32 val, int reg_offset)
{
 if (gc->reg_writel)
  gc->reg_writel(val, gc->reg_base + reg_offset);
 else
  ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)((val))),((gc->reg_base + reg_offset)))); });
}

static inline u32 irq_reg_readl(struct irq_chip_generic *gc,
    int reg_offset)
{
 if (gc->reg_readl)
  return gc->reg_readl(gc->reg_base + reg_offset);
 else
  return ({ u32 __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(gc->reg_base + reg_offset))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}

struct irq_matrix;
struct irq_matrix *irq_alloc_matrix(unsigned int matrix_bits,
        unsigned int alloc_start,
        unsigned int alloc_end);
void irq_matrix_online(struct irq_matrix *m);
void irq_matrix_offline(struct irq_matrix *m);
void irq_matrix_assign_system(struct irq_matrix *m, unsigned int bit, bool replace);
int irq_matrix_reserve_managed(struct irq_matrix *m, const struct cpumask *msk);
void irq_matrix_remove_managed(struct irq_matrix *m, const struct cpumask *msk);
int irq_matrix_alloc_managed(struct irq_matrix *m, const struct cpumask *msk,
    unsigned int *mapped_cpu);
void irq_matrix_reserve(struct irq_matrix *m);
void irq_matrix_remove_reserved(struct irq_matrix *m);
int irq_matrix_alloc(struct irq_matrix *m, const struct cpumask *msk,
       bool reserved, unsigned int *mapped_cpu);
void irq_matrix_free(struct irq_matrix *m, unsigned int cpu,
       unsigned int bit, bool managed);
void irq_matrix_assign(struct irq_matrix *m, unsigned int bit);
unsigned int irq_matrix_available(struct irq_matrix *m, bool cpudown);
unsigned int irq_matrix_allocated(struct irq_matrix *m);
unsigned int irq_matrix_reserved(struct irq_matrix *m);
void irq_matrix_debug_show(struct seq_file *sf, struct irq_matrix *m, int ind);



irq_hw_number_t ipi_get_hwirq(unsigned int irq, unsigned int cpu);
int __ipi_send_single(struct irq_desc *desc, unsigned int cpu);
int __ipi_send_mask(struct irq_desc *desc, const struct cpumask *dest);
int ipi_send_single(unsigned int virq, unsigned int cpu);
int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
# 18 "include/asm-generic/hardirq.h" 2
# 18 "arch/arm64/include/asm/hardirq.h" 2



struct nmi_ctx {
 u64 hcr;
 unsigned int cnt;
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct nmi_ctx) nmi_contexts;
# 88 "arch/arm64/include/asm/hardirq.h"
static inline void ack_bad_irq(unsigned int irq)
{
 extern unsigned long irq_err_count;
 irq_err_count++;
}
# 13 "include/linux/hardirq.h" 2

extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);




static inline void __rcu_irq_enter_check_tick(void) { }


static 
# 23 "include/linux/hardirq.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 23 "include/linux/hardirq.h"
                      void rcu_irq_enter_check_tick(void)
{
 if (context_tracking_enabled())
  __rcu_irq_enter_check_tick();
}
# 56 "include/linux/hardirq.h"
void irq_enter(void);



void irq_enter_rcu(void);
# 84 "include/linux/hardirq.h"
void irq_exit(void);




void irq_exit_rcu(void);
# 100 "include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 156 "include/linux/hardirq.h"
static inline bool start_irq_flow(void)
{
 return !irqs_pipelined() || (preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4)));
}

static inline bool on_pipeline_entry(void)
{
 return irqs_pipelined() && (preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4)));
}

static inline bool in_hard_irq(void)
{
 return irqs_pipelined() ? (preempt_count() & (((1UL << (1))-1) << ((((0 + 8) + 8) + 4) + 4))) : ((preempt_count() & (((1UL << (4))-1) << ((0 + 8) + 8))));
}
# 12 "include/linux/interrupt.h" 2
# 98 "include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 121 "include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} ;

extern irqreturn_t no_action(int cpl, void *dev_id);
# 149 "include/linux/interrupt.h"
extern int __attribute__((__warn_unused_result__))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);
# 167 "include/linux/interrupt.h"
static inline int __attribute__((__warn_unused_result__))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, 
# 171 "include/linux/interrupt.h" 3 4
                                          ((void *)0)
# 171 "include/linux/interrupt.h"
                                              , flags, name, dev);
}

extern int __attribute__((__warn_unused_result__))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((__warn_unused_result__))
__request_percpu_irq(unsigned int irq, irq_handler_t handler,
       unsigned long flags, const char *devname,
       void *percpu_dev_id);

extern int __attribute__((__warn_unused_result__))
request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev);

static inline int __attribute__((__warn_unused_result__))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id)
{
 return __request_percpu_irq(irq, handler, 0,
        devname, percpu_dev_id);
}

extern int __attribute__((__warn_unused_result__))
request_percpu_nmi(unsigned int irq, irq_handler_t handler,
     const char *devname, void *dev);

extern const void *free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

extern const void *free_nmi(unsigned int irq, void *dev_id);
extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);

struct device;

extern int __attribute__((__warn_unused_result__))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline int __attribute__((__warn_unused_result__))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, 
# 217 "include/linux/interrupt.h" 3 4
                                                    ((void *)0)
# 217 "include/linux/interrupt.h"
                                                        , irqflags,
      devname, dev_id);
}

extern int __attribute__((__warn_unused_result__))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 246 "include/linux/interrupt.h"
bool irq_has_action(unsigned int irq);
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);

extern void disable_nmi_nosync(unsigned int irq);
extern void disable_percpu_nmi(unsigned int irq);
extern void enable_nmi(unsigned int irq);
extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
extern int prepare_percpu_nmi(unsigned int irq);
extern void teardown_percpu_nmi(unsigned int irq);

extern int irq_inject_interrupt(unsigned int irq);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
extern void rearm_wake_irq(unsigned int irq);
# 282 "include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};
# 306 "include/linux/interrupt.h"
struct irq_affinity {
 unsigned int pre_vectors;
 unsigned int post_vectors;
 unsigned int nr_sets;
 unsigned int set_size[4];
 void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
 void *priv;
};






struct irq_affinity_desc {
 struct cpumask mask;
 unsigned int is_managed : 1;
};



extern cpumask_var_t irq_default_affinity;


extern int __irq_set_affinity(unsigned int irq, const struct cpumask *cpumask,
         bool force);
# 340 "include/linux/interrupt.h"
static inline int
irq_set_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return __irq_set_affinity(irq, cpumask, false);
}
# 357 "include/linux/interrupt.h"
static inline int
irq_force_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return __irq_set_affinity(irq, cpumask, true);
}

extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);
extern int irq_update_affinity_desc(unsigned int irq,
        struct irq_affinity_desc *affinity);

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);

struct irq_affinity_desc *
irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd);

unsigned int irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
           const struct irq_affinity *affd);
# 442 "include/linux/interrupt.h"
static inline void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);





extern bool force_irqthreads;
# 568 "include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,
 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

 void do_softirq(void);
 void __do_softirq(void);

extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))
# 614 "include/linux/interrupt.h" 3 4
       ((void *)0)
# 614 "include/linux/interrupt.h"
       ; (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ typeof(ksoftirqd) __retval; do { __preempt_count_add(1); barrier(); } while (0); __retval = (typeof(ksoftirqd))__percpu_read_8(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))
# 614 "include/linux/interrupt.h" 3 4
       ((void *)0)
# 614 "include/linux/interrupt.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)), (__kern_my_cpu_offset())); })); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); __retval; }); break; case 2: pscr_ret__ = ({ typeof(ksoftirqd) __retval; do { __preempt_count_add(1); barrier(); } while (0); __retval = (typeof(ksoftirqd))__percpu_read_16(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))
# 614 "include/linux/interrupt.h" 3 4
       ((void *)0)
# 614 "include/linux/interrupt.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)), (__kern_my_cpu_offset())); })); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); __retval; }); break; case 4: pscr_ret__ = ({ typeof(ksoftirqd) __retval; do { __preempt_count_add(1); barrier(); } while (0); __retval = (typeof(ksoftirqd))__percpu_read_32(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))
# 614 "include/linux/interrupt.h" 3 4
       ((void *)0)
# 614 "include/linux/interrupt.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)), (__kern_my_cpu_offset())); })); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); __retval; }); break; case 8: pscr_ret__ = ({ typeof(ksoftirqd) __retval; do { __preempt_count_add(1); barrier(); } while (0); __retval = (typeof(ksoftirqd))__percpu_read_64(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))
# 614 "include/linux/interrupt.h" 3 4
       ((void *)0)
# 614 "include/linux/interrupt.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)), (__kern_my_cpu_offset())); })); do { barrier(); if (unlikely(__preempt_count_dec_and_test())) preempt_schedule_notrace(); } while (0); __retval; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 640 "include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 bool use_callback;
 union {
  void (*func)(unsigned long data);
  void (*callback)(struct tasklet_struct *t);
 };
 unsigned long data;
};
# 682 "include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

void tasklet_unlock(struct tasklet_struct *t);
void tasklet_unlock_wait(struct tasklet_struct *t);
void tasklet_unlock_spin_wait(struct tasklet_struct *t);
# 705 "include/linux/interrupt.h"
extern void __tasklet_schedule(struct tasklet_struct *t);

static inline void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

static inline void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 barrier();
}





static inline void tasklet_disable_in_atomic(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_spin_wait(t);
 barrier();
}

static inline void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 barrier();
}

static inline void tasklet_enable(struct tasklet_struct *t)
{
 barrier();
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
extern void tasklet_setup(struct tasklet_struct *t,
     void (*callback)(struct tasklet_struct *));
# 799 "include/linux/interrupt.h"
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);
# 819 "include/linux/interrupt.h"
struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 21 "include/linux/irq_pipeline.h" 2




void irq_pipeline_init_early(void);

void irq_pipeline_init(void);

void arch_irq_pipeline_init(void);

void generic_pipeline_irq_desc(struct irq_desc *desc,
          struct pt_regs *regs);

int irq_inject_pipeline(unsigned int irq);

void synchronize_pipeline(void);

static 
# 38 "include/linux/irq_pipeline.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 38 "include/linux/irq_pipeline.h"
                      void synchronize_pipeline_on_irq(void)
{





 if (running_inband() ||
     stage_irqs_pending(this_oob_staged()))
  synchronize_pipeline();
}

bool handle_oob_irq(struct irq_desc *desc);

void arch_do_IRQ_pipelined(struct irq_desc *desc);


void irq_send_oob_ipi(unsigned int ipi,
  const struct cpumask *cpumask);


void irq_pipeline_oops(void);

bool irq_cpuidle_enter(struct cpuidle_device *dev,
         struct cpuidle_state *state);

int run_oob_call(int (*fn)(void *arg), void *arg);

extern bool irq_pipeline_active;

static inline bool inband_unsafe(void)
{
 return running_oob() ||
  (native_irqs_disabled() && irq_pipeline_active);
}

static inline bool inband_irq_pending(void)
{
 check_hard_irqs_disabled();

 return stage_irqs_pending(this_inband_staged());
}

struct irq_stage_data *
handle_irq_pipelined_prepare(struct pt_regs *regs);

int handle_irq_pipelined_finish(struct irq_stage_data *prevd,
    struct pt_regs *regs);

int handle_irq_pipelined(struct pt_regs *regs);

void sync_inband_irqs(void);

extern struct irq_domain *synthetic_irq_domain;
# 142 "include/linux/irq_pipeline.h"
void uncache_irq_desc(unsigned int irq);
# 14 "include/evl/sched.h" 2
# 1 "include/evl/thread.h" 1
# 18 "include/evl/thread.h"
# 1 "include/linux/ptrace.h" 1
# 10 "include/linux/ptrace.h"
# 1 "include/linux/pid_namespace.h" 1
# 10 "include/linux/pid_namespace.h"
# 1 "include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct time_namespace *time_ns;
 struct time_namespace *time_ns_for_children;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 53 "include/linux/nsproxy.h"
struct nsset {
 unsigned flags;
 struct nsproxy *nsproxy;
 struct fs_struct *fs;
 const struct cred *cred;
};

static inline struct cred *nsset_cred(struct nsset *set)
{
 if (set->flags & 0x10000000)
  return (struct cred *)set->cred;

 return 
# 65 "include/linux/nsproxy.h" 3 4
       ((void *)0)
# 65 "include/linux/nsproxy.h"
           ;
}
# 94 "include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) nsproxy_cache_init(void);

static inline void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 11 "include/linux/pid_namespace.h" 2
# 1 "include/linux/ns_common.h" 1






struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
 refcount_t count;
};
# 12 "include/linux/pid_namespace.h" 2





struct fs_pin;

struct pid_namespace {
 struct idr idr;
 struct callback_head rcu;
 unsigned int pid_allocated;
 struct task_struct *child_reaper;
 struct kmem_cache *pid_cachep;
 unsigned int level;
 struct pid_namespace *parent;

 struct fs_pin *bacct;

 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 int reboot;
 struct ns_common ns;
} __attribute__((__designated_init__));

extern struct pid_namespace init_pid_ns;




static inline struct pid_namespace *get_pid_ns(struct pid_namespace *ns)
{
 if (ns != &init_pid_ns)
  refcount_inc(&ns->ns.count);
 return ns;
}

extern struct pid_namespace *copy_pid_ns(unsigned long flags,
 struct user_namespace *user_ns, struct pid_namespace *ns);
extern void zap_pid_ns_processes(struct pid_namespace *pid_ns);
extern int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd);
extern void put_pid_ns(struct pid_namespace *ns);
# 85 "include/linux/pid_namespace.h"
extern struct pid_namespace *task_active_pid_ns(struct task_struct *tsk);
void pidhash_init(void);
void pid_idr_init(void);
# 11 "include/linux/ptrace.h" 2
# 1 "include/uapi/linux/ptrace.h" 1
# 59 "include/uapi/linux/ptrace.h"
struct ptrace_peeksiginfo_args {
 __u64 off;
 __u32 flags;
 __s32 nr;
};







struct seccomp_metadata {
 __u64 filter_off;
 __u64 flags;
};







struct ptrace_syscall_info {
 __u8 op;
 __u8 pad[3];
 __u32 arch;
 __u64 instruction_pointer;
 __u64 stack_pointer;
 union {
  struct {
   __u64 nr;
   __u64 args[6];
  } entry;
  struct {
   __s64 rval;
   __u8 is_error;
  } exit;
  struct {
   __u64 nr;
   __u64 args[6];
   __u32 ret_data;
  } seccomp;
 };
};



struct ptrace_rseq_configuration {
 __u64 rseq_abi_pointer;
 __u32 rseq_abi_size;
 __u32 signature;
 __u32 flags;
 __u32 pad;
};
# 12 "include/linux/ptrace.h" 2



struct syscall_info {
 __u64 sp;
 struct seccomp_data data;
};

extern int ptrace_access_vm(struct task_struct *tsk, unsigned long addr,
       void *buf, int len, unsigned int gup_flags);
# 56 "include/linux/ptrace.h"
extern long arch_ptrace(struct task_struct *child, long request,
   unsigned long addr, unsigned long data);
extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);
extern int ptrace_writedata(struct task_struct *tsk, char *src, unsigned long dst, int len);
extern void ptrace_disable(struct task_struct *);
extern int ptrace_request(struct task_struct *child, long request,
     unsigned long addr, unsigned long data);
extern void ptrace_notify(int exit_code);
extern void __ptrace_link(struct task_struct *child,
     struct task_struct *new_parent,
     const struct cred *ptracer_cred);
extern void __ptrace_unlink(struct task_struct *child);
extern void exit_ptrace(struct task_struct *tracer, struct list_head *dead);
# 95 "include/linux/ptrace.h"
extern bool ptrace_may_access(struct task_struct *task, unsigned int mode);

static inline int ptrace_reparented(struct task_struct *child)
{
 return !same_thread_group(child->real_parent, child->parent);
}

static inline void ptrace_unlink(struct task_struct *child)
{
 if (unlikely(child->ptrace))
  __ptrace_unlink(child);
}

int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
# 124 "include/linux/ptrace.h"
static inline struct task_struct *ptrace_parent(struct task_struct *task)
{
 if (unlikely(task->ptrace))
  return ({ typeof(*(task->parent)) *________p1 = (typeof(*(task->parent)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((task->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((task->parent)))) *)&((task->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(task->parent)) *)(________p1)); });
 return 
# 128 "include/linux/ptrace.h" 3 4
       ((void *)0)
# 128 "include/linux/ptrace.h"
           ;
}
# 140 "include/linux/ptrace.h"
static inline bool ptrace_event_enabled(struct task_struct *task, int event)
{
 return task->ptrace & (1 << (3 + (event)));
}
# 155 "include/linux/ptrace.h"
static inline void ptrace_event(int event, unsigned long message)
{
 if (unlikely(ptrace_event_enabled(get_current(), event))) {
  get_current()->ptrace_message = message;
  ptrace_notify((event << 8) | 5);
 } else if (event == 4) {

  if ((get_current()->ptrace & (0x00000001|0x00010000)) == 0x00000001)
   send_sig(5, get_current(), 0);
 }
}
# 178 "include/linux/ptrace.h"
static inline void ptrace_event_pid(int event, struct pid *pid)
{






 unsigned long message = 0;
 struct pid_namespace *ns;

 rcu_read_lock();
 ns = task_active_pid_ns(({ typeof(*(get_current()->parent)) *________p1 = (typeof(*(get_current()->parent)) *)({ do { } while (0); (*(const volatile typeof( _Generic(((get_current()->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((get_current()->parent)))) *)&((get_current()->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(get_current()->parent)) *)(________p1)); }));
 if (ns)
  message = pid_nr_ns(pid, ns);
 rcu_read_unlock();

 ptrace_event(event, message);
}
# 208 "include/linux/ptrace.h"
static inline void ptrace_init_task(struct task_struct *child, bool ptrace)
{
 INIT_LIST_HEAD(&child->ptrace_entry);
 INIT_LIST_HEAD(&child->ptraced);
 child->jobctl = 0;
 child->ptrace = 0;
 child->parent = child->real_parent;

 if (unlikely(ptrace) && get_current()->ptrace) {
  child->ptrace = get_current()->ptrace;
  __ptrace_link(child, get_current()->parent, get_current()->ptracer_cred);

  if (child->ptrace & 0x00010000)
   task_set_jobctl_pending(child, (1UL << 19));
  else
   sigaddset(&child->pending.signal, 19);
 }
 else
  child->ptracer_cred = 
# 226 "include/linux/ptrace.h" 3 4
                       ((void *)0)
# 226 "include/linux/ptrace.h"
                           ;
}







static inline void ptrace_release_task(struct task_struct *task)
{
 do { if (unlikely(!list_empty(&task->ptraced))) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 237; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
 ptrace_unlink(task);
 do { if (unlikely(!list_empty(&task->ptrace_entry))) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 239; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
}
# 313 "include/linux/ptrace.h"
extern void user_enable_single_step(struct task_struct *);
extern void user_disable_single_step(struct task_struct *);
# 338 "include/linux/ptrace.h"
static inline void user_enable_block_step(struct task_struct *task)
{
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 340; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0);
}







static inline void user_single_step_report(struct pt_regs *regs)
{
 kernel_siginfo_t info;
 clear_siginfo(&info);
 info.si_signo = 5;
 info.si_errno = 0;
 info.si_code = 0;
 info._sifields._kill._pid = 0;
 info._sifields._kill._uid = 0;
 force_sig_info(&info);
}
# 417 "include/linux/ptrace.h"
extern int task_current_syscall(struct task_struct *target, struct syscall_info *info);

extern void sigaction_compat_abi(struct k_sigaction *act, struct k_sigaction *oact);
# 19 "include/evl/thread.h" 2
# 1 "include/evl/stat.h" 1
# 13 "include/evl/stat.h"
# 1 "include/evl/clock.h" 1
# 15 "include/evl/clock.h"
# 1 "include/evl/list.h" 1
# 16 "include/evl/clock.h" 2
# 1 "include/evl/factory.h" 1
# 10 "include/evl/factory.h"
# 1 "include/linux/device.h" 1
# 15 "include/linux/device.h"
# 1 "include/linux/dev_printk.h" 1
# 22 "include/linux/dev_printk.h"
struct device;




struct dev_printk_info {
 char subsystem[16];
 char device[48];
};



__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void dev_printk(const char *level, const struct device *dev,
  const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 16 "include/linux/device.h" 2
# 1 "include/linux/energy_model.h" 1




# 1 "include/linux/device.h" 1
# 6 "include/linux/energy_model.h" 2



# 1 "include/linux/sched/cpufreq.h" 1
# 14 "include/linux/sched/cpufreq.h"
struct cpufreq_policy;

struct update_util_data {
       void (*func)(struct update_util_data *data, u64 time, unsigned int flags);
};

void cpufreq_add_update_util_hook(int cpu, struct update_util_data *data,
                       void (*func)(struct update_util_data *data, u64 time,
        unsigned int flags));
void cpufreq_remove_update_util_hook(int cpu);
bool cpufreq_this_cpu_can_update(struct cpufreq_policy *policy);

static inline unsigned long map_util_freq(unsigned long util,
     unsigned long freq, unsigned long cap)
{
 return (freq + (freq >> 2)) * util / cap;
}

static inline unsigned long map_util_perf(unsigned long util)
{
 return util + (util >> 2);
}
# 10 "include/linux/energy_model.h" 2
# 1 "include/linux/sched/topology.h" 1






# 1 "include/linux/sched/idle.h" 1






enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};

extern void wake_up_if_idle(int cpu);
# 59 "include/linux/sched/idle.h"
static inline void __current_set_polling(void) { }
static inline void __current_clr_polling(void) { }

static inline bool __attribute__((__warn_unused_result__)) current_set_polling_and_test(void)
{
 return unlikely(tif_need_resched());
}
static inline bool __attribute__((__warn_unused_result__)) current_clr_polling_and_test(void)
{
 return unlikely(tif_need_resched());
}


static inline void current_clr_polling(void)
{
 __current_clr_polling();







 barrier();

 do { if (tif_need_resched()) set_preempt_need_resched(); } while (0);
}
# 8 "include/linux/sched/topology.h" 2
# 16 "include/linux/sched/topology.h"
enum {
# 1 "include/linux/sched/sd_flags.h" 1
# 51 "include/linux/sched/sd_flags.h"
__SD_BALANCE_NEWIDLE,







__SD_BALANCE_EXEC,







__SD_BALANCE_FORK,







__SD_BALANCE_WAKE,






__SD_WAKE_AFFINE,
# 91 "include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY,
# 100 "include/linux/sched/sd_flags.h"
__SD_SHARE_CPUCAPACITY,
# 109 "include/linux/sched/sd_flags.h"
__SD_SHARE_PKG_RESOURCES,
# 120 "include/linux/sched/sd_flags.h"
__SD_SERIALIZE,
# 130 "include/linux/sched/sd_flags.h"
__SD_ASYM_PACKING,
# 140 "include/linux/sched/sd_flags.h"
__SD_PREFER_SIBLING,







__SD_OVERLAP,







__SD_NUMA,
# 18 "include/linux/sched/topology.h" 2
 __SD_FLAG_CNT,
};



enum {
# 1 "include/linux/sched/sd_flags.h" 1
# 51 "include/linux/sched/sd_flags.h"
SD_BALANCE_NEWIDLE = 1 << __SD_BALANCE_NEWIDLE,







SD_BALANCE_EXEC = 1 << __SD_BALANCE_EXEC,







SD_BALANCE_FORK = 1 << __SD_BALANCE_FORK,







SD_BALANCE_WAKE = 1 << __SD_BALANCE_WAKE,






SD_WAKE_AFFINE = 1 << __SD_WAKE_AFFINE,
# 91 "include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY = 1 << __SD_ASYM_CPUCAPACITY,
# 100 "include/linux/sched/sd_flags.h"
SD_SHARE_CPUCAPACITY = 1 << __SD_SHARE_CPUCAPACITY,
# 109 "include/linux/sched/sd_flags.h"
SD_SHARE_PKG_RESOURCES = 1 << __SD_SHARE_PKG_RESOURCES,
# 120 "include/linux/sched/sd_flags.h"
SD_SERIALIZE = 1 << __SD_SERIALIZE,
# 130 "include/linux/sched/sd_flags.h"
SD_ASYM_PACKING = 1 << __SD_ASYM_PACKING,
# 140 "include/linux/sched/sd_flags.h"
SD_PREFER_SIBLING = 1 << __SD_PREFER_SIBLING,







SD_OVERLAP = 1 << __SD_OVERLAP,







SD_NUMA = 1 << __SD_NUMA,
# 25 "include/linux/sched/topology.h" 2
};
# 39 "include/linux/sched/topology.h"
static inline int cpu_smt_flags(void)
{
 return SD_SHARE_CPUCAPACITY | SD_SHARE_PKG_RESOURCES;
}



static inline int cpu_core_flags(void)
{
 return SD_SHARE_PKG_RESOURCES;
}



static inline int cpu_numa_flags(void)
{
 return SD_NUMA;
}


extern int arch_asym_cpu_priority(int cpu);

struct sched_domain_attr {
 int relax_domain_level;
};





extern int sched_domain_level_max;

struct sched_group;

struct sched_domain_shared {
 atomic_t ref;
 atomic_t nr_busy_cpus;
 int has_idle_cores;
};

struct sched_domain {

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;

 int nohz_idle;
 int flags;
 int level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;


 u64 max_newidle_lb_cost;
 unsigned long next_decay_max_lb_cost;

 u64 avg_scan_cost;
# 139 "include/linux/sched/topology.h"
 union {
  void *private;
  struct callback_head rcu;
 };
 struct sched_domain_shared *shared;

 unsigned int span_weight;







 unsigned long span[];
};

static inline struct cpumask *sched_domain_span(struct sched_domain *sd)
{
 return ((struct cpumask *)(1 ? (sd->span) : (void *)sizeof(__check_is_bitmap(sd->span))));
}

extern void partition_sched_domains_locked(int ndoms_new,
        cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);

extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);


cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);

bool cpus_share_cache(int this_cpu, int that_cpu);

typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
typedef int (*sched_domain_flags_f)(void);



struct sd_data {
 struct sched_domain * *sd;
 struct sched_domain_shared * *sds;
 struct sched_group * *sg;
 struct sched_group_capacity * *sgc;
};

struct sched_domain_topology_level {
 sched_domain_mask_f mask;
 sched_domain_flags_f sd_flags;
 int flags;
 int numa_level;
 struct sd_data data;



};

extern void set_sched_topology(struct sched_domain_topology_level *tl);
# 229 "include/linux/sched/topology.h"
extern void rebuild_sched_domains_energy(void);
# 269 "include/linux/sched/topology.h"
static inline int task_node(const struct task_struct *p)
{
 return cpu_to_node(task_cpu(p));
}
# 11 "include/linux/energy_model.h" 2
# 21 "include/linux/energy_model.h"
struct em_perf_state {
 unsigned long frequency;
 unsigned long power;
 unsigned long cost;
};
# 44 "include/linux/energy_model.h"
struct em_perf_domain {
 struct em_perf_state *table;
 int nr_perf_states;
 int milliwatts;
 unsigned long cpus[];
};






struct em_data_callback {
# 76 "include/linux/energy_model.h"
 int (*active_power)(unsigned long *power, unsigned long *freq,
       struct device *dev);
};


struct em_perf_domain *em_cpu_get(int cpu);
struct em_perf_domain *em_pd_get(struct device *dev);
int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
    struct em_data_callback *cb, cpumask_t *span,
    bool milliwatts);
void em_dev_unregister_perf_domain(struct device *dev);
# 102 "include/linux/energy_model.h"
static inline unsigned long em_cpu_energy(struct em_perf_domain *pd,
    unsigned long max_util, unsigned long sum_util)
{
 unsigned long freq, scale_cpu;
 struct em_perf_state *ps;
 int i, cpu;

 if (!sum_util)
  return 0;






 cpu = cpumask_first(((struct cpumask *)(1 ? (pd->cpus) : (void *)sizeof(__check_is_bitmap(pd->cpus)))));
 scale_cpu = topology_get_cpu_scale(cpu);
 ps = &pd->table[pd->nr_perf_states - 1];
 freq = map_util_freq(max_util, ps->frequency, scale_cpu);





 for (i = 0; i < pd->nr_perf_states; i++) {
  ps = &pd->table[i];
  if (ps->frequency >= freq)
   break;
 }
# 174 "include/linux/energy_model.h"
 return ps->cost * sum_util / scale_cpu;
}
# 184 "include/linux/energy_model.h"
static inline int em_pd_nr_perf_states(struct em_perf_domain *pd)
{
 return pd->nr_perf_states;
}
# 17 "include/linux/device.h" 2
# 1 "include/linux/ioport.h" 1
# 21 "include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 134 "include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
 IORES_DESC_SOFT_RESERVED = 8,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 185 "include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}


static inline bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return r1->start <= r2->end && r1->end >= r2->start;
}

static inline bool
resource_intersection(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) > (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID(__x) = (r1->start); typeof(r2->start) __UNIQUE_ID(__y) = (r2->start); ((__UNIQUE_ID(__x)) > (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) < (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID(__x) = (r1->end); typeof(r2->end) __UNIQUE_ID(__y) = (r2->end); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
 return true;
}

static inline bool
resource_union(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) < (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID(__x) = (r1->start); typeof(r2->start) __UNIQUE_ID(__y) = (r2->start); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) > (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID(__x) = (r1->end); typeof(r2->end) __UNIQUE_ID(__y) = (r2->end); ((__UNIQUE_ID(__x)) > (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
 return true;
}
# 269 "include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);
# 288 "include/linux/ioport.h"
struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
struct resource *request_free_mem_region(struct resource *base,
  unsigned long size, const char *name);

static inline void irqresource_disabled(struct resource *res, u32 irq)
{
 res->start = irq;
 res->end = irq;
 res->flags |= 0x00000400 | 0x10000000 | 0x20000000;
}

extern struct address_space *iomem_get_mapping(void);
# 18 "include/linux/device.h" 2

# 1 "include/linux/klist.h" 1
# 17 "include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 20 "include/linux/device.h" 2





# 1 "include/linux/pm.h" 1
# 22 "include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 44 "include/linux/pm.h"
extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 277 "include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 501 "include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 523 "include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 unsigned int clock_op_might_sleep;
 struct mutex clock_mutex;
 struct list_head clock_list;


 struct pm_domain_data *domain_data;

};
# 566 "include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;
 unsigned int must_resume:1;
 unsigned int may_skip_resume:1;




 struct hrtimer suspend_timer;
 u64 timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int needs_force_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 u64 last_busy;
 u64 active_time;
 u64 suspended_time;
 u64 accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 644 "include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 int (*start)(struct device *dev);
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 708 "include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);

extern bool dev_pm_skip_resume(struct device *dev);
extern bool dev_pm_skip_suspend(struct device *dev);
# 802 "include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "include/linux/device.h" 2




# 1 "include/linux/device/bus.h" 1
# 21 "include/linux/device/bus.h"
struct device_driver;
struct fwnode_handle;
# 82 "include/linux/device/bus.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 136 "include/linux/device/bus.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);


int device_match_name(struct device *dev, const void *name);
int device_match_of_node(struct device *dev, const void *np);
int device_match_fwnode(struct device *dev, const void *fwnode);
int device_match_devt(struct device *dev, const void *pdevt);
int device_match_acpi_dev(struct device *dev, const void *adev);
int device_match_any(struct device *dev, const void *unused);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));







static inline struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name)
{
 return bus_find_device(bus, start, name, device_match_name);
}







static inline struct device *
bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
{
 return bus_find_device(bus, 
# 188 "include/linux/device/bus.h" 3 4
                            ((void *)0)
# 188 "include/linux/device/bus.h"
                                , np, device_match_of_node);
}







static inline struct device *
bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
{
 return bus_find_device(bus, 
# 200 "include/linux/device/bus.h" 3 4
                            ((void *)0)
# 200 "include/linux/device/bus.h"
                                , fwnode, device_match_fwnode);
}







static inline struct device *bus_find_device_by_devt(struct bus_type *bus,
           dev_t devt)
{
 return bus_find_device(bus, 
# 212 "include/linux/device/bus.h" 3 4
                            ((void *)0)
# 212 "include/linux/device/bus.h"
                                , &devt, device_match_devt);
}







static inline struct device *
bus_find_next_device(struct bus_type *bus,struct device *cur)
{
 return bus_find_device(bus, cur, 
# 224 "include/linux/device/bus.h" 3 4
                                 ((void *)0)
# 224 "include/linux/device/bus.h"
                                     , device_match_any);
}


struct acpi_device;







static inline struct device *
bus_find_device_by_acpi_dev(struct bus_type *bus, const struct acpi_device *adev)
{
 return bus_find_device(bus, 
# 239 "include/linux/device/bus.h" 3 4
                            ((void *)0)
# 239 "include/linux/device/bus.h"
                                , adev, device_match_acpi_dev);
}
# 249 "include/linux/device/bus.h"
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 285 "include/linux/device/bus.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 31 "include/linux/device.h" 2
# 1 "include/linux/device/class.h" 1
# 22 "include/linux/device/class.h"
struct device;
struct fwnode_handle;
# 54 "include/linux/device/class.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 99 "include/linux/device/class.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));







static inline struct device *class_find_device_by_name(struct class *class,
             const char *name)
{
 return class_find_device(class, 
# 130 "include/linux/device/class.h" 3 4
                                ((void *)0)
# 130 "include/linux/device/class.h"
                                    , name, device_match_name);
}







static inline struct device *
class_find_device_by_of_node(struct class *class, const struct device_node *np)
{
 return class_find_device(class, 
# 142 "include/linux/device/class.h" 3 4
                                ((void *)0)
# 142 "include/linux/device/class.h"
                                    , np, device_match_of_node);
}







static inline struct device *
class_find_device_by_fwnode(struct class *class,
       const struct fwnode_handle *fwnode)
{
 return class_find_device(class, 
# 155 "include/linux/device/class.h" 3 4
                                ((void *)0)
# 155 "include/linux/device/class.h"
                                    , fwnode, device_match_fwnode);
}







static inline struct device *class_find_device_by_devt(struct class *class,
             dev_t devt)
{
 return class_find_device(class, 
# 167 "include/linux/device/class.h" 3 4
                                ((void *)0)
# 167 "include/linux/device/class.h"
                                    , &devt, device_match_devt);
}


struct acpi_device;






static inline struct device *
class_find_device_by_acpi_dev(struct class *class, const struct acpi_device *adev)
{
 return class_find_device(class, 
# 181 "include/linux/device/class.h" 3 4
                                ((void *)0)
# 181 "include/linux/device/class.h"
                                    , adev, device_match_acpi_dev);
}
# 191 "include/linux/device/class.h"
struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 206 "include/linux/device/class.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, 
# 216 "include/linux/device/class.h" 3 4
                                         ((void *)0)
# 216 "include/linux/device/class.h"
                                             );
}

static inline void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, 
# 222 "include/linux/device/class.h" 3 4
                                         ((void *)0)
# 222 "include/linux/device/class.h"
                                             );
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 238 "include/linux/device/class.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 32 "include/linux/device.h" 2
# 1 "include/linux/device/driver.h" 1
# 44 "include/linux/device/driver.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 95 "include/linux/device/driver.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 148 "include/linux/device/driver.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));







static inline struct device *driver_find_device_by_name(struct device_driver *drv,
       const char *name)
{
 return driver_find_device(drv, 
# 171 "include/linux/device/driver.h" 3 4
                               ((void *)0)
# 171 "include/linux/device/driver.h"
                                   , name, device_match_name);
}







static inline struct device *
driver_find_device_by_of_node(struct device_driver *drv,
         const struct device_node *np)
{
 return driver_find_device(drv, 
# 184 "include/linux/device/driver.h" 3 4
                               ((void *)0)
# 184 "include/linux/device/driver.h"
                                   , np, device_match_of_node);
}







static inline struct device *
driver_find_device_by_fwnode(struct device_driver *drv,
        const struct fwnode_handle *fwnode)
{
 return driver_find_device(drv, 
# 197 "include/linux/device/driver.h" 3 4
                               ((void *)0)
# 197 "include/linux/device/driver.h"
                                   , fwnode, device_match_fwnode);
}







static inline struct device *driver_find_device_by_devt(struct device_driver *drv,
       dev_t devt)
{
 return driver_find_device(drv, 
# 209 "include/linux/device/driver.h" 3 4
                               ((void *)0)
# 209 "include/linux/device/driver.h"
                                   , &devt, device_match_devt);
}

static inline struct device *driver_find_next_device(struct device_driver *drv,
           struct device *start)
{
 return driver_find_device(drv, start, 
# 215 "include/linux/device/driver.h" 3 4
                                      ((void *)0)
# 215 "include/linux/device/driver.h"
                                          , device_match_any);
}
# 225 "include/linux/device/driver.h"
static inline struct device *
driver_find_device_by_acpi_dev(struct device_driver *drv,
          const struct acpi_device *adev)
{
 return driver_find_device(drv, 
# 229 "include/linux/device/driver.h" 3 4
                               ((void *)0)
# 229 "include/linux/device/driver.h"
                                   , adev, device_match_acpi_dev);
}
# 239 "include/linux/device/driver.h"
extern int driver_deferred_probe_timeout;
void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
void driver_init(void);
# 33 "include/linux/device.h" 2
# 1 "arch/arm64/include/asm/device.h" 1







struct dev_archdata {
};

struct pdev_archdata {
};
# 34 "include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct dev_pin_info;
struct dev_iommu;
# 62 "include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 87 "include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 153 "include/linux/device.h"
int device_create_file(struct device *device,
         const struct device_attribute *entry);
void device_remove_file(struct device *dev,
   const struct device_attribute *attr);
bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);
# 176 "include/linux/device.h"
void *devres_alloc_node(dr_release_t release, size_t size,
   gfp_t gfp, int nid) __attribute__((__malloc__));
static inline void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp)
{
 return devres_alloc_node(release, size, gfp, (-1));
}


void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
void devres_free(void *res);
void devres_add(struct device *dev, void *res);
void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id, gfp_t gfp);
void devres_close_group(struct device *dev, void *id);
void devres_remove_group(struct device *dev, void *id);
int devres_release_group(struct device *dev, void *id);


void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
void *devm_krealloc(struct device *dev, void *ptr, size_t size,
      gfp_t gfp) __attribute__((__warn_unused_result__));
__attribute__((__format__(printf, 3, 0))) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
         const char *fmt, va_list ap) __attribute__((__malloc__));
__attribute__((__format__(printf, 3, 4))) char *devm_kasprintf(struct device *dev, gfp_t gfp,
        const char *fmt, ...) __attribute__((__malloc__));
static inline void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (unlikely(__must_check_overflow( __builtin_choose_expr((((typeof(n))(-1)) < (typeof(n))1), ({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); typeof(n) __tmax = ((typeof(n))((((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))) - 1) + ((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))))); typeof(n) __tmin = ((typeof(n))((typeof(n))-((typeof(n))((((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1))) - 1) + ((typeof(n))1 << (8*sizeof(typeof(n)) - 1 - (((typeof(n))(-1)) < (typeof(n))1)))))-(typeof(n))1)); (void) (&__a == &__b); (void) (&__a == __d); *__d = (u64)__a * (u64)__b; (__b > 0 && (__a > __tmax/__b || __a < __tmin/__b)) || (__b < (typeof(__b))-1 && (__a > __tmin/__b || __a < __tmax/__b)) || (__b == (typeof(__b))-1 && __a == __tmin); }), ({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); *__d = __a * __b; __builtin_constant_p(__b) ? __b > 0 && __a > ((typeof(__a))((((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))) - 1) + ((typeof(__a))1 << (8*sizeof(typeof(__a)) - 1 - (((typeof(__a))(-1)) < (typeof(__a))1))))) / __b : __a > 0 && __b > ((typeof(__b))((((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))) - 1) + ((typeof(__b))1 << (8*sizeof(typeof(__b)) - 1 - (((typeof(__b))(-1)) < (typeof(__b))1))))) / __a; })))))
  return 
# 225 "include/linux/device.h" 3 4
        ((void *)0)
# 225 "include/linux/device.h"
            ;

 return devm_kmalloc(dev, bytes, flags);
}
static inline void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
void devm_kfree(struct device *dev, const void *p);
char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
const char *devm_kstrdup_const(struct device *dev, const char *s, gfp_t gfp);
void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp);

unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);
void *devm_ioremap_resource_wc(struct device *dev,
           const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 284 "include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned int min_align_mask;
 unsigned long segment_boundary_mask;
};
# 307 "include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 346 "include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};
# 360 "include/linux/device.h"
struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 struct list_head defer_sync;
 enum dl_dev_state status;
};
# 461 "include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct em_perf_domain *em_pd;



 struct irq_domain *msi_domain;


 struct dev_pin_info *pins;


 struct list_head msi_list;


 const struct dma_map_ops *dma_ops;

 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_limit;
 const struct bus_dma_region *dma_range_map;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;



 struct cma *cma_area;



 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;


 int numa_node;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct dev_iommu *iommu;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
 bool state_synced:1;
 bool can_match:1;



 bool dma_coherent:1;




};
# 576 "include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 struct device link_dev;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;
 struct work_struct rm_work;
 bool supplier_preactivated;
};

static inline struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { } while (0); ((struct device *)(__mptr - ((size_t)&((struct device *)0)->kobj))); });
}






static inline bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != 
# 602 "include/linux/device.h" 3 4
                            ((void *)0)
# 602 "include/linux/device.h"
                                );
}


# 1 "include/linux/pm_wakeup.h" 1
# 18 "include/linux/pm_wakeup.h"
struct wake_irq;
# 43 "include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};
# 77 "include/linux/pm_wakeup.h"
static inline bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}

static inline bool device_wakeup_path(struct device *dev)
{
 return dev->power.wakeup_path;
}

static inline void device_set_wakeup_path(struct device *dev)
{
 dev->power.wakeup_path = true;
}


extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int wakeup_sources_read_lock(void);
extern void wakeup_sources_read_unlock(int idx);
extern struct wakeup_source *wakeup_sources_walk_start(void);
extern struct wakeup_source *wakeup_sources_walk_next(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 205 "include/linux/pm_wakeup.h"
static inline void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 607 "include/linux/device.h" 2

static inline const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}
# 624 "include/linux/device.h"
static inline const char *dev_bus_name(const struct device *dev)
{
 return dev->bus ? dev->bus->name : (dev->class ? dev->class->name : "");
}

__attribute__((__format__(printf, 2, 3))) int dev_set_name(struct device *dev, const char *name, ...);


static inline int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
# 650 "include/linux/device.h"
static inline struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : 
# 678 "include/linux/device.h" 3 4
                                      ((void *)0)
# 678 "include/linux/device.h"
                                          ;
}

static inline unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return 
# 768 "include/linux/device.h" 3 4
        ((void *)0)
# 768 "include/linux/device.h"
            ;
 return dev->of_node;
}

static inline bool dev_has_sync_state(struct device *dev)
{
 if (!dev)
  return false;
 if (dev->driver && dev->driver->sync_state)
  return true;
 if (dev->bus && dev->bus->sync_state)
  return true;
 return false;
}




int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
void device_unregister(struct device *dev);
void device_initialize(struct device *dev);
int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
void device_del(struct device *dev);
int device_for_each_child(struct device *dev, void *data,
     int (*fn)(struct device *dev, void *data));
int device_for_each_child_reverse(struct device *dev, void *data,
      int (*fn)(struct device *dev, void *data));
struct device *device_find_child(struct device *dev, void *data,
     int (*match)(struct device *dev, void *data));
struct device *device_find_child_by_name(struct device *parent,
      const char *name);
int device_rename(struct device *dev, const char *new_name);
int device_move(struct device *dev, struct device *new_parent,
  enum dpm_order dpm_order);
int device_change_owner(struct device *dev, kuid_t kuid, kgid_t kgid);
const char *device_get_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
          kgid_t *gid, const char **tmp);
int device_is_dependent(struct device *dev, void *target);

static inline bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

void lock_device_hotplug(void);
void unlock_device_hotplug(void);
int lock_device_hotplug_sysfs(void);
int device_offline(struct device *dev);
int device_online(struct device *dev);
void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);

static inline int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




struct device *__root_device_register(const char *name, struct module *owner);





void root_device_unregister(struct device *root);

static inline void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
void device_release_driver(struct device *dev);
int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
void device_initial_probe(struct device *dev);
int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

bool device_is_bound(struct device *dev);




__attribute__((__format__(printf, 5, 6))) struct device *
device_create(struct class *cls, struct device *parent, dev_t devt,
       void *drvdata, const char *fmt, ...);
__attribute__((__format__(printf, 6, 7))) struct device *
device_create_with_groups(struct class *cls, struct device *parent, dev_t devt,
     void *drvdata, const struct attribute_group **groups,
     const char *fmt, ...);
void device_destroy(struct class *cls, dev_t devt);

int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
       const struct attribute_group **groups);
void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, 
# 877 "include/linux/device.h" 3 4
                                                ((void *)0) 
# 877 "include/linux/device.h"
                                                     };

 return device_add_groups(dev, groups);
}

static inline void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, 
# 885 "include/linux/device.h" 3 4
                                                ((void *)0) 
# 885 "include/linux/device.h"
                                                     };

 return device_remove_groups(dev, groups);
}

int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
           const struct attribute_group *grp);
void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






struct device *get_device(struct device *dev);
void put_device(struct device *dev);
bool kill_device(struct device *dev);


int devtmpfs_mount(void);





void device_shutdown(void);


const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);
void device_links_supplier_sync_state_pause(void);
void device_links_supplier_sync_state_resume(void);

extern __attribute__((__format__(printf, 3, 4)))
int dev_err_probe(const struct device *dev, int err, const char *fmt, ...);
# 11 "include/evl/factory.h" 2
# 1 "include/linux/cdev.h" 1
# 10 "include/linux/cdev.h"
struct file_operations;
struct inode;
struct module;

struct cdev {
 struct kobject kobj;
 struct module *owner;
 const struct file_operations *ops;
 struct list_head list;
 dev_t dev;
 unsigned int count;
} __attribute__((__designated_init__));

void cdev_init(struct cdev *, const struct file_operations *);

struct cdev *cdev_alloc(void);

void cdev_put(struct cdev *p);

int cdev_add(struct cdev *, dev_t, unsigned);

void cdev_set_parent(struct cdev *p, struct kobject *kobj);
int cdev_device_add(struct cdev *cdev, struct device *dev);
void cdev_device_del(struct cdev *cdev, struct device *dev);

void cdev_del(struct cdev *);

void cd_forget(struct inode *);
# 12 "include/evl/factory.h" 2
# 21 "include/evl/factory.h"
# 1 "include/linux/hashtable.h" 1
# 34 "include/linux/hashtable.h"
static inline void __hash_init(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  ((&ht[i])->first = 
# 39 "include/linux/hashtable.h" 3 4
 ((void *)0)
# 39 "include/linux/hashtable.h"
 );
}
# 76 "include/linux/hashtable.h"
static inline bool hash_hashed(struct hlist_node *node)
{
 return !hlist_unhashed(node);
}

static inline bool __hash_empty(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  if (!hlist_empty(&ht[i]))
   return false;

 return true;
}
# 105 "include/linux/hashtable.h"
static inline void hash_del(struct hlist_node *node)
{
 hlist_del_init(node);
}





static inline void hash_del_rcu(struct hlist_node *node)
{
 hlist_del_init_rcu(node);
}
# 22 "include/evl/factory.h" 2
# 1 "include/evl/file.h" 1
# 12 "include/evl/file.h"
# 1 "include/evl/crossing.h" 1
# 30 "include/evl/crossing.h"
struct evl_crossing {
 atomic_t oob_refs;
 struct completion oob_done;
 struct irq_work oob_work;
};

static inline void evl_open_crossing(struct irq_work *work)
{
 struct evl_crossing *c = ({ void *__mptr = (void *)(work); do { } while (0); ((struct evl_crossing *)(__mptr - ((size_t)&((struct evl_crossing *)0)->oob_work))); });
 complete(&c->oob_done);
}

static inline void evl_init_crossing(struct evl_crossing *c)
{
 atomic_set(&c->oob_refs, 1);
 init_completion(&c->oob_done);
 init_irq_work(&c->oob_work, evl_open_crossing);
}

static inline void evl_reinit_crossing(struct evl_crossing *c)
{
 atomic_set(&c->oob_refs, 1);
 reinit_completion(&c->oob_done);
}

static inline void evl_down_crossing(struct evl_crossing *c)
{
 atomic_inc(&c->oob_refs);
}

static inline void evl_up_crossing(struct evl_crossing *c)
{


 if (atomic_dec_return(&c->oob_refs) == 0)
  irq_work_queue(&c->oob_work);
}

static inline void evl_pass_crossing(struct evl_crossing *c)
{
 if (atomic_dec_return(&c->oob_refs) > 0)
  wait_for_completion(&c->oob_done);
}
# 13 "include/evl/file.h" 2

struct file;
struct files_struct;
struct evl_element;
struct evl_poll_node;

struct evl_file {
 struct file *filp;
 struct evl_crossing crossing;
};

struct evl_fd {
 unsigned int fd;
 struct evl_file *efilp;
 struct files_struct *files;
 struct rb_node rb;
 struct list_head poll_nodes;
};

struct evl_file_binding {
 struct evl_file efile;
 struct evl_element *element;
};

int evl_open_file(struct evl_file *efilp,
  struct file *filp);

void evl_release_file(struct evl_file *efilp);

static inline
void evl_get_fileref(struct evl_file *efilp)
{
 evl_down_crossing(&efilp->crossing);
}

struct evl_file *evl_get_file(unsigned int fd);

static inline
void evl_put_file(struct evl_file *efilp)
{
 evl_up_crossing(&efilp->crossing);
}

struct evl_file *evl_watch_fd(unsigned int fd,
   struct evl_poll_node *node);

void evl_ignore_fd(struct evl_poll_node *node);

int evl_init_files(void);

void evl_cleanup_files(void);
# 23 "include/evl/factory.h" 2
# 1 "include/uapi/evl/types.h" 1
# 13 "include/uapi/evl/types.h"
typedef __u32 fundle_t;
# 26 "include/uapi/evl/types.h"
static inline fundle_t evl_get_index(fundle_t handle)
{
 return handle & ~(((fundle_t)0x80000000)|((fundle_t)0x40000000));
}





typedef long long __evl_time64_t;

struct __evl_timespec {
 __evl_time64_t tv_sec;
 long long tv_nsec;
};

struct __evl_itimerspec {
 struct __evl_timespec it_interval;
 struct __evl_timespec it_value;
};

union evl_value {
 __s32 val;
 __s64 lval;
 void *ptr;
};
# 24 "include/evl/factory.h" 2
# 1 "include/uapi/evl/factory.h" 1
# 14 "include/uapi/evl/factory.h"
struct evl_element_ids {
 __u32 minor;
 __u32 fundle;
 __u32 state_offset;
};
# 31 "include/uapi/evl/factory.h"
struct evl_clone_req {
 __u64 name_ptr;
 __u64 attrs_ptr;
 __u32 clone_flags;

 struct evl_element_ids eids;
 __u32 efd;
};
# 25 "include/evl/factory.h" 2
# 34 "include/evl/factory.h"
struct evl_element;






struct evl_index {
 struct rb_root root;
 hard_spinlock_t lock;
 fundle_t generator;
};

struct evl_factory {
 const char *name;
 const struct file_operations *fops;
 unsigned int nrdev;
 struct evl_element *(*build)(struct evl_factory *fac,
    const char *u_name,
    void *u_attrs,
    int clone_flags,
    u32 *state_offp);
 void (*dispose)(struct evl_element *e);
 const struct attribute_group **attrs;
 int flags;
 struct {
  struct device_type type;
  struct class *class;
  struct cdev cdev;
  struct device *dev;
  dev_t sub_rdev;
  kuid_t kuid;
  kgid_t kgid;
  unsigned long *minor_map;
  struct evl_index index;
  struct hlist_head name_hash[1 << (8)];
  struct mutex hash_lock;
 };
};

struct evl_element {
 struct callback_head rcu;
 struct evl_factory *factory;
 struct cdev cdev;
 struct device *dev;
 struct filename *devname;
 unsigned int minor;
 int refs;
 bool zombie;
 hard_spinlock_t ref_lock;
 fundle_t fundle;
 int clone_flags;
 struct rb_node index_node;
 struct irq_work irq_work;
 struct work_struct work;
 struct hlist_node hash;
 struct {
  struct file *filp;
  int efd;
 } fpriv;
};

static inline const char *
evl_element_name(struct evl_element *e)
{
 if (e->devname)
  return e->devname->name;

 return 
# 102 "include/evl/factory.h" 3 4
       ((void *)0)
# 102 "include/evl/factory.h"
           ;
}

int evl_init_element(struct evl_element *e,
  struct evl_factory *fac,
  int clone_flags);

int evl_init_user_element(struct evl_element *e,
   struct evl_factory *fac,
   const char *u_name,
   int clone_flags);

void evl_destroy_element(struct evl_element *e);

void evl_get_element(struct evl_element *e);

struct evl_element *
__evl_get_element_by_fundle(struct evl_index *map,
   fundle_t fundle);
# 146 "include/evl/factory.h"
static inline bool evl_element_is_public(struct evl_element *e)
{
 return !!(e->clone_flags & (1 << 16));
}

static inline bool evl_element_has_coredev(struct evl_element *e)
{
 return !!(e->clone_flags & (1 << 31));
}

static inline bool evl_element_is_observable(struct evl_element *e)
{
 return !!(e->clone_flags & (1 << 17));
}

void evl_put_element(struct evl_element *e);

int evl_open_element(struct inode *inode,
  struct file *filp);

int evl_release_element(struct inode *inode,
   struct file *filp);

int evl_create_core_element_device(struct evl_element *e,
    struct evl_factory *fac,
    const char *name);

void evl_remove_element_device(struct evl_element *e);

void evl_index_element(struct evl_index *map,
  struct evl_element *e);

static inline void evl_index_factory_element(struct evl_element *e)
{
 evl_index_element(&e->factory->index, e);
}

void evl_unindex_element(struct evl_index *map,
   struct evl_element *e);

static inline void evl_unindex_factory_element(struct evl_element *e)
{
 evl_unindex_element(&e->factory->index, e);
}

int evl_create_factory(struct evl_factory *fac, dev_t rdev);

void evl_delete_factory(struct evl_factory *fac);

bool evl_may_access_factory(struct evl_factory *fac);

int evl_early_init_factories(void);

void evl_early_cleanup_factories(void);

int evl_late_init_factories(void);

void evl_late_cleanup_factories(void);

extern struct evl_factory evl_clock_factory;
extern struct evl_factory evl_control_factory;
extern struct evl_factory evl_monitor_factory;
extern struct evl_factory evl_poll_factory;
extern struct evl_factory evl_thread_factory;
extern struct evl_factory evl_trace_factory;
extern struct evl_factory evl_xbuf_factory;
extern struct evl_factory evl_proxy_factory;
extern struct evl_factory evl_observable_factory;
# 17 "include/evl/clock.h" 2
# 1 "include/uapi/evl/clock.h" 1
# 27 "include/uapi/evl/clock.h"
struct evl_timerfd_setreq {
 __u64 value_ptr;
 __u64 ovalue_ptr;
};
# 18 "include/evl/clock.h" 2



struct evl_rq;
struct evl_timerbase;
struct clock_event_device;
struct __kernel_timex;

struct evl_clock_gravity {
 ktime_t irq;
 ktime_t kernel;
 ktime_t user;
};

struct evl_clock {
 ktime_t resolution;
 struct evl_clock_gravity gravity;
 const char *name;
 int flags;
 struct {
  ktime_t (*read)(struct evl_clock *clock);
  u64 (*read_cycles)(struct evl_clock *clock);
  int (*set)(struct evl_clock *clock, ktime_t date);
  void (*program_local_shot)(struct evl_clock *clock);
  void (*program_remote_shot)(struct evl_clock *clock,
     struct evl_rq *rq);
  int (*set_gravity)(struct evl_clock *clock,
    const struct evl_clock_gravity *p);
  void (*reset_gravity)(struct evl_clock *clock);
  void (*adjust)(struct evl_clock *clock);
 } ops;
 struct evl_timerbase *timerdata;
 struct evl_clock *master;
 ktime_t offset;

 struct cpumask affinity;

 struct list_head next;
 struct evl_element element;
 void (*dispose)(struct evl_clock *clock);
} __attribute__((__aligned__((1 << (6)))));

extern struct evl_clock evl_mono_clock;

extern struct evl_clock evl_realtime_clock;

int evl_init_clock(struct evl_clock *clock,
  const struct cpumask *affinity);

int evl_init_slave_clock(struct evl_clock *clock,
   struct evl_clock *master);

void evl_core_tick(struct clock_event_device *dummy);

void evl_announce_tick(struct evl_clock *clock);

void evl_adjust_timers(struct evl_clock *clock,
  ktime_t delta);

void evl_stop_timers(struct evl_clock *clock);

static inline u64 evl_read_clock_cycles(struct evl_clock *clock)
{
 return clock->ops.read_cycles(clock);
}

static ktime_t evl_ktime_monotonic(void)
{
 return ktime_get_mono_fast_ns();
}

static inline ktime_t evl_read_clock(struct evl_clock *clock)
{






 if (clock == &evl_mono_clock)
  return evl_ktime_monotonic();

 return clock->ops.read(clock);
}

static inline int
evl_set_clock_time(struct evl_clock *clock, ktime_t date)
{
 if (clock->ops.set)
  return clock->ops.set(clock, date);

 return -
# 109 "include/evl/clock.h" 3 4
        95
# 109 "include/evl/clock.h"
                  ;
}

static inline
ktime_t evl_get_clock_resolution(struct evl_clock *clock)
{
 return clock->resolution;
}

static inline
void evl_set_clock_resolution(struct evl_clock *clock,
   ktime_t resolution)
{
 clock->resolution = resolution;
}

static inline
int evl_set_clock_gravity(struct evl_clock *clock,
   const struct evl_clock_gravity *gravity)
{
 if (clock->ops.set_gravity)
  return clock->ops.set_gravity(clock, gravity);

 return -
# 132 "include/evl/clock.h" 3 4
        95
# 132 "include/evl/clock.h"
                  ;
}

static inline void evl_reset_clock_gravity(struct evl_clock *clock)
{
 if (clock->ops.reset_gravity)
  clock->ops.reset_gravity(clock);
}



int evl_clock_init(void);

void evl_clock_cleanup(void);

int evl_register_clock(struct evl_clock *clock,
  const struct cpumask *affinity);

void evl_unregister_clock(struct evl_clock *clock);

struct evl_clock *evl_get_clock_by_fd(int efd);

static inline void evl_put_clock(struct evl_clock *clock)
{
 evl_put_element(&clock->element);
}

static inline ktime_t
u_timespec_to_ktime(const struct __evl_timespec u_ts)
{
 struct timespec64 ts64 = (struct timespec64){
  .tv_sec = u_ts.tv_sec,
  .tv_nsec = u_ts.tv_nsec,
 };

 return timespec64_to_ktime(ts64);
}

static inline struct __evl_timespec
ktime_to_u_timespec(ktime_t t)
{
 struct timespec64 ts64 = ns_to_timespec64((t));

 return (struct __evl_timespec){
  .tv_sec = ts64.tv_sec,
  .tv_nsec = ts64.tv_nsec,
 };
}

static inline struct timespec64
u_timespec_to_timespec64(const struct __evl_timespec u_ts)
{
 return (struct timespec64){
  .tv_sec = u_ts.tv_sec,
  .tv_nsec = u_ts.tv_nsec,
 };
}

static inline struct __evl_timespec
timespec64_to_u_timespec(const struct timespec64 ts64)
{
 return (struct __evl_timespec){
  .tv_sec = ts64.tv_sec,
  .tv_nsec = ts64.tv_nsec,
 };
}

static inline struct itimerspec64
u_itimerspec_to_itimerspec64(const struct __evl_itimerspec u_its)
{
 return (struct itimerspec64){
  .it_value = u_timespec_to_timespec64(u_its.it_value),
  .it_interval = u_timespec_to_timespec64(u_its.it_interval),
 };
}

static inline struct __evl_itimerspec
itimerspec64_to_u_itimerspec(const struct itimerspec64 its64)
{
 return (struct __evl_itimerspec){
  .it_value = timespec64_to_u_timespec(its64.it_value),
  .it_interval = timespec64_to_u_timespec(its64.it_interval),
 };
}
# 14 "include/evl/stat.h" 2

struct evl_rq;



struct evl_account {
 ktime_t start;
 ktime_t total;
};







static inline ktime_t evl_get_timestamp(void)
{
 return evl_read_clock(&evl_mono_clock);
}

static inline ktime_t evl_get_account_total(struct evl_account *account)
{
 return account->total;
}





static inline void evl_reset_account(struct evl_account *account)
{
 account->total = 0;
 account->start = evl_get_timestamp();
}
# 89 "include/evl/stat.h"
struct evl_counter {
 unsigned long counter;
};

static inline unsigned long evl_inc_counter(struct evl_counter *c)
{
 return c->counter++;
}

static inline unsigned long evl_get_counter(struct evl_counter *c)
{
 return c->counter;
}

static inline
void evl_set_counter(struct evl_counter *c, unsigned long value)
{
 c->counter = value;
}
# 20 "include/evl/thread.h" 2

# 1 "include/evl/timer.h" 1
# 18 "include/evl/timer.h"
# 1 "include/evl/assert.h" 1
# 19 "include/evl/timer.h" 2
# 1 "include/evl/timeout.h" 1
# 24 "include/evl/timeout.h"
static inline bool timeout_infinite(ktime_t kt)
{
 return kt == 0;
}

static inline bool timeout_nonblock(ktime_t kt)
{
 return kt < 0;
}

static inline bool timeout_valid(ktime_t kt)
{
 return kt > 0;
}


enum evl_tmode {
 EVL_REL,
 EVL_ABS,
};






extern struct evl_clock evl_mono_clock,
 evl_realtime_clock;
# 20 "include/evl/timer.h" 2
# 88 "include/evl/timer.h"
struct evl_tnode {
 ktime_t date;
 struct list_head next;
};

struct evl_tqueue {
 struct list_head q;
};

static inline void evl_init_tqueue(struct evl_tqueue *tq)
{
 INIT_LIST_HEAD(&tq->q);
}



static inline bool evl_tqueue_is_empty(struct evl_tqueue *tq)
{
 return list_empty(&tq->q);
}

static inline
struct evl_tnode *evl_get_tqueue_head(struct evl_tqueue *tq)
{
 if (list_empty(&tq->q))
  return 
# 113 "include/evl/timer.h" 3 4
        ((void *)0)
# 113 "include/evl/timer.h"
            ;

 return ({ void *__mptr = (void *)((&tq->q)->next); do { } while (0); ((struct evl_tnode *)(__mptr - ((size_t)&((struct evl_tnode *)0)->next))); });
}

static inline
struct evl_tnode *evl_get_tqueue_next(struct evl_tqueue *tq,
    struct evl_tnode *node)
{
 if (list_is_last(&node->next, &tq->q))
  return 
# 123 "include/evl/timer.h" 3 4
        ((void *)0)
# 123 "include/evl/timer.h"
            ;

 return ({ void *__mptr = (void *)(node->next.next); do { } while (0); ((struct evl_tnode *)(__mptr - ((size_t)&((struct evl_tnode *)0)->next))); });
}

static inline
void evl_insert_tnode(struct evl_tqueue *tq,
  struct evl_tnode *node)
{
 struct evl_tnode *n;

 if (list_empty(&tq->q)) {
  list_add(&node->next, &tq->q);
 } else {
  for (n = ({ void *__mptr = (void *)((&tq->q)->prev); do { } while (0); ((typeof(*n) *)(__mptr - ((size_t)&((typeof(*n) *)0)->next))); }); !(&n->next == (&tq->q)); n = ({ void *__mptr = (void *)((n)->next.prev); do { } while (0); ((typeof(*(n)) *)(__mptr - ((size_t)&((typeof(*(n)) *)0)->next))); })) {
   if (n->date <= node->date)
    break;
  }
  list_add(&node->next, &n->next);
 }
}

static inline
void evl_remove_tnode(struct evl_tqueue *tq, struct evl_tnode *node)
{
 list_del(&node->next);
}






struct evl_rq;

struct evl_timerbase {
 hard_spinlock_t lock;
 struct evl_tqueue q;
};

static inline struct evl_timerbase *
evl_percpu_timers(struct evl_clock *clock, int cpu)
{
 return ({ do { const void *__vpp_verify = (typeof((clock->timerdata) + 0))
# 166 "include/evl/timer.h" 3 4
       ((void *)0)
# 166 "include/evl/timer.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((clock->timerdata))) *)((clock->timerdata)), ((__per_cpu_offset[(cpu)]))); });
}

static inline struct evl_timerbase *
evl_this_cpu_timers(struct evl_clock *clock)
{
 return ({ do { const void *__vpp_verify = (typeof((clock->timerdata) + 0))
# 172 "include/evl/timer.h" 3 4
       ((void *)0)
# 172 "include/evl/timer.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(clock->timerdata)) *)(clock->timerdata), (__kern_my_cpu_offset())); });
}

struct evl_timer {
 struct evl_clock *clock;
 struct evl_tnode node;
 struct list_head adjlink;
 int status;
 ktime_t interval;
 ktime_t start_date;
 u64 pexpect_ticks;
 u64 periodic_ticks;

 struct evl_rq *rq;

 struct evl_timerbase *base;
 void (*handler)(struct evl_timer *timer);
 const char *name;

 struct evl_counter scheduled;
 struct evl_counter fired;

};



void evl_start_timer(struct evl_timer *timer,
  ktime_t value,
  ktime_t interval);

void __evl_stop_timer(struct evl_timer *timer);

static inline int evl_timer_is_running(struct evl_timer *timer)
{
 return (timer->status & 0x00000020) != 0;
}

static inline int evl_timer_is_periodic(struct evl_timer *timer)
{
 return (timer->status & 0x00000004) != 0;
}

static inline void evl_stop_timer(struct evl_timer *timer)
{
 if (evl_timer_is_running(timer))
  __evl_stop_timer(timer);
}

void evl_destroy_timer(struct evl_timer *timer);

static inline ktime_t evl_abs_timeout(struct evl_timer *timer,
    ktime_t delta)
{
 return ((evl_read_clock(timer->clock)) + (delta));
}


static inline struct evl_rq *evl_get_timer_rq(struct evl_timer *timer)
{
 return timer->rq;
}
# 241 "include/evl/timer.h"
static inline unsigned long evl_get_timer_gravity(struct evl_timer *timer)
{
 struct evl_clock *clock = timer->clock;

 if (timer->status & 0x00000040)
  return clock->gravity.kernel;

 if (timer->status & 0x00000080)
  return clock->gravity.user;

 return clock->gravity.irq;
}


static inline void evl_update_timer_date(struct evl_timer *timer)
{
 ((timer)->node.date) = ((timer->start_date) + ((timer->periodic_ticks * ktime_to_ns(timer->interval)) - evl_get_timer_gravity(timer)))

                                  ;
}

static inline
ktime_t evl_get_timer_next_date(struct evl_timer *timer)
{
 return ((timer->start_date) + (timer->pexpect_ticks * ktime_to_ns(timer->interval)))
                                                       ;
}

void __evl_init_timer(struct evl_timer *timer,
  struct evl_clock *clock,
  void (*handler)(struct evl_timer *timer),
  struct evl_rq *rq,
  const char *name,
  int flags);

void evl_set_timer_gravity(struct evl_timer *timer,
   int gravity);
# 296 "include/evl/timer.h"
static inline
void evl_reset_timer_stats(struct evl_timer *timer)
{
 evl_set_counter(&timer->scheduled, 0);
 evl_set_counter(&timer->fired, 0);
}

static inline
void evl_account_timer_scheduled(struct evl_timer *timer)
{
 evl_inc_counter(&timer->scheduled);
}

static inline
void evl_account_timer_fired(struct evl_timer *timer)
{
 evl_inc_counter(&timer->fired);
}
# 328 "include/evl/timer.h"
static inline
void evl_set_timer_name(struct evl_timer *timer, const char *name)
{
 timer->name = name;
}

static inline
const char *evl_get_timer_name(struct evl_timer *timer)
{
 return timer->name;
}

bool evl_timer_deactivate(struct evl_timer *timer);


static inline ktime_t evl_get_timer_expiry(struct evl_timer *timer)
{

 return ((((timer)->node.date)) + (evl_get_timer_gravity(timer)))
                                ;
}

ktime_t evl_get_timer_date(struct evl_timer *timer);

ktime_t __evl_get_timer_delta(struct evl_timer *timer);

static inline ktime_t evl_get_timer_delta(struct evl_timer *timer)
{
 if (!evl_timer_is_running(timer))
  return 0;

 return __evl_get_timer_delta(timer);
}

static inline
ktime_t __evl_get_stopped_timer_delta(struct evl_timer *timer)
{
 return __evl_get_timer_delta(timer);
}

static inline
ktime_t evl_get_stopped_timer_delta(struct evl_timer *timer)
{
 ktime_t t = __evl_get_stopped_timer_delta(timer);

 if (ktime_to_ns(t) <= 1)
  return 0;

 return t;
}

static 
# 379 "include/evl/timer.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 380 "include/evl/timer.h"
void evl_dequeue_timer(struct evl_timer *timer,
  struct evl_tqueue *tq)
{
 evl_remove_tnode(tq, &timer->node);
 timer->status |= 0x00000001;
}

void evl_insert_tnode(struct evl_tqueue *tq, struct evl_tnode *node);


static 
# 390 "include/evl/timer.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 391 "include/evl/timer.h"
void evl_enqueue_timer(struct evl_timer *timer,
  struct evl_tqueue *tq)
{
 evl_insert_tnode(tq, &timer->node);
 timer->status &= ~0x00000001;
 evl_account_timer_scheduled(timer);
}

unsigned long evl_get_timer_overruns(struct evl_timer *timer);

void evl_move_timer(struct evl_timer *timer,
  struct evl_clock *clock,
  struct evl_rq *rq);



static inline void evl_prepare_timed_wait(struct evl_timer *timer,
     struct evl_clock *clock,
     struct evl_rq *rq)
{

 if (rq != timer->rq || clock != timer->clock)
  evl_move_timer(timer, clock, rq);
}

static inline bool evl_timer_on_rq(struct evl_timer *timer,
    struct evl_rq *rq)
{
 return timer->rq == rq;
}
# 22 "include/evl/thread.h" 2
# 1 "include/evl/sched/param.h" 1
# 11 "include/evl/sched/param.h"
struct evl_idle_param {
 int prio;
};

struct evl_weak_param {
 int prio;
};

struct evl_fifo_param {
 int prio;
};

struct evl_quota_param {
 int prio;
 int tgid;
};

struct evl_tp_param {
 int prio;
 int ptid;
};

union evl_sched_param {
 struct evl_idle_param idle;
 struct evl_fifo_param fifo;
 struct evl_weak_param weak;






};
# 23 "include/evl/thread.h" 2

# 1 "include/uapi/evl/thread.h" 1
# 12 "include/uapi/evl/thread.h"
# 1 "include/uapi/evl/sched.h" 1
# 21 "include/uapi/evl/sched.h"
struct __evl_rr_param {
 struct __evl_timespec __sched_rr_quantum;
};




struct __evl_quota_param {
 int __sched_group;
};

enum evl_quota_ctlop {
 evl_quota_add,
 evl_quota_remove,
 evl_quota_force_remove,
 evl_quota_set,
 evl_quota_get,
};

struct evl_quota_ctlparam {
 enum evl_quota_ctlop op;
 union {
  struct {
   int tgid;
  } remove;
  struct {
   int tgid;
   int quota;
   int quota_peak;
  } set;
  struct {
   int tgid;
  } get;
 } u;
};

struct evl_quota_ctlinfo {
 int tgid;
 int quota;
 int quota_peak;
 int quota_sum;
};




struct __evl_tp_param {
 int __sched_partition;
};



struct __evl_tp_window {
 struct __evl_timespec offset;
 struct __evl_timespec duration;
 int ptid;
};

enum evl_tp_ctlop {
 evl_tp_install,
 evl_tp_uninstall,
 evl_tp_start,
 evl_tp_stop,
 evl_tp_get,
};

struct evl_tp_ctlparam {
 enum evl_tp_ctlop op;
 int nr_windows;
 struct __evl_tp_window windows[0];
};





struct evl_tp_ctlinfo {
 int nr_windows;
 struct __evl_tp_window windows[0];
};





struct evl_sched_attrs {
 int sched_policy;
 int sched_priority;
 union {
  struct __evl_rr_param rr;
  struct __evl_quota_param quota;
  struct __evl_tp_param tp;
 } sched_u;
};

union evl_sched_ctlparam {
 struct evl_quota_ctlparam quota;
 struct evl_tp_ctlparam tp;
};

union evl_sched_ctlinfo {
 struct evl_quota_ctlinfo quota;
 struct evl_tp_ctlinfo tp;
};

struct evl_sched_ctlreq {
 int policy;
 int cpu;
 __u64 param_ptr;
 __u64 info_ptr;
};
# 13 "include/uapi/evl/thread.h" 2
# 98 "include/uapi/evl/thread.h"
struct evl_user_window {
 __u32 state;
 __u32 info;
 __u32 pp_pending;
};

struct evl_thread_state {
 struct evl_sched_attrs eattrs;
 __u32 cpu;
 __u32 state;
 __u32 isw;
 __u32 csw;
 __u32 sc;
 __u32 rwa;
 __u64 xtime;
};
# 25 "include/evl/thread.h" 2
# 1 "include/uapi/evl/signal.h" 1
# 26 "include/evl/thread.h" 2

# 1 "arch/arm64/include/asm/evl/thread.h" 1




static inline bool evl_is_breakpoint(int trapnr)
{
 return trapnr == 3 || trapnr == 4;
}
# 28 "include/evl/thread.h" 2
# 43 "include/evl/thread.h"
struct evl_thread;
struct evl_rq;
struct evl_sched_class;
struct evl_poll_watchpoint;
struct evl_wait_channel;
struct evl_observable;
struct file;

struct evl_init_thread_attr {
 const struct cpumask *affinity;
 struct evl_observable *observable;
 int flags;
 struct evl_sched_class *sched_class;
 union evl_sched_param sched_param;
};

struct evl_thread {
 hard_spinlock_t lock;




 struct evl_rq *rq;
 struct evl_sched_class *base_class;
 struct evl_sched_class *sched_class;

 int bprio;
 int cprio;
 int wprio;
# 86 "include/evl/thread.h"
 struct list_head boosters;
 struct evl_wait_channel *wchan;
 struct list_head wait_next;
 struct evl_wait_channel *wwake;

 struct evl_timer rtimer;
 struct evl_timer ptimer;
 ktime_t rrperiod;
# 106 "include/evl/thread.h"
 __u32 state;
 __u32 info;
# 117 "include/evl/thread.h"
 struct list_head rq_next;
 struct list_head next;





 struct dovetail_altsched_context altsched;
 __u32 local_info;
 void *wait_data;
 struct {
  struct evl_poll_watchpoint *table;
  unsigned int generation;
  int nr;
  int active;
 } poll_context;
 atomic_t inband_disable_count;
 struct irq_work inband_work;
 struct {
  struct evl_counter isw;
  struct evl_counter csw;
  struct evl_counter sc;
  struct evl_counter rwa;
  struct evl_account account;
  struct evl_account lastperiod;
 } stat;
 struct evl_user_window *u_window;



 struct list_head trackers;
 hard_spinlock_t tracking_lock;
 struct evl_element element;
 struct cpumask affinity;
 struct completion exited;
 kernel_cap_t raised_cap;
 struct list_head kill_next;
 struct oob_mm_state *oob_mm;
 struct list_head ptsync_next;
 struct evl_observable *observable;
 char *name;
};







static inline void evl_sync_uwindow(struct evl_thread *curr)
{
 if (curr->u_window) {
  curr->u_window->state = curr->state;
  curr->u_window->info = curr->info;
 }
}

static inline
void evl_clear_sync_uwindow(struct evl_thread *curr, int state_bits)
{
 if (curr->u_window) {
  curr->u_window->state = curr->state & ~state_bits;
  curr->u_window->info = curr->info;
 }
}

static inline
void evl_set_sync_uwindow(struct evl_thread *curr, int state_bits)
{
 if (curr->u_window) {
  curr->u_window->state = curr->state | state_bits;
  curr->u_window->info = curr->info;
 }
}

void __evl_test_cancel(struct evl_thread *curr);

void evl_discard_thread(struct evl_thread *thread);





static inline struct evl_thread *evl_current(void)
{
 return dovetail_current_state()->thread;
}

static inline
struct evl_rq *evl_thread_rq(struct evl_thread *thread)
{
 return thread->rq;
}

static inline struct evl_rq *evl_current_rq(void)
{
 return evl_thread_rq(evl_current());
}

static inline
struct evl_thread *evl_thread_from_task(struct task_struct *p)
{
 return dovetail_task_state(p)->thread;
}

static inline void evl_test_cancel(void)
{
 struct evl_thread *curr = evl_current();

 if (curr && (curr->info & 0x00000040))
  __evl_test_cancel(curr);
}

static inline struct evl_subscriber *evl_get_subscriber(void)
{
 return dovetail_current_state()->subscriber;
}

static inline void evl_set_subscriber(struct evl_subscriber *sbr)
{
 dovetail_current_state()->subscriber = sbr;
}

ktime_t evl_get_thread_timeout(struct evl_thread *thread);

ktime_t evl_get_thread_period(struct evl_thread *thread);

int evl_init_thread(struct evl_thread *thread,
  const struct evl_init_thread_attr *attr,
  struct evl_rq *rq,
  const char *fmt, ...);

void evl_sleep_on_locked(ktime_t timeout, enum evl_tmode timeout_mode,
  struct evl_clock *clock,
  struct evl_wait_channel *wchan);

void evl_sleep_on(ktime_t timeout, enum evl_tmode timeout_mode,
  struct evl_clock *clock,
  struct evl_wait_channel *wchan);

void evl_wakeup_thread(struct evl_thread *thread,
  int mask, int info);

void evl_hold_thread(struct evl_thread *thread,
  int mask);

void evl_release_thread(struct evl_thread *thread,
   int mask, int info);

void evl_unblock_thread(struct evl_thread *thread,
   int reason);

ktime_t evl_delay(ktime_t timeout,
  enum evl_tmode timeout_mode,
  struct evl_clock *clock);

int evl_sleep_until(ktime_t timeout);

int evl_sleep(ktime_t delay);

int evl_set_period(struct evl_clock *clock,
  ktime_t idate,
  ktime_t period);

int evl_wait_period(unsigned long *overruns_r);

void evl_cancel_thread(struct evl_thread *thread);

int evl_join_thread(struct evl_thread *thread,
      bool uninterruptible);

void evl_notify_thread(struct evl_thread *thread,
         int tag, union evl_value details);

void evl_get_thread_state(struct evl_thread *thread,
   struct evl_thread_state *statebuf);

int evl_detach_self(void);

void evl_kick_thread(struct evl_thread *thread,
  int info);

void evl_demote_thread(struct evl_thread *thread);

void evl_signal_thread(struct evl_thread *thread,
  int sig, int arg);

int evl_set_thread_schedparam_locked(struct evl_thread *thread,
    struct evl_sched_class *sched_class,
    const union evl_sched_param *sched_param);

int evl_set_thread_schedparam(struct evl_thread *thread,
   struct evl_sched_class *sched_class,
   const union evl_sched_param *sched_param);

int evl_killall(int mask);

bool evl_is_thread_file(struct file *filp);

void __evl_propagate_schedparam_change(struct evl_thread *curr);

static inline void evl_propagate_schedparam_change(struct evl_thread *curr)
{
 if (curr->info & 0x00000100)
  __evl_propagate_schedparam_change(curr);
}

pid_t evl_get_inband_pid(struct evl_thread *thread);

int activate_oob_mm_state(struct oob_mm_state *p);

struct evl_kthread {
 struct evl_thread thread;
 struct completion done;
 void (*threadfn)(void *arg);
 int status;
 void *arg;
 struct irq_work irq_work;
};

int __evl_run_kthread(struct evl_kthread *kthread, int clone_flags);
# 371 "include/evl/thread.h"
void evl_set_kthread_priority(struct evl_kthread *kthread,
   int priority);

static inline void evl_stop_kthread(struct evl_kthread *kthread)
{
 evl_cancel_thread(&kthread->thread);
 evl_join_thread(&kthread->thread, true);
}

static inline bool evl_kthread_should_stop(void)
{
 return !!(evl_current()->info & 0x00000040);
}

static inline
void evl_unblock_kthread(struct evl_kthread *kthread,
   int reason)
{
 evl_unblock_thread(&kthread->thread, reason);
}

static inline
int evl_join_kthread(struct evl_kthread *kthread,
  bool uninterruptible)
{
 return evl_join_thread(&kthread->thread, uninterruptible);
}

static inline struct evl_kthread *
evl_current_kthread(void)
{
 struct evl_thread *t = evl_current();

 return !t || t->state & 0x00004000 ? 
# 404 "include/evl/thread.h" 3 4
                                 ((void *)0) 
# 404 "include/evl/thread.h"
                                      :
  ({ void *__mptr = (void *)(t); do { } while (0); ((struct evl_kthread *)(__mptr - ((size_t)&((struct evl_kthread *)0)->thread))); });
}
# 15 "include/evl/sched.h" 2
# 1 "include/evl/sched/queue.h" 1
# 128 "include/evl/sched/queue.h"
struct evl_sched_queue {
 struct list_head head;
};

static 
# 132 "include/evl/sched/queue.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 133 "include/evl/sched/queue.h"
void evl_init_schedq(struct evl_sched_queue *q)
{
 INIT_LIST_HEAD(&q->head);
}

static 
# 138 "include/evl/sched/queue.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 139 "include/evl/sched/queue.h"
struct evl_thread *evl_get_schedq(struct evl_sched_queue *q)
{
 if (list_empty(&q->head))
  return 
# 142 "include/evl/sched/queue.h" 3 4
        ((void *)0)
# 142 "include/evl/sched/queue.h"
            ;

 return ({ struct evl_thread *__item; __item = ({ void *__mptr = (void *)((&q->head)->next); do { } while (0); ((struct evl_thread *)(__mptr - ((size_t)&((struct evl_thread *)0)->rq_next))); }); list_del(&__item->rq_next); __item; });
}

static 
# 147 "include/evl/sched/queue.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 148 "include/evl/sched/queue.h"
void evl_add_schedq(struct evl_sched_queue *q,
  struct evl_thread *thread)
{
 do { typeof(*thread) *__pos; if (list_empty(&q->head)) list_add(&(thread)->rq_next, &q->head); else { for (__pos = ({ void *__mptr = (void *)((&q->head)->prev); do { } while (0); ((typeof(*__pos) *)(__mptr - ((size_t)&((typeof(*__pos) *)0)->rq_next))); }); !(&__pos->rq_next == (&q->head)); __pos = ({ void *__mptr = (void *)((__pos)->rq_next.prev); do { } while (0); ((typeof(*(__pos)) *)(__mptr - ((size_t)&((typeof(*(__pos)) *)0)->rq_next))); })) { if ((thread)->cprio < __pos->cprio) break; } list_add(&(thread)->rq_next, &__pos->rq_next); } } while (0);
}

static 
# 154 "include/evl/sched/queue.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 155 "include/evl/sched/queue.h"
void evl_add_schedq_tail(struct evl_sched_queue *q,
   struct evl_thread *thread)
{
 do { typeof(*thread) *__pos; if (list_empty(&q->head)) list_add(&(thread)->rq_next, &q->head); else { for (__pos = ({ void *__mptr = (void *)((&q->head)->prev); do { } while (0); ((typeof(*__pos) *)(__mptr - ((size_t)&((typeof(*__pos) *)0)->rq_next))); }); !(&__pos->rq_next == (&q->head)); __pos = ({ void *__mptr = (void *)((__pos)->rq_next.prev); do { } while (0); ((typeof(*(__pos)) *)(__mptr - ((size_t)&((typeof(*(__pos)) *)0)->rq_next))); })) { if ((thread)->cprio <= __pos->cprio) break; } list_add(&(thread)->rq_next, &__pos->rq_next); } } while (0);
}

static 
# 161 "include/evl/sched/queue.h" 3 4
      __inline __attribute__ ((__always_inline__))

# 162 "include/evl/sched/queue.h"
void evl_del_schedq(struct evl_sched_queue *q,
  struct evl_thread *thread)
{
 list_del(&thread->rq_next);
}
# 16 "include/evl/sched.h" 2
# 1 "include/evl/sched/weak.h" 1
# 19 "include/evl/sched/weak.h"
extern struct evl_sched_class evl_sched_weak;

struct evl_sched_weak {
 struct evl_sched_queue runnable;
};

static inline int evl_weak_init_thread(struct evl_thread *thread)
{
 return 0;
}
# 17 "include/evl/sched.h" 2
# 1 "include/evl/sched/quota.h" 1
# 18 "include/evl/sched.h" 2
# 1 "include/evl/sched/tp.h" 1
# 19 "include/evl/sched.h" 2
# 61 "include/evl/sched.h"
struct evl_sched_fifo {
 struct evl_sched_queue runnable;
};

struct evl_rq {
 hard_spinlock_t lock;




 unsigned long flags;
 struct evl_thread *curr;
 struct evl_sched_fifo fifo;
 struct evl_sched_weak weak;






 struct evl_thread root_thread;

 ktime_t last_account_switch;
 struct evl_account *current_account;





 unsigned long local_flags;

 int cpu;
 struct cpumask resched_cpus;

 struct evl_timer inband_timer;
 struct evl_timer rrbtimer;




 char *proxy_timer_name;
 char *rrb_timer_name;
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct evl_rq) evl_runqueues;

extern struct cpumask evl_cpu_affinity;

extern struct list_head evl_thread_list;

extern int evl_nrthreads;

union evl_sched_param;
struct evl_sched_config;

struct evl_sched_class {
 void (*sched_init)(struct evl_rq *rq);
 void (*sched_enqueue)(struct evl_thread *thread);
 void (*sched_dequeue)(struct evl_thread *thread);
 void (*sched_requeue)(struct evl_thread *thread);
 struct evl_thread *(*sched_pick)(struct evl_rq *rq);
 void (*sched_tick)(struct evl_rq *rq);
 void (*sched_migrate)(struct evl_thread *thread,
         struct evl_rq *rq);
# 147 "include/evl/sched.h"
 bool (*sched_setparam)(struct evl_thread *thread,
          const union evl_sched_param *p);
 void (*sched_getparam)(struct evl_thread *thread,
          union evl_sched_param *p);
 int (*sched_chkparam)(struct evl_thread *thread,
         const union evl_sched_param *p);
 void (*sched_trackprio)(struct evl_thread *thread,
    const union evl_sched_param *p);
 void (*sched_ceilprio)(struct evl_thread *thread, int prio);

 int (*sched_declare)(struct evl_thread *thread,
        const union evl_sched_param *p);
 void (*sched_forget)(struct evl_thread *thread);
 void (*sched_kick)(struct evl_thread *thread);
 ssize_t (*sched_show)(struct evl_thread *thread,
         char *buf, ssize_t count);
 ssize_t (*sched_control)(int cpu, union evl_sched_ctlparam *ctlp,
    union evl_sched_ctlinfo *infp);
 int nthreads;
 struct evl_sched_class *next;
 int weight;
 int policy;
 const char *name;
};






static inline struct evl_rq *evl_cpu_rq(int cpu)
{
 return &(*({ do { const void *__vpp_verify = (typeof((&(evl_runqueues)) + 0))
# 179 "include/evl/sched.h" 3 4
        ((void *)0)
# 179 "include/evl/sched.h"
        ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*((&(evl_runqueues)))) *)((&(evl_runqueues))), ((__per_cpu_offset[(cpu)]))); }));
}

static inline struct evl_rq *this_evl_rq(void)
{

 return ({ do { const void *__vpp_verify = (typeof((&evl_runqueues) + 0))
# 185 "include/evl/sched.h" 3 4
       ((void *)0)
# 185 "include/evl/sched.h"
       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&evl_runqueues)) *)(&evl_runqueues), (__kern_my_cpu_offset())); });
}

static inline struct evl_thread *this_evl_rq_thread(void)
{
 return this_evl_rq()->curr;
}


static inline int evl_need_resched(struct evl_rq *rq)
{
 return rq->flags & 0x10000000;
}


static inline void evl_set_self_resched(struct evl_rq *rq)
{
 ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 202; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 rq->flags |= 0x10000000;
}




static inline bool is_evl_cpu(int cpu)
{
 return !!cpumask_test_cpu(cpu, &evl_oob_cpus);
}

static inline int evl_rq_cpu(struct evl_rq *rq)
{
 return rq->cpu;
}

static inline void evl_set_resched(struct evl_rq *rq)
{
 struct evl_rq *this_rq = this_evl_rq();

 ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 223; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });

 if (this_rq == rq) {
  this_rq->flags |= 0x10000000;
 } else if (!evl_need_resched(rq)) {
  rq->flags |= 0x10000000;
# 240 "include/evl/sched.h"
  this_rq->local_flags |= 0x10000000;
  cpumask_set_cpu(evl_rq_cpu(rq), &this_rq->resched_cpus);
 }
}

static inline bool is_threading_cpu(int cpu)
{
 return !!cpumask_test_cpu(cpu, &evl_cpu_affinity);
}

void evl_migrate_thread(struct evl_thread *thread,
   struct evl_rq *dst_rq);
# 282 "include/evl/sched.h"
void evl_start_ptsync(struct evl_thread *stopper);





void __evl_schedule(void);

static inline void evl_schedule(void)
{
 struct evl_rq *this_rq = this_evl_rq();
# 308 "include/evl/sched.h"
 if (((this_rq->flags|this_rq->local_flags) & (0x00004000|0x10000000)) != 0x10000000)
  return;

 if (likely(running_oob())) {
  __evl_schedule();
  return;
 }

 run_oob_call((int (*)(void *))__evl_schedule, 
# 316 "include/evl/sched.h" 3 4
                                              ((void *)0)
# 316 "include/evl/sched.h"
                                                  );
}

int evl_switch_oob(void);

void evl_switch_inband(int cause);

static inline int evl_preempt_count(void)
{
 return dovetail_current_state()->preempt_count;
}

static inline void __evl_disable_preempt(void)
{
 dovetail_current_state()->preempt_count++;
}

static inline void __evl_enable_preempt(void)
{
 if (--dovetail_current_state()->preempt_count == 0)
  evl_schedule();
}
# 346 "include/evl/sched.h"
static inline void evl_disable_preempt(void)
{
 __evl_disable_preempt();
}

static inline void evl_enable_preempt(void)
{
 __evl_enable_preempt();
}



static inline bool evl_in_irq(void)
{
 return !!(this_evl_rq()->local_flags & 0x00004000);
}

static inline bool evl_is_inband(void)
{
 return !!(this_evl_rq_thread()->state & 0x00001000);
}

static inline bool evl_cannot_block(void)
{
 return evl_in_irq() || evl_is_inband();
}
# 388 "include/evl/sched.h"
bool evl_set_effective_thread_priority(struct evl_thread *thread,
           int prio);

# 1 "include/evl/sched/idle.h" 1
# 18 "include/evl/sched/idle.h"
extern struct evl_sched_class evl_sched_idle;

static inline bool __evl_set_idle_schedparam(struct evl_thread *thread,
          const union evl_sched_param *p)
{
 thread->state &= ~0x00002000;
 return evl_set_effective_thread_priority(thread, p->idle.prio);
}

static inline void __evl_get_idle_schedparam(struct evl_thread *thread,
          union evl_sched_param *p)
{
 p->idle.prio = thread->cprio;
}

static inline void __evl_track_idle_priority(struct evl_thread *thread,
          const union evl_sched_param *p)
{
 if (p)

  ({ int __ret_warn_on = !!(0 && (1)); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched/idle.h\"; .popsection; .long 14472b - 14470b; .short 38; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 else
  thread->cprio = -1;
}

static inline void __evl_ceil_idle_priority(struct evl_thread *thread, int prio)
{
 ({ int __ret_warn_on = !!(0 && (1)); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched/idle.h\"; .popsection; .long 14472b - 14470b; .short 45; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
}

static inline int evl_init_idle_thread(struct evl_thread *thread)
{
 return 0;
}
# 392 "include/evl/sched.h" 2
# 1 "include/evl/sched/fifo.h" 1
# 23 "include/evl/sched/fifo.h"
extern struct evl_sched_class evl_sched_fifo;

static inline void __evl_requeue_fifo_thread(struct evl_thread *thread)
{
 evl_add_schedq(&thread->rq->fifo.runnable, thread);
}

static inline void __evl_enqueue_fifo_thread(struct evl_thread *thread)
{
 evl_add_schedq_tail(&thread->rq->fifo.runnable, thread);
}

static inline void __evl_dequeue_fifo_thread(struct evl_thread *thread)
{
 evl_del_schedq(&thread->rq->fifo.runnable, thread);
}

static inline
int __evl_chk_fifo_schedparam(struct evl_thread *thread,
   const union evl_sched_param *p)
{
 int min = 1, max = (100 - 1);

 if (!(thread->state & 0x00004000)) {
  min = 0;
  max = (100 + 1);
 }

 if (p->fifo.prio < min || p->fifo.prio > max)
  return -
# 52 "include/evl/sched/fifo.h" 3 4
         22
# 52 "include/evl/sched/fifo.h"
               ;

 return 0;
}

static inline
bool __evl_set_fifo_schedparam(struct evl_thread *thread,
   const union evl_sched_param *p)
{
 bool ret = evl_set_effective_thread_priority(thread, p->fifo.prio);

 if (!(thread->state & 0x00000200))
  thread->state &= ~0x00002000;

 return ret;
}

static inline
void __evl_get_fifo_schedparam(struct evl_thread *thread,
   union evl_sched_param *p)
{
 p->fifo.prio = thread->cprio;
}

static inline
void __evl_track_fifo_priority(struct evl_thread *thread,
   const union evl_sched_param *p)
{
 if (p)
  thread->cprio = p->fifo.prio;
 else {
  thread->cprio = thread->bprio;

  thread->state &= ~0x00002000;
 }
}

static inline
void __evl_ceil_fifo_priority(struct evl_thread *thread, int prio)
{






 thread->cprio = prio;
}

static inline
void __evl_forget_fifo_thread(struct evl_thread *thread)
{
}

static inline
int evl_init_fifo_thread(struct evl_thread *thread)
{
 return 0;
}
# 393 "include/evl/sched.h" 2

void evl_putback_thread(struct evl_thread *thread);

int evl_set_thread_policy_locked(struct evl_thread *thread,
    struct evl_sched_class *sched_class,
    const union evl_sched_param *p);

int evl_set_thread_policy(struct evl_thread *thread,
     struct evl_sched_class *sched_class,
     const union evl_sched_param *p);

void evl_track_thread_policy(struct evl_thread *thread,
        struct evl_thread *target);

void evl_protect_thread_priority(struct evl_thread *thread,
     int prio);

static inline int evl_init_rq_thread(struct evl_thread *thread)
{
 int ret = 0;

 evl_init_idle_thread(thread);
 evl_init_fifo_thread(thread);
# 427 "include/evl/sched.h"
 return ret;
}


static inline void evl_sched_tick(struct evl_rq *rq)
{
 struct evl_thread *curr = rq->curr;
 struct evl_sched_class *sched_class = curr->sched_class;

 ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 436; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });






 if (sched_class == curr->base_class &&
     sched_class->sched_tick &&
     (curr->state & ((0x00000001|0x00000002|0x00000004|0x00000008|0x00000020|0x00000080|0x00000100|0x00000400)|0x00000800)) == 0x00000800 &&
     evl_preempt_count() == 0)
  sched_class->sched_tick(rq);
}

static inline
int evl_check_schedparams(struct evl_sched_class *sched_class,
     struct evl_thread *thread,
     const union evl_sched_param *p)
{
 int ret = 0;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 457; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 457; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 if (sched_class->sched_chkparam)
  ret = sched_class->sched_chkparam(thread, p);

 return ret;
}

static inline
int evl_declare_thread(struct evl_sched_class *sched_class,
         struct evl_thread *thread,
         const union evl_sched_param *p)
{
 int ret;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 472; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 472; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 if (sched_class->sched_declare) {
  ret = sched_class->sched_declare(thread, p);
  if (ret)
   return ret;
 }
 if (sched_class != thread->base_class)
  sched_class->nthreads++;

 return 0;
}

static inline int evl_calc_weighted_prio(struct evl_sched_class *sched_class,
      int prio)
{
 return prio + sched_class->weight;
}

static 
# 491 "include/evl/sched.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 491 "include/evl/sched.h"
                      void evl_enqueue_thread(struct evl_thread *thread)
{
 struct evl_sched_class *sched_class = thread->sched_class;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 495; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 495; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);





 if (likely(sched_class == &evl_sched_fifo))
  __evl_enqueue_fifo_thread(thread);
 else if (sched_class != &evl_sched_idle)
  sched_class->sched_enqueue(thread);
}

static 
# 507 "include/evl/sched.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 507 "include/evl/sched.h"
                      void evl_dequeue_thread(struct evl_thread *thread)
{
 struct evl_sched_class *sched_class = thread->sched_class;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 511; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 511; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);




 if (likely(sched_class == &evl_sched_fifo))
  __evl_dequeue_fifo_thread(thread);
 else if (sched_class != &evl_sched_idle)
  sched_class->sched_dequeue(thread);
}

static 
# 522 "include/evl/sched.h" 3 4
      __inline __attribute__ ((__always_inline__)) 
# 522 "include/evl/sched.h"
                      void evl_requeue_thread(struct evl_thread *thread)
{
 struct evl_sched_class *sched_class = thread->sched_class;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 526; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 526; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);





 if (likely(sched_class == &evl_sched_fifo))
  __evl_requeue_fifo_thread(thread);
 else if (sched_class != &evl_sched_idle)
  sched_class->sched_requeue(thread);
}

static inline
bool evl_set_schedparam(struct evl_thread *thread,
   const union evl_sched_param *p)
{
 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 542; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 542; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 return thread->base_class->sched_setparam(thread, p);
}

static inline void evl_get_schedparam(struct evl_thread *thread,
          union evl_sched_param *p)
{
 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 550; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 550; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 thread->sched_class->sched_getparam(thread, p);
}

static inline void evl_track_priority(struct evl_thread *thread,
          const union evl_sched_param *p)
{
 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 558; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 558; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 thread->sched_class->sched_trackprio(thread, p);
 thread->wprio = evl_calc_weighted_prio(thread->sched_class, thread->cprio);
}

static inline void evl_ceil_priority(struct evl_thread *thread, int prio)
{
 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 566; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 566; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 thread->sched_class->sched_ceilprio(thread, prio);
 thread->wprio = evl_calc_weighted_prio(thread->sched_class, thread->cprio);
}

static inline void evl_forget_thread(struct evl_thread *thread)
{
 struct evl_sched_class *sched_class = thread->base_class;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 576; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 576; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 --sched_class->nthreads;

 if (sched_class->sched_forget)
  sched_class->sched_forget(thread);
}

static inline void evl_force_thread(struct evl_thread *thread)
{
 struct evl_sched_class *sched_class = thread->base_class;

 do { ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 588; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&(thread)->rq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/sched.h\"; .popsection; .long 14472b - 14470b; .short 588; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }); } while (0);

 if (sched_class->sched_kick)
  sched_class->sched_kick(thread);
}

struct evl_sched_group {



 struct list_head next;
};

struct evl_sched_class *
evl_find_sched_class(union evl_sched_param *param,
       const struct evl_sched_attrs *attrs,
       ktime_t *tslice_r);

int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) evl_init_sched(void);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) evl_cleanup_sched(void);
# 11 "kernel/evl/init.c" 2


# 1 "include/evl/tick.h" 1
# 13 "include/evl/tick.h"
# 1 "include/linux/tick.h" 1







# 1 "include/linux/clockchips.h" 1
# 14 "include/linux/clockchips.h"
# 1 "include/linux/clocksource.h" 1
# 23 "include/linux/clocksource.h"
# 1 "arch/arm64/include/generated/asm/div64.h" 1
# 24 "include/linux/clocksource.h" 2

# 1 "include/uapi/linux/clocksource.h" 1
# 9 "include/uapi/linux/clocksource.h"
enum clksrc_user_mmio_type {
 CLKSRC_MMIO_L_UP,
 CLKSRC_MMIO_L_DOWN,
 CLKSRC_MMIO_W_UP,
 CLKSRC_MMIO_W_DOWN,
 CLKSRC_DMMIO_L_UP,
 CLKSRC_DMMIO_W_UP,

 CLKSRC_MMIO_TYPE_NR,
};

struct clksrc_user_mmio_info {
 enum clksrc_user_mmio_type type;
 void *reg_lower;
 unsigned int mask_lower;
 unsigned int bits_lower;
 void *reg_upper;
 unsigned int mask_upper;
};
# 26 "include/linux/clocksource.h" 2

struct clocksource;
struct module;



# 1 "arch/arm64/include/asm/clocksource.h" 1




# 1 "arch/arm64/include/asm/vdso/clocksource.h" 1
# 6 "arch/arm64/include/asm/clocksource.h" 2
# 33 "include/linux/clocksource.h" 2



# 1 "include/vdso/clocksource.h" 1
# 11 "include/vdso/clocksource.h"
enum vdso_clock_mode {
 VDSO_CLOCKMODE_NONE,

 VDSO_CLOCKMODE_ARCHTIMER, VDSO_CLOCKMODE_ARCHTIMER_NOCOMPAT,

 VDSO_CLOCKMODE_MAX,


 VDSO_CLOCKMODE_TIMENS = ((int)(~0U >> 1))
};
# 37 "include/linux/clocksource.h" 2

enum clocksource_vdso_type {
 CLOCKSOURCE_VDSO_NONE = 0,
 CLOCKSOURCE_VDSO_ARCHITECTED,
 CLOCKSOURCE_VDSO_MMIO,
};
# 104 "include/linux/clocksource.h"
struct clocksource {
 u64 (*read)(struct clocksource *cs);
 u64 mask;
 u32 mult;
 u32 shift;
 u64 max_idle_ns;
 u32 maxadj;



 u64 max_cycles;
 const char *name;
 struct list_head list;
 int rating;
 enum clocksource_ids id;
 enum vdso_clock_mode vdso_clock_mode;
   enum clocksource_vdso_type vdso_type;
 unsigned long flags;

 int (*enable)(struct clocksource *cs);
 void (*disable)(struct clocksource *cs);
 void (*suspend)(struct clocksource *cs);
 void (*resume)(struct clocksource *cs);
 void (*mark_unstable)(struct clocksource *cs);
 void (*tick_stable)(struct clocksource *cs);
# 137 "include/linux/clocksource.h"
 struct module *owner;
};

struct clocksource_mmio {
 void *reg;
 struct clocksource clksrc;
};

struct clocksource_user_mmio {
 struct clocksource_mmio mmio;
 void *reg_upper;
 unsigned int bits_lower;
 unsigned int mask_lower;
 unsigned int mask_upper;
 enum clksrc_user_mmio_type type;
 unsigned long phys_lower;
 unsigned long phys_upper;
 unsigned int id;
 struct device *dev;
 struct cdev cdev;
 struct hlist_head mappings[1 << (10)];
 struct spinlock lock;
 struct list_head link;
};

struct clocksource_mmio_regs {
 void *reg_upper;
 void *reg_lower;
 unsigned int bits_upper;
 unsigned int bits_lower;
 unsigned long (*revmap)(void *);
};
# 185 "include/linux/clocksource.h"
static inline u32 clocksource_freq2mult(u32 freq, u32 shift_constant, u64 from)
{







 u64 tmp = ((u64)from) << shift_constant;

 tmp += freq/2;
 ({ uint32_t __base = (freq); uint32_t __rem; (void)(((typeof((tmp)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (tmp) & (__base - 1); (tmp) >>= ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((7 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (tmp); (tmp) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (tmp); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (tmp); __rem = __n_lo - __res_lo * __base; } else if (likely(((tmp) >> 32) == 0)) { __rem = (uint32_t)(tmp) % __base; (tmp) = (uint32_t)(tmp) / __base; } else __rem = __div64_32(&(tmp), __base); __rem; });

 return (u32)tmp;
}
# 210 "include/linux/clocksource.h"
static inline u32 clocksource_khz2mult(u32 khz, u32 shift_constant)
{
 return clocksource_freq2mult(khz, shift_constant, 1000000L);
}
# 224 "include/linux/clocksource.h"
static inline u32 clocksource_hz2mult(u32 hz, u32 shift_constant)
{
 return clocksource_freq2mult(hz, shift_constant, 1000000000L);
}
# 242 "include/linux/clocksource.h"
static inline s64 clocksource_cyc2ns(u64 cycles, u32 mult, u32 shift)
{
 return ((u64) cycles * mult) >> shift;
}


extern int clocksource_unregister(struct clocksource*);
extern void clocksource_touch_watchdog(void);
extern void clocksource_change_rating(struct clocksource *cs, int rating);
extern void clocksource_suspend(void);
extern void clocksource_resume(void);
extern struct clocksource * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) clocksource_default_clock(void);
extern void clocksource_mark_unstable(struct clocksource *cs);
extern void
clocksource_start_suspend_timing(struct clocksource *cs, u64 start_cycles);
extern u64 clocksource_stop_suspend_timing(struct clocksource *cs, u64 now);

extern u64
clocks_calc_max_nsecs(u32 mult, u32 shift, u32 maxadj, u64 mask, u64 *max_cycles);
extern void
clocks_calc_mult_shift(u32 *mult, u32 *shift, u32 from, u32 to, u32 minsec);





extern int
__clocksource_register_scale(struct clocksource *cs, u32 scale, u32 freq);
extern void
__clocksource_update_freq_scale(struct clocksource *cs, u32 scale, u32 freq);





static inline int __clocksource_register(struct clocksource *cs)
{
 return __clocksource_register_scale(cs, 1, 0);
}

static inline int clocksource_register_hz(struct clocksource *cs, u32 hz)
{
 return __clocksource_register_scale(cs, 1, hz);
}

static inline int clocksource_register_khz(struct clocksource *cs, u32 khz)
{
 return __clocksource_register_scale(cs, 1000, khz);
}

static inline void __clocksource_update_freq_hz(struct clocksource *cs, u32 hz)
{
 __clocksource_update_freq_scale(cs, 1, hz);
}

static inline void __clocksource_update_freq_khz(struct clocksource *cs, u32 khz)
{
 __clocksource_update_freq_scale(cs, 1000, khz);
}




static inline void clocksource_arch_init(struct clocksource *cs) { }


extern int timekeeping_notify(struct clocksource *clock);

extern u64 clocksource_mmio_readl_up(struct clocksource *);
extern u64 clocksource_mmio_readl_down(struct clocksource *);
extern u64 clocksource_mmio_readw_up(struct clocksource *);
extern u64 clocksource_mmio_readw_down(struct clocksource *);
extern u64 clocksource_dual_mmio_readw_up(struct clocksource *);
extern u64 clocksource_dual_mmio_readl_up(struct clocksource *);

extern int clocksource_mmio_init(void *, const char *,
 unsigned long, int, unsigned, u64 (*)(struct clocksource *));

extern int clocksource_user_mmio_init(struct clocksource_user_mmio *ucs,
          const struct clocksource_mmio_regs *regs,
          unsigned long hz);

extern int clocksource_user_single_mmio_init(
 void *base, const char *name,
 unsigned long hz, int rating, unsigned int bits,
 u64 (*read)(struct clocksource *));

extern int clocksource_i8253_init(void);





extern void timer_probe(void);
# 15 "include/linux/clockchips.h" 2





struct clock_event_device;
struct module;
# 37 "include/linux/clockchips.h"
enum clock_event_state {
 CLOCK_EVT_STATE_DETACHED,
 CLOCK_EVT_STATE_SHUTDOWN,
 CLOCK_EVT_STATE_PERIODIC,
 CLOCK_EVT_STATE_ONESHOT,
 CLOCK_EVT_STATE_ONESHOT_STOPPED,
 CLOCK_EVT_STATE_RESERVED,
};
# 114 "include/linux/clockchips.h"
struct clock_event_device {
 void (*event_handler)(struct clock_event_device *);
 int (*set_next_event)(unsigned long evt, struct clock_event_device *);
 int (*set_next_ktime)(ktime_t expires, struct clock_event_device *);
 ktime_t next_event;
 u64 max_delta_ns;
 u64 min_delta_ns;
 u32 mult;
 u32 shift;
 enum clock_event_state state_use_accessors;
 unsigned int features;
 unsigned long retries;

 int (*set_state_periodic)(struct clock_event_device *);
 int (*set_state_oneshot)(struct clock_event_device *);
 int (*set_state_oneshot_stopped)(struct clock_event_device *);
 int (*set_state_shutdown)(struct clock_event_device *);
 int (*tick_resume)(struct clock_event_device *);

 void (*broadcast)(const struct cpumask *mask);
 void (*suspend)(struct clock_event_device *);
 void (*resume)(struct clock_event_device *);
 unsigned long min_delta_ticks;
 unsigned long max_delta_ticks;

 const char *name;
 int rating;
 int irq;
 int bound_on;
 const struct cpumask *cpumask;
 struct list_head list;
 struct module *owner;
} __attribute__((__aligned__((1 << (6)))));


static inline bool clockevent_state_detached(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_DETACHED;
}

static inline bool clockevent_state_reserved(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_RESERVED;
}

static inline bool clockevent_state_shutdown(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_SHUTDOWN;
}

static inline bool clockevent_state_periodic(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_PERIODIC;
}

static inline bool clockevent_state_oneshot(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_ONESHOT;
}

static inline bool clockevent_state_oneshot_stopped(struct clock_event_device *dev)
{
 return dev->state_use_accessors == CLOCK_EVT_STATE_ONESHOT_STOPPED;
}

static inline bool clockevent_is_oob(struct clock_event_device *dev)
{
 return !!(dev->features & 0x000200);
}
# 195 "include/linux/clockchips.h"
static inline unsigned long
div_sc(unsigned long ticks, unsigned long nsec, int shift)
{
 u64 tmp = ((u64)ticks) << shift;

 ({ uint32_t __base = (nsec); uint32_t __rem; (void)(((typeof((tmp)) *)0) == ((uint64_t *)0)); if (__builtin_constant_p(__base) && is_power_of_2(__base)) { __rem = (tmp) & (__base - 1); (tmp) >>= ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); } else if ((7 >= 4) && __builtin_constant_p(__base) && __base != 0) { uint32_t __res_lo, __n_lo = (tmp); (tmp) = ({ uint64_t ___res, ___x, ___t, ___m, ___n = (tmp); uint32_t ___p, ___bias; ___p = 1 << ( __builtin_constant_p(__base) ? ((__base) < 2 ? 0 : 63 - __builtin_clzll(__base)) : (sizeof(__base) <= 4) ? __ilog2_u32(__base) : __ilog2_u64(__base) ); ___m = (~0ULL / __base) * ___p; ___m += (((~0ULL % __base + 1) * ___p) + __base - 1) / __base; ___x = ~0ULL / __base * __base - 1; ___res = ((___m & 0xffffffff) * (___x & 0xffffffff)) >> 32; ___t = ___res += (___m & 0xffffffff) * (___x >> 32); ___res += (___x & 0xffffffff) * (___m >> 32); ___t = (___res < ___t) ? (1ULL << 32) : 0; ___res = (___res >> 32) + ___t; ___res += (___m >> 32) * (___x >> 32); ___res /= ___p; if (~0ULL % (__base / (__base & -__base)) == 0) { ___n /= (__base & -__base); ___m = ~0ULL / (__base / (__base & -__base)); ___p = 1; ___bias = 1; } else if (___res != ___x / __base) { ___bias = 1; ___m = (~0ULL / __base) * ___p; ___m += ((~0ULL % __base + 1) * ___p) / __base; } else { uint32_t ___bits = -(___m & -___m); ___bits |= ___m >> 32; ___bits = (~___bits) << 1; if (!___bits) { ___p /= (___m & -___m); ___m /= (___m & -___m); } else { ___p >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); ___m >>= ( __builtin_constant_p(___bits) ? ((___bits) < 2 ? 0 : 63 - __builtin_clzll(___bits)) : (sizeof(___bits) <= 4) ? __ilog2_u32(___bits) : __ilog2_u64(___bits) ); } ___bias = 0; } ___res = __arch_xprod_64(___m, ___n, ___bias); ___res /= ___p; }); __res_lo = (tmp); __rem = __n_lo - __res_lo * __base; } else if (likely(((tmp) >> 32) == 0)) { __rem = (uint32_t)(tmp) % __base; (tmp) = (uint32_t)(tmp) / __base; } else __rem = __div64_32(&(tmp), __base); __rem; });

 return (unsigned long) tmp;
}


extern u64 clockevent_delta2ns(unsigned long latch, struct clock_event_device *evt);
extern void clockevents_register_device(struct clock_event_device *dev);
extern int clockevents_unbind_device(struct clock_event_device *ced, int cpu);

extern void clockevents_config_and_register(struct clock_event_device *dev,
         u32 freq, unsigned long min_delta,
         unsigned long max_delta);
extern void clockevents_switch_state(struct clock_event_device *dev,
         enum clock_event_state state);

extern int clockevents_update_freq(struct clock_event_device *ce, u32 freq);

static inline void
clockevents_calc_mult_shift(struct clock_event_device *ce, u32 freq, u32 maxsec)
{
 return clocks_calc_mult_shift(&ce->mult, &ce->shift, 1000000000L, freq, maxsec);
}

extern void clockevents_suspend(void);
extern void clockevents_resume(void);



extern void tick_broadcast(const struct cpumask *mask);



extern int tick_receive_broadcast(void);



extern void tick_setup_hrtimer_broadcast(void);
extern int tick_check_broadcast_expired(void);







struct clock_proxy_device {
 struct clock_event_device proxy_device;
 struct clock_event_device *real_device;
 void (*handle_oob_event)(struct clock_event_device *dev);
 void (*__setup_handler)(struct clock_proxy_device *dev);
 void (*__original_handler)(struct clock_event_device *dev);
};

void tick_notify_proxy(void);

static inline
void clockevents_handle_event(struct clock_event_device *ced)
{
# 271 "include/linux/clockchips.h"
 if (clockevent_is_oob(ced) || running_inband())
  ced->event_handler(ced);
 else
  tick_notify_proxy();
}
# 9 "include/linux/tick.h" 2
# 17 "include/linux/tick.h"
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) tick_init(void);

extern void tick_suspend_local(void);

extern void tick_resume_local(void);
extern void tick_handover_do_timer(void);
extern void tick_cleanup_dead_cpu(int cpu);


int tick_install_proxy(void (*setup_proxy)(struct clock_proxy_device *dev),
  const struct cpumask *cpumask);
void tick_uninstall_proxy(const struct cpumask *cpumask);
void tick_notify_proxy(void);
# 41 "include/linux/tick.h"
extern void tick_freeze(void);
extern void tick_unfreeze(void);






extern void tick_irq_enter(void);
# 58 "include/linux/tick.h"
extern void hotplug_cpu__broadcast_tick_pull(int dead_cpu);




enum tick_broadcast_mode {
 TICK_BROADCAST_OFF,
 TICK_BROADCAST_ON,
 TICK_BROADCAST_FORCE,
};

enum tick_broadcast_state {
 TICK_BROADCAST_EXIT,
 TICK_BROADCAST_ENTER,
};


extern void tick_broadcast_control(enum tick_broadcast_mode mode);





extern void tick_offline_cpu(unsigned int cpu);





extern int tick_broadcast_oneshot_control(enum tick_broadcast_state state);







static inline void tick_broadcast_enable(void)
{
 tick_broadcast_control(TICK_BROADCAST_ON);
}
static inline void tick_broadcast_disable(void)
{
 tick_broadcast_control(TICK_BROADCAST_OFF);
}
static inline void tick_broadcast_force(void)
{
 tick_broadcast_control(TICK_BROADCAST_FORCE);
}
static inline int tick_broadcast_enter(void)
{
 return tick_broadcast_oneshot_control(TICK_BROADCAST_ENTER);
}
static inline void tick_broadcast_exit(void)
{
 tick_broadcast_oneshot_control(TICK_BROADCAST_EXIT);
}

enum tick_dep_bits {
 TICK_DEP_BIT_POSIX_TIMER = 0,
 TICK_DEP_BIT_PERF_EVENTS = 1,
 TICK_DEP_BIT_SCHED = 2,
 TICK_DEP_BIT_CLOCK_UNSTABLE = 3,
 TICK_DEP_BIT_RCU = 4,
 TICK_DEP_BIT_RCU_EXP = 5
};
# 135 "include/linux/tick.h"
extern bool tick_nohz_enabled;
extern bool tick_nohz_tick_stopped(void);
extern bool tick_nohz_tick_stopped_cpu(int cpu);
extern void tick_nohz_idle_stop_tick(void);
extern void tick_nohz_idle_retain_tick(void);
extern void tick_nohz_idle_restart_tick(void);
extern void tick_nohz_idle_enter(void);
extern void tick_nohz_idle_exit(void);
extern void tick_nohz_irq_exit(void);
extern bool tick_nohz_idle_got_tick(void);
extern ktime_t tick_nohz_get_next_hrtimer(void);
extern ktime_t tick_nohz_get_sleep_length(ktime_t *delta_next);
extern unsigned long tick_nohz_get_idle_calls(void);
extern unsigned long tick_nohz_get_idle_calls_cpu(int cpu);
extern u64 get_cpu_idle_time_us(int cpu, u64 *last_update_time);
extern u64 get_cpu_iowait_time_us(int cpu, u64 *last_update_time);

static inline void tick_nohz_idle_stop_tick_protected(void)
{
 do { arch_local_irq_disable(); } while (0);
 tick_nohz_idle_stop_tick();
 do { arch_local_irq_enable(); } while (0);
}
# 281 "include/linux/tick.h"
static inline bool tick_nohz_full_enabled(void) { return false; }
static inline bool tick_nohz_full_cpu(int cpu) { return false; }
static inline void tick_nohz_full_add_cpus_to(struct cpumask *mask) { }

static inline void tick_nohz_dep_set_cpu(int cpu, enum tick_dep_bits bit) { }
static inline void tick_nohz_dep_clear_cpu(int cpu, enum tick_dep_bits bit) { }

static inline void tick_dep_set(enum tick_dep_bits bit) { }
static inline void tick_dep_clear(enum tick_dep_bits bit) { }
static inline void tick_dep_set_cpu(int cpu, enum tick_dep_bits bit) { }
static inline void tick_dep_clear_cpu(int cpu, enum tick_dep_bits bit) { }
static inline void tick_dep_set_task(struct task_struct *tsk,
         enum tick_dep_bits bit) { }
static inline void tick_dep_clear_task(struct task_struct *tsk,
           enum tick_dep_bits bit) { }
static inline void tick_dep_set_signal(struct signal_struct *signal,
           enum tick_dep_bits bit) { }
static inline void tick_dep_clear_signal(struct signal_struct *signal,
      enum tick_dep_bits bit) { }

static inline void tick_nohz_full_kick_cpu(int cpu) { }
static inline void __tick_nohz_task_switch(void) { }
static inline void tick_nohz_full_setup(cpumask_var_t cpumask) { }


static inline void tick_nohz_task_switch(void)
{
 if (tick_nohz_full_enabled())
  __tick_nohz_task_switch();
}

static inline void tick_nohz_user_enter_prepare(void)
{
 if (tick_nohz_full_cpu((*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))
# 314 "include/linux/tick.h" 3 4
                       ((void *)0)
# 314 "include/linux/tick.h"
                       ; (void)__vpp_verify; } while (0); RELOC_HIDE((typeof(*(&cpu_number)) *)(&cpu_number), (__kern_my_cpu_offset())); }))))
  rcu_nocb_flush_deferred_wakeup();
}
# 14 "include/evl/tick.h" 2




struct evl_rq;

static inline void evl_program_local_tick(struct evl_clock *clock)
{
 struct evl_clock *master = clock->master;

 if (master->ops.program_local_shot)
  master->ops.program_local_shot(master);
}

static inline void evl_program_remote_tick(struct evl_clock *clock,
     struct evl_rq *rq)
{

 struct evl_clock *master = clock->master;

 if (master->ops.program_remote_shot)
  master->ops.program_remote_shot(master, rq);

}


static inline void evl_notify_proxy_tick(struct evl_rq *this_rq)
{






 this_rq->local_flags &= ~0x00008000;
 tick_notify_proxy();
}

int evl_enable_tick(void);

void evl_disable_tick(void);

void evl_notify_proxy_tick(struct evl_rq *this_rq);

void evl_program_proxy_tick(struct evl_clock *clock);

void evl_send_timer_ipi(struct evl_clock *clock,
   struct evl_rq *rq);
# 14 "kernel/evl/init.c" 2
# 1 "include/evl/memory.h" 1
# 36 "include/evl/memory.h"
struct evl_heap_pgentry {

 unsigned int prev : (32 - 9);
 unsigned int next : (32 - 9);

 unsigned int type : 6;






 union {
  u32 map;
  u32 bsize;
 };
};







struct evl_heap_range {
 struct rb_node addr_node;
 struct rb_node size_node;
 size_t size;
};

struct evl_heap {
 void *membase;
 struct rb_root addr_tree;
 struct rb_root size_tree;
 struct evl_heap_pgentry *pagemap;
 size_t usable_size;
 size_t used_size;
 u32 buckets[(9 - 4)];
 hard_spinlock_t lock;
 struct list_head next;
};

extern struct evl_heap evl_system_heap;

extern struct evl_heap evl_shared_heap;

static inline size_t evl_get_heap_size(const struct evl_heap *heap)
{
 return heap->usable_size;
}

static inline size_t evl_get_heap_free(const struct evl_heap *heap)
{
 return heap->usable_size - heap->used_size;
}

static inline void *evl_get_heap_base(const struct evl_heap *heap)
{
 return heap->membase;
}

int evl_init_heap(struct evl_heap *heap, void *membase,
  size_t size);

void evl_destroy_heap(struct evl_heap *heap);

void *evl_alloc_chunk(struct evl_heap *heap, size_t size);

void evl_free_chunk(struct evl_heap *heap, void *block);

ssize_t evl_check_chunk(struct evl_heap *heap, void *block);

static inline void *evl_zalloc_chunk(struct evl_heap *heap, u32 size)
{
 void *p;

 p = evl_alloc_chunk(heap, size);
 if (p)
  memset(p, 0, size);

 return p;
}

static inline
int evl_shared_offset(void *p)
{
 return p - evl_get_heap_base(&evl_shared_heap);
}

static inline void *evl_alloc(size_t size)
{
 return evl_alloc_chunk(&evl_system_heap, size);
}

static inline void evl_free(void *ptr)
{
 evl_free_chunk(&evl_system_heap, ptr);
}

int evl_init_memory(void);

void evl_cleanup_memory(void);

extern size_t evl_shm_size;
# 15 "kernel/evl/init.c" 2


# 1 "include/evl/control.h" 1
# 14 "include/evl/control.h"
enum evl_run_states {
 EVL_STATE_DISABLED,
 EVL_STATE_RUNNING,
 EVL_STATE_STOPPED,
 EVL_STATE_TEARDOWN,
 EVL_STATE_WARMUP,
};

extern atomic_t evl_runstate;

static inline enum evl_run_states get_evl_state(void)
{
 return atomic_read(&evl_runstate);
}

static inline int evl_is_warming(void)
{
 return get_evl_state() == EVL_STATE_WARMUP;
}

static inline int evl_is_running(void)
{
 return get_evl_state() == EVL_STATE_RUNNING;
}

static inline int evl_is_enabled(void)
{
 return get_evl_state() != EVL_STATE_DISABLED;
}

static inline int evl_is_stopped(void)
{
 return get_evl_state() == EVL_STATE_STOPPED;
}

static inline void set_evl_state(enum evl_run_states state)
{
 atomic_set(&evl_runstate, state);
}

void evl_add_state_chain(struct notifier_block *nb);

void evl_remove_state_chain(struct notifier_block *nb);
# 18 "kernel/evl/init.c" 2
# 1 "include/evl/net.h" 1
# 27 "include/evl/net.h"
static inline int evl_net_init(void)
{
 return 0;
}

static inline void evl_net_cleanup(void)
{ }
# 19 "kernel/evl/init.c" 2

# 1 "include/trace/events/evl.h" 1
# 15 "include/trace/events/evl.h"
# 1 "include/linux/mman.h" 1
# 9 "include/linux/mman.h"
# 1 "include/uapi/linux/mman.h" 1




# 1 "arch/arm64/include/asm/mman.h" 1






# 1 "arch/arm64/include/uapi/asm/mman.h" 1




# 1 "include/uapi/asm-generic/mman.h" 1




# 1 "include/uapi/asm-generic/mman-common.h" 1
# 6 "include/uapi/asm-generic/mman.h" 2
# 6 "arch/arm64/include/uapi/asm/mman.h" 2
# 8 "arch/arm64/include/asm/mman.h" 2

static inline unsigned long arch_calc_vm_prot_bits(unsigned long prot,
 unsigned long pkey __attribute__((__unused__)))
{
 unsigned long ret = 0;

 if (system_supports_bti() && (prot & 0x10))
  ret |= VM_ARM64_BTI;

 if (system_supports_mte() && (prot & 0x20))
  ret |= VM_MTE;

 return ret;
}


static inline unsigned long arch_calc_vm_flag_bits(unsigned long flags)
{





 if (system_supports_mte() && (flags & 0x20))
  return VM_MTE_ALLOWED;

 return 0;
}


static inline pgprot_t arch_vm_get_page_prot(unsigned long vm_flags)
{
 pteval_t prot = 0;

 if (vm_flags & VM_ARM64_BTI)
  prot |= (((pteval_t)(1)) << 50);
# 55 "arch/arm64/include/asm/mman.h"
 if (vm_flags & VM_MTE)
  prot |= (((pteval_t)((1))) << 2);

 return ((pgprot_t) { (prot) } );
}


static inline bool arch_validate_prot(unsigned long prot,
 unsigned long addr __attribute__((__unused__)))
{
 unsigned long supported = 0x1 | 0x2 | 0x4 | 0x8;

 if (system_supports_bti())
  supported |= 0x10;

 if (system_supports_mte())
  supported |= 0x20;

 return (prot & ~supported) == 0;
}


static inline bool arch_validate_flags(unsigned long vm_flags)
{
 if (!system_supports_mte())
  return true;


 return !(vm_flags & VM_MTE) || (vm_flags & VM_MTE_ALLOWED);
}
# 6 "include/uapi/linux/mman.h" 2
# 10 "include/linux/mman.h" 2
# 53 "include/linux/mman.h"
extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;
extern struct percpu_counter vm_committed_as;


extern s32 vm_committed_as_batch;
extern void mm_compute_batch(int overcommit_policy);







unsigned long vm_memory_committed(void);

static inline void vm_acct_memory(long pages)
{
 percpu_counter_add_batch(&vm_committed_as, pages, vm_committed_as_batch);
}

static inline void vm_unacct_memory(long pages)
{
 vm_acct_memory(-pages);
}
# 138 "include/linux/mman.h"
static inline unsigned long
calc_vm_prot_bits(unsigned long prot, unsigned long pkey)
{
 return ((!(0x1) || !(VM_READ)) ? 0 : ((0x1) <= (VM_READ) ? ((prot) & (0x1)) * ((VM_READ) / (0x1)) : ((prot) & (0x1)) / ((0x1) / (VM_READ)))) |
        ((!(0x2) || !(VM_WRITE)) ? 0 : ((0x2) <= (VM_WRITE) ? ((prot) & (0x2)) * ((VM_WRITE) / (0x2)) : ((prot) & (0x2)) / ((0x2) / (VM_WRITE)))) |
        ((!(0x4) || !(VM_EXEC)) ? 0 : ((0x4) <= (VM_EXEC) ? ((prot) & (0x4)) * ((VM_EXEC) / (0x4)) : ((prot) & (0x4)) / ((0x4) / (VM_EXEC)))) |
        arch_calc_vm_prot_bits(prot, pkey);
}




static inline unsigned long
calc_vm_flag_bits(unsigned long flags)
{
 return ((!(0x0100) || !(VM_GROWSDOWN)) ? 0 : ((0x0100) <= (VM_GROWSDOWN) ? ((flags) & (0x0100)) * ((VM_GROWSDOWN) / (0x0100)) : ((flags) & (0x0100)) / ((0x0100) / (VM_GROWSDOWN)))) |
        ((!(0x0800) || !(VM_DENYWRITE)) ? 0 : ((0x0800) <= (VM_DENYWRITE) ? ((flags) & (0x0800)) * ((VM_DENYWRITE) / (0x0800)) : ((flags) & (0x0800)) / ((0x0800) / (VM_DENYWRITE)))) |
        ((!(0x2000) || !(VM_LOCKED)) ? 0 : ((0x2000) <= (VM_LOCKED) ? ((flags) & (0x2000)) * ((VM_LOCKED) / (0x2000)) : ((flags) & (0x2000)) / ((0x2000) / (VM_LOCKED)))) |
        ((!(0x080000) || !(VM_SYNC)) ? 0 : ((0x080000) <= (VM_SYNC) ? ((flags) & (0x080000)) * ((VM_SYNC) / (0x080000)) : ((flags) & (0x080000)) / ((0x080000) / (VM_SYNC)))) |
        arch_calc_vm_flag_bits(flags);
}

unsigned long vm_commit_limit(void);
# 16 "include/trace/events/evl.h" 2


# 1 "include/linux/tracepoint.h" 1
# 22 "include/linux/tracepoint.h"
# 1 "include/linux/static_call.h" 1
# 102 "include/linux/static_call.h"
# 1 "include/linux/cpu.h" 1
# 17 "include/linux/cpu.h"
# 1 "include/linux/node.h" 1
# 31 "include/linux/node.h"
struct node_hmem_attrs {
 unsigned int read_bandwidth;
 unsigned int write_bandwidth;
 unsigned int read_latency;
 unsigned int write_latency;
};

enum cache_indexing {
 NODE_CACHE_DIRECT_MAP,
 NODE_CACHE_INDEXED,
 NODE_CACHE_OTHER,
};

enum cache_write_policy {
 NODE_CACHE_WRITE_BACK,
 NODE_CACHE_WRITE_THROUGH,
 NODE_CACHE_WRITE_OTHER,
};
# 59 "include/linux/node.h"
struct node_cache_attrs {
 enum cache_indexing indexing;
 enum cache_write_policy write_policy;
 u64 size;
 u16 line_size;
 u8 level;
};






static inline void node_add_cache(unsigned int nid,
      struct node_cache_attrs *cache_attrs)
{
}

static inline void node_set_perf_attrs(unsigned int nid,
           struct node_hmem_attrs *hmem_attrs,
           unsigned access)
{
}


struct node {
 struct device dev;
 struct list_head access_list;
# 95 "include/linux/node.h"
};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);






static inline void link_mem_sections(int nid, unsigned long start_pfn,
         unsigned long end_pfn,
         enum meminit_context context)
{
}


extern void unregister_node(struct node *node);


extern int __register_one_node(int nid);


static inline int register_one_node(int nid)
{
 int error = 0;

 if (node_state((nid), N_ONLINE)) {
  struct pglist_data *pgdat = (node_data[(nid)]);
  unsigned long start_pfn = pgdat->node_start_pfn;
  unsigned long end_pfn = start_pfn + pgdat->node_spanned_pages;

  error = __register_one_node(nid);
  if (error)
   return error;

  link_mem_sections(nid, start_pfn, end_pfn, MEMINIT_EARLY);
 }

 return error;
}

extern void unregister_one_node(int nid);
extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
extern void unregister_memory_block_under_nodes(struct memory_block *mem_blk);

extern int register_memory_node_under_compute_node(unsigned int mem_nid,
         unsigned int cpu_nid,
         unsigned access);


extern void register_hugetlbfs_with_node(node_registration_func_t doregister,
      node_registration_func_t unregister);
# 18 "include/linux/cpu.h" 2


# 1 "include/linux/cpuhotplug.h" 1
# 25 "include/linux/cpuhotplug.h"
enum cpuhp_state {
 CPUHP_INVALID = -1,
 CPUHP_OFFLINE = 0,
 CPUHP_CREATE_THREADS,
 CPUHP_PERF_PREPARE,
 CPUHP_PERF_X86_PREPARE,
 CPUHP_PERF_X86_AMD_UNCORE_PREP,
 CPUHP_PERF_POWER,
 CPUHP_PERF_SUPERH,
 CPUHP_X86_HPET_DEAD,
 CPUHP_X86_APB_DEAD,
 CPUHP_X86_MCE_DEAD,
 CPUHP_VIRT_NET_DEAD,
 CPUHP_SLUB_DEAD,
 CPUHP_DEBUG_OBJ_DEAD,
 CPUHP_MM_WRITEBACK_DEAD,
 CPUHP_MM_VMSTAT_DEAD,
 CPUHP_SOFTIRQ_DEAD,
 CPUHP_NET_MVNETA_DEAD,
 CPUHP_CPUIDLE_DEAD,
 CPUHP_ARM64_FPSIMD_DEAD,
 CPUHP_ARM_OMAP_WAKE_DEAD,
 CPUHP_IRQ_POLL_DEAD,
 CPUHP_BLOCK_SOFTIRQ_DEAD,
 CPUHP_ACPI_CPUDRV_DEAD,
 CPUHP_S390_PFAULT_DEAD,
 CPUHP_BLK_MQ_DEAD,
 CPUHP_FS_BUFF_DEAD,
 CPUHP_PRINTK_DEAD,
 CPUHP_MM_MEMCQ_DEAD,
 CPUHP_PERCPU_CNT_DEAD,
 CPUHP_RADIX_DEAD,
 CPUHP_PAGE_ALLOC_DEAD,
 CPUHP_NET_DEV_DEAD,
 CPUHP_PCI_XGENE_DEAD,
 CPUHP_IOMMU_IOVA_DEAD,
 CPUHP_LUSTRE_CFS_DEAD,
 CPUHP_AP_ARM_CACHE_B15_RAC_DEAD,
 CPUHP_PADATA_DEAD,
 CPUHP_WORKQUEUE_PREP,
 CPUHP_POWER_NUMA_PREPARE,
 CPUHP_HRTIMERS_PREPARE,
 CPUHP_PROFILE_PREPARE,
 CPUHP_X2APIC_PREPARE,
 CPUHP_SMPCFD_PREPARE,
 CPUHP_RELAY_PREPARE,
 CPUHP_SLAB_PREPARE,
 CPUHP_MD_RAID5_PREPARE,
 CPUHP_RCUTREE_PREP,
 CPUHP_CPUIDLE_COUPLED_PREPARE,
 CPUHP_POWERPC_PMAC_PREPARE,
 CPUHP_POWERPC_MMU_CTX_PREPARE,
 CPUHP_XEN_PREPARE,
 CPUHP_XEN_EVTCHN_PREPARE,
 CPUHP_ARM_SHMOBILE_SCU_PREPARE,
 CPUHP_SH_SH3X_PREPARE,
 CPUHP_NET_FLOW_PREPARE,
 CPUHP_TOPOLOGY_PREPARE,
 CPUHP_NET_IUCV_PREPARE,
 CPUHP_ARM_BL_PREPARE,
 CPUHP_TRACE_RB_PREPARE,
 CPUHP_MM_ZS_PREPARE,
 CPUHP_MM_ZSWP_MEM_PREPARE,
 CPUHP_MM_ZSWP_POOL_PREPARE,
 CPUHP_KVM_PPC_BOOK3S_PREPARE,
 CPUHP_ZCOMP_PREPARE,
 CPUHP_TIMERS_PREPARE,
 CPUHP_MIPS_SOC_PREPARE,
 CPUHP_BP_PREPARE_DYN,
 CPUHP_BP_PREPARE_DYN_END = CPUHP_BP_PREPARE_DYN + 20,
 CPUHP_BRINGUP_CPU,
 CPUHP_AP_IDLE_DEAD,
 CPUHP_AP_OFFLINE,
 CPUHP_AP_SCHED_STARTING,
 CPUHP_AP_RCUTREE_DYING,
 CPUHP_AP_CPU_PM_STARTING,
 CPUHP_AP_IRQ_GIC_STARTING,
 CPUHP_AP_IRQ_HIP04_STARTING,
 CPUHP_AP_IRQ_APPLE_AIC_STARTING,
 CPUHP_AP_IRQ_ARMADA_XP_STARTING,
 CPUHP_AP_IRQ_BCM2836_STARTING,
 CPUHP_AP_IRQ_MIPS_GIC_STARTING,
 CPUHP_AP_IRQ_RISCV_STARTING,
 CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING,
 CPUHP_AP_ARM_MVEBU_COHERENCY,
 CPUHP_AP_MICROCODE_LOADER,
 CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 CPUHP_AP_PERF_X86_STARTING,
 CPUHP_AP_PERF_X86_AMD_IBS_STARTING,
 CPUHP_AP_PERF_X86_CQM_STARTING,
 CPUHP_AP_PERF_X86_CSTATE_STARTING,
 CPUHP_AP_PERF_XTENSA_STARTING,
 CPUHP_AP_MIPS_OP_LOONGSON3_STARTING,
 CPUHP_AP_ARM_SDEI_STARTING,
 CPUHP_AP_ARM_VFP_STARTING,
 CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING,
 CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING,
 CPUHP_AP_PERF_ARM_ACPI_STARTING,
 CPUHP_AP_PERF_ARM_STARTING,
 CPUHP_AP_ARM_L2X0_STARTING,
 CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING,
 CPUHP_AP_ARM_ARCH_TIMER_STARTING,
 CPUHP_AP_ARM_GLOBAL_TIMER_STARTING,
 CPUHP_AP_JCORE_TIMER_STARTING,
 CPUHP_AP_ARM_TWD_STARTING,
 CPUHP_AP_QCOM_TIMER_STARTING,
 CPUHP_AP_TEGRA_TIMER_STARTING,
 CPUHP_AP_ARMADA_TIMER_STARTING,
 CPUHP_AP_MARCO_TIMER_STARTING,
 CPUHP_AP_MIPS_GIC_TIMER_STARTING,
 CPUHP_AP_ARC_TIMER_STARTING,
 CPUHP_AP_RISCV_TIMER_STARTING,
 CPUHP_AP_CLINT_TIMER_STARTING,
 CPUHP_AP_CSKY_TIMER_STARTING,
 CPUHP_AP_TI_GP_TIMER_STARTING,
 CPUHP_AP_HYPERV_TIMER_STARTING,
 CPUHP_AP_KVM_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_STARTING,
 CPUHP_AP_KVM_ARM_TIMER_STARTING,

 CPUHP_AP_DUMMY_TIMER_STARTING,
 CPUHP_AP_ARM_XEN_STARTING,
 CPUHP_AP_ARM_CORESIGHT_STARTING,
 CPUHP_AP_ARM_CORESIGHT_CTI_STARTING,
 CPUHP_AP_ARM64_ISNDEP_STARTING,
 CPUHP_AP_SMPCFD_DYING,
 CPUHP_AP_X86_TBOOT_DYING,
 CPUHP_AP_ARM_CACHE_B15_RAC_DYING,
 CPUHP_AP_ONLINE,
 CPUHP_TEARDOWN_CPU,
 CPUHP_AP_ONLINE_IDLE,
 CPUHP_AP_SCHED_WAIT_EMPTY,
 CPUHP_AP_SMPBOOT_THREADS,
 CPUHP_AP_X86_VDSO_VMA_ONLINE,
 CPUHP_AP_IRQ_AFFINITY_ONLINE,
 CPUHP_AP_BLK_MQ_ONLINE,
 CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS,
 CPUHP_AP_X86_INTEL_EPB_ONLINE,
 CPUHP_AP_PERF_ONLINE,
 CPUHP_AP_PERF_X86_ONLINE,
 CPUHP_AP_PERF_X86_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_POWER_ONLINE,
 CPUHP_AP_PERF_X86_RAPL_ONLINE,
 CPUHP_AP_PERF_X86_CQM_ONLINE,
 CPUHP_AP_PERF_X86_CSTATE_ONLINE,
 CPUHP_AP_PERF_X86_IDXD_ONLINE,
 CPUHP_AP_PERF_S390_CF_ONLINE,
 CPUHP_AP_PERF_S390_CFD_ONLINE,
 CPUHP_AP_PERF_S390_SF_ONLINE,
 CPUHP_AP_PERF_ARM_CCI_ONLINE,
 CPUHP_AP_PERF_ARM_CCN_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_L3_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_PA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_SLLC_ONLINE,
 CPUHP_AP_PERF_ARM_L2X0_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE,
 CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE,
 CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE,
 CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE,
 CPUHP_AP_PERF_CSKY_ONLINE,
 CPUHP_AP_WATCHDOG_ONLINE,
 CPUHP_AP_WORKQUEUE_ONLINE,
 CPUHP_AP_RCUTREE_ONLINE,
 CPUHP_AP_BASE_CACHEINFO_ONLINE,
 CPUHP_AP_ONLINE_DYN,
 CPUHP_AP_ONLINE_DYN_END = CPUHP_AP_ONLINE_DYN + 30,
 CPUHP_AP_X86_HPET_ONLINE,
 CPUHP_AP_X86_KVM_CLK_ONLINE,
 CPUHP_AP_DTPM_CPU_ONLINE,
 CPUHP_AP_ACTIVE,
 CPUHP_ONLINE,
};

int __cpuhp_setup_state(enum cpuhp_state state, const char *name, bool invoke,
   int (*startup)(unsigned int cpu),
   int (*teardown)(unsigned int cpu), bool multi_instance);

int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char *name,
       bool invoke,
       int (*startup)(unsigned int cpu),
       int (*teardown)(unsigned int cpu),
       bool multi_instance);
# 227 "include/linux/cpuhotplug.h"
static inline int cpuhp_setup_state(enum cpuhp_state state,
        const char *name,
        int (*startup)(unsigned int cpu),
        int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, true, startup, teardown, false);
}

static inline int cpuhp_setup_state_cpuslocked(enum cpuhp_state state,
            const char *name,
            int (*startup)(unsigned int cpu),
            int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, true, startup,
           teardown, false);
}
# 255 "include/linux/cpuhotplug.h"
static inline int cpuhp_setup_state_nocalls(enum cpuhp_state state,
         const char *name,
         int (*startup)(unsigned int cpu),
         int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, false, startup, teardown,
       false);
}

static inline int cpuhp_setup_state_nocalls_cpuslocked(enum cpuhp_state state,
           const char *name,
           int (*startup)(unsigned int cpu),
           int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, false, startup,
         teardown, false);
}
# 285 "include/linux/cpuhotplug.h"
static inline int cpuhp_setup_state_multi(enum cpuhp_state state,
       const char *name,
       int (*startup)(unsigned int cpu,
        struct hlist_node *node),
       int (*teardown)(unsigned int cpu,
         struct hlist_node *node))
{
 return __cpuhp_setup_state(state, name, false,
       (void *) startup,
       (void *) teardown, true);
}

int __cpuhp_state_add_instance(enum cpuhp_state state, struct hlist_node *node,
          bool invoke);
int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state state,
       struct hlist_node *node, bool invoke);
# 312 "include/linux/cpuhotplug.h"
static inline int cpuhp_state_add_instance(enum cpuhp_state state,
        struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, true);
}
# 327 "include/linux/cpuhotplug.h"
static inline int cpuhp_state_add_instance_nocalls(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, false);
}

static inline int
cpuhp_state_add_instance_nocalls_cpuslocked(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance_cpuslocked(state, node, false);
}

void __cpuhp_remove_state(enum cpuhp_state state, bool invoke);
void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke);
# 350 "include/linux/cpuhotplug.h"
static inline void cpuhp_remove_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, true);
}






static inline void cpuhp_remove_state_nocalls(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

static inline void cpuhp_remove_state_nocalls_cpuslocked(enum cpuhp_state state)
{
 __cpuhp_remove_state_cpuslocked(state, false);
}
# 378 "include/linux/cpuhotplug.h"
static inline void cpuhp_remove_multi_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

int __cpuhp_state_remove_instance(enum cpuhp_state state,
      struct hlist_node *node, bool invoke);
# 395 "include/linux/cpuhotplug.h"
static inline int cpuhp_state_remove_instance(enum cpuhp_state state,
           struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, true);
}
# 409 "include/linux/cpuhotplug.h"
static inline int cpuhp_state_remove_instance_nocalls(enum cpuhp_state state,
            struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, false);
}


void cpuhp_online_idle(enum cpuhp_state state);
# 21 "include/linux/cpu.h" 2

struct device;
struct device_node;
struct attribute_group;

struct cpu {
 int node_id;
 int hotpluggable;
 struct device dev;
};

extern void boot_cpu_init(void);
extern void boot_cpu_hotplug_init(void);
extern void cpu_init(void);
extern void trap_init(void);

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);

extern ssize_t cpu_show_meltdown(struct device *dev,
     struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v1(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v2(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spec_store_bypass(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_l1tf(struct device *dev,
        struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_mds(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_tsx_async_abort(struct device *dev,
     struct device_attribute *attr,
     char *buf);
extern ssize_t cpu_show_itlb_multihit(struct device *dev,
          struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_srbds(struct device *dev, struct device_attribute *attr, char *buf);

extern __attribute__((__format__(printf, 4, 5)))
struct device *cpu_device_create(struct device *parent, void *drvdata,
     const struct attribute_group **groups,
     const char *fmt, ...);

extern void unregister_cpu(struct cpu *cpu);
extern ssize_t arch_cpu_probe(const char *, size_t);
extern ssize_t arch_cpu_release(const char *, size_t);
# 91 "include/linux/cpu.h"
extern bool cpuhp_tasks_frozen;
int add_cpu(unsigned int cpu);
int cpu_device_up(struct device *dev);
void notify_cpu_starting(unsigned int cpu);
extern void cpu_maps_update_begin(void);
extern void cpu_maps_update_done(void);
int bringup_hibernate_cpu(unsigned int sleep_cpu);
void bringup_nonboot_cpus(unsigned int setup_max_cpus);
# 114 "include/linux/cpu.h"
extern struct bus_type cpu_subsys;

extern int lockdep_is_cpus_held(void);


extern void cpus_write_lock(void);
extern void cpus_write_unlock(void);
extern void cpus_read_lock(void);
extern void cpus_read_unlock(void);
extern int cpus_read_trylock(void);
extern void lockdep_assert_cpus_held(void);
extern void cpu_hotplug_disable(void);
extern void cpu_hotplug_enable(void);
void clear_tasks_mm_cpumask(int cpu);
int remove_cpu(unsigned int cpu);
int cpu_device_down(struct device *dev);
extern void smp_shutdown_nonboot_cpus(unsigned int primary_cpu);
# 147 "include/linux/cpu.h"
static inline void cpu_hotplug_begin(void) { cpus_write_lock(); }
static inline void cpu_hotplug_done(void) { cpus_write_unlock(); }
static inline void get_online_cpus(void) { cpus_read_lock(); }
static inline void put_online_cpus(void) { cpus_read_unlock(); }


extern int freeze_secondary_cpus(int primary);
extern void thaw_secondary_cpus(void);

static inline int suspend_disable_secondary_cpus(void)
{
 int cpu = 0;

 if (0)
  cpu = -1;

 return freeze_secondary_cpus(cpu);
}
static inline void suspend_enable_secondary_cpus(void)
{
 return thaw_secondary_cpus();
}







void cpu_startup_entry(enum cpuhp_state state);

void cpu_idle_poll_ctrl(bool enable);




bool cpu_in_idle(unsigned long pc);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);

int cpu_report_state(int cpu);
int cpu_check_up_prepare(int cpu);
void cpu_set_state_online(int cpu);
void play_idle_precise(u64 duration_ns, u64 latency_ns);

static inline void play_idle(unsigned long duration_us)
{
 play_idle_precise(duration_us * 1000L, ((u64)~0ULL));
}


bool cpu_wait_death(unsigned int cpu, int seconds);
bool cpu_report_death(void);
void cpuhp_report_idle_dead(void);




enum cpuhp_smt_control {
 CPU_SMT_ENABLED,
 CPU_SMT_DISABLED,
 CPU_SMT_FORCE_DISABLED,
 CPU_SMT_NOT_SUPPORTED,
 CPU_SMT_NOT_IMPLEMENTED,
};
# 226 "include/linux/cpu.h"
static inline void cpu_smt_disable(bool force) { }
static inline void cpu_smt_check_topology(void) { }
static inline bool cpu_smt_possible(void) { return false; }
static inline int cpuhp_smt_enable(void) { return 0; }
static inline int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval) { return 0; }


extern bool cpu_mitigations_off(void);
extern bool cpu_mitigations_auto_nosmt(void);
# 103 "include/linux/static_call.h" 2
# 238 "include/linux/static_call.h"
static inline int static_call_init(void) { return 0; }

static inline long __static_call_return0(void)
{
 return 0;
}
# 257 "include/linux/static_call.h"
static inline void __static_call_nop(void) { }
# 281 "include/linux/static_call.h"
static inline
void __static_call_update(struct static_call_key *key, void *tramp, void *func)
{
 do { do { } while (0); do { *(volatile typeof(key->func) *)&(key->func) = (func); } while (0); } while (0);
}

static inline int static_call_text_reserved(void *start, void *end)
{
 return 0;
}
# 23 "include/linux/tracepoint.h" 2

struct module;
struct tracepoint;
struct notifier_block;

struct trace_eval_map {
 const char *system;
 const char *eval_string;
 unsigned long eval_value;
};



extern struct srcu_struct tracepoint_srcu;

extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 87 "include/linux/tracepoint.h"
static inline void tracepoint_synchronize_unregister(void)
{ }



extern int syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 104 "include/linux/tracepoint.h"
static inline struct tracepoint *tracepoint_ptr_deref(tracepoint_ptr_t *p)
{
 return offset_to_ptr(p);
}
# 19 "include/trace/events/evl.h" 2
# 1 "include/linux/trace_seq.h" 1




# 1 "include/linux/seq_buf.h" 1
# 19 "include/linux/seq_buf.h"
struct seq_buf {
 char *buffer;
 size_t size;
 size_t len;
 loff_t readpos;
};

static inline void seq_buf_clear(struct seq_buf *s)
{
 s->len = 0;
 s->readpos = 0;
}

static inline void
seq_buf_init(struct seq_buf *s, char *buf, unsigned int size)
{
 s->buffer = buf;
 s->size = size;
 seq_buf_clear(s);
}





static inline bool
seq_buf_has_overflowed(struct seq_buf *s)
{
 return s->len > s->size;
}

static inline void
seq_buf_set_overflow(struct seq_buf *s)
{
 s->len = s->size + 1;
}




static inline unsigned int
seq_buf_buffer_left(struct seq_buf *s)
{
 if (seq_buf_has_overflowed(s))
  return 0;

 return s->size - s->len;
}


static inline unsigned int seq_buf_used(struct seq_buf *s)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(s->len) *)1 == (typeof(s->size) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(s->len) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(s->size) * 0l)) : (int *)8))))), ((s->len) < (s->size) ? (s->len) : (s->size)), ({ typeof(s->len) __UNIQUE_ID(__x) = (s->len); typeof(s->size) __UNIQUE_ID(__y) = (s->size); ((__UNIQUE_ID(__x)) < (__UNIQUE_ID(__y)) ? (__UNIQUE_ID(__x)) : (__UNIQUE_ID(__y))); }));
}
# 88 "include/linux/seq_buf.h"
static inline void seq_buf_terminate(struct seq_buf *s)
{
 if (({ int __ret_warn_on = !!(s->size == 0); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/seq_buf.h\"; .popsection; .long 14472b - 14470b; .short 90; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); }))
  return;

 if (seq_buf_buffer_left(s))
  s->buffer[s->len] = 0;
 else
  s->buffer[s->size - 1] = 0;
}
# 107 "include/linux/seq_buf.h"
static inline size_t seq_buf_get_buf(struct seq_buf *s, char **bufp)
{
 ({ int __ret_warn_on = !!(s->len > s->size + 1); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/seq_buf.h\"; .popsection; .long 14472b - 14470b; .short 109; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });

 if (s->len < s->size) {
  *bufp = s->buffer + s->len;
  return s->size - s->len;
 }

 *bufp = 
# 116 "include/linux/seq_buf.h" 3 4
        ((void *)0)
# 116 "include/linux/seq_buf.h"
            ;
 return 0;
}
# 129 "include/linux/seq_buf.h"
static inline void seq_buf_commit(struct seq_buf *s, int num)
{
 if (num < 0) {
  seq_buf_set_overflow(s);
 } else {

  do { if (unlikely(s->len + num > s->size)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/linux/seq_buf.h\"; .popsection; .long 14472b - 14470b; .short 135; .short 0; .popsection; 14471: brk 0x800");; unreachable(); } while (0); } while (0);
  s->len += num;
 }
}

extern __attribute__((__format__(printf, 2, 3)))
int seq_buf_printf(struct seq_buf *s, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0)))
int seq_buf_vprintf(struct seq_buf *s, const char *fmt, va_list args);
extern int seq_buf_print_seq(struct seq_file *m, struct seq_buf *s);
extern int seq_buf_to_user(struct seq_buf *s, char *ubuf,
      int cnt);
extern int seq_buf_puts(struct seq_buf *s, const char *str);
extern int seq_buf_putc(struct seq_buf *s, unsigned char c);
extern int seq_buf_putmem(struct seq_buf *s, const void *mem, unsigned int len);
extern int seq_buf_putmem_hex(struct seq_buf *s, const void *mem,
         unsigned int len);
extern int seq_buf_path(struct seq_buf *s, const struct path *path, const char *esc);
extern int seq_buf_hex_dump(struct seq_buf *s, const char *prefix_str,
       int prefix_type, int rowsize, int groupsize,
       const void *buf, size_t len, bool ascii);
# 6 "include/linux/trace_seq.h" 2
# 14 "include/linux/trace_seq.h"
struct trace_seq {
 char buffer[((1UL) << 12)];
 struct seq_buf seq;
 int full;
};

static inline void
trace_seq_init(struct trace_seq *s)
{
 seq_buf_init(&s->seq, s->buffer, ((1UL) << 12));
 s->full = 0;
}
# 40 "include/linux/trace_seq.h"
static inline int trace_seq_used(struct trace_seq *s)
{
 return seq_buf_used(&s->seq);
}
# 54 "include/linux/trace_seq.h"
static inline char *
trace_seq_buffer_ptr(struct trace_seq *s)
{
 return s->buffer + seq_buf_used(&s->seq);
}
# 67 "include/linux/trace_seq.h"
static inline bool trace_seq_has_overflowed(struct trace_seq *s)
{
 return s->full || seq_buf_has_overflowed(&s->seq);
}
# 100 "include/linux/trace_seq.h"
static inline void trace_seq_printf(struct trace_seq *s, const char *fmt, ...)
{
}
static inline void
trace_seq_bprintf(struct trace_seq *s, const char *fmt, const u32 *binary)
{
}

static inline void
trace_seq_bitmask(struct trace_seq *s, const unsigned long *maskp,
    int nmaskbits)
{
}

static inline int trace_print_seq(struct seq_file *m, struct trace_seq *s)
{
 return 0;
}
static inline int trace_seq_to_user(struct trace_seq *s, char *ubuf,
        int cnt)
{
 return 0;
}
static inline void trace_seq_puts(struct trace_seq *s, const char *str)
{
}
static inline void trace_seq_putc(struct trace_seq *s, unsigned char c)
{
}
static inline void
trace_seq_putmem(struct trace_seq *s, const void *mem, unsigned int len)
{
}
static inline void trace_seq_putmem_hex(struct trace_seq *s, const void *mem,
           unsigned int len)
{
}
static inline int trace_seq_path(struct trace_seq *s, const struct path *path)
{
 return 0;
}
# 20 "include/trace/events/evl.h" 2

# 1 "include/evl/wait.h" 1
# 19 "include/evl/wait.h"
struct evl_wait_channel {
 int (*reorder_wait)(struct evl_thread *waiter,
   struct evl_thread *originator);
 int (*follow_depend)(struct evl_wait_channel *wchan,
   struct evl_thread *originator);
 struct list_head wait_list;
 const char *name;
};

struct evl_wait_queue {
 int flags;
 struct evl_clock *clock;
 struct evl_wait_channel wchan;
 hard_spinlock_t lock;
};
# 85 "include/evl/wait.h"
void evl_add_wait_queue(struct evl_wait_queue *wq,
   ktime_t timeout,
   enum evl_tmode timeout_mode);

int evl_wait_schedule(struct evl_wait_queue *wq);

static inline bool evl_wait_active(struct evl_wait_queue *wq)
{
 ({ int __ret_warn_on = !!(0 && (!(queued_spin_is_locked(&((&wq->lock))->raw_lock) && native_irqs_disabled()))); if (unlikely(__ret_warn_on)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"include/evl/wait.h\"; .popsection; .long 14472b - 14470b; .short 93; .short (1 << 0)|((1 << 1) | ((9) << 8)); .popsection; 14471: brk 0x800");; unlikely(__ret_warn_on); });
 return !list_empty(&wq->wchan.wait_list);
}

void __evl_init_wait(struct evl_wait_queue *wq,
  struct evl_clock *clock,
  int flags,
  const char *name,
  struct lock_class_key *key);







void evl_destroy_wait(struct evl_wait_queue *wq);

struct evl_thread *evl_wait_head(struct evl_wait_queue *wq);

void evl_flush_wait_locked(struct evl_wait_queue *wq,
   int reason);

void evl_flush_wait(struct evl_wait_queue *wq,
  int reason);

struct evl_thread *evl_wake_up(struct evl_wait_queue *wq,
   struct evl_thread *waiter,
   int reason);

static inline
struct evl_thread *evl_wake_up_head(struct evl_wait_queue *wq)
{
 return evl_wake_up(wq, 
# 126 "include/evl/wait.h" 3 4
                       ((void *)0)
# 126 "include/evl/wait.h"
                           , 0);
}

int evl_reorder_wait(struct evl_thread *waiter,
  struct evl_thread *originator);

int evl_follow_wait_depend(struct evl_wait_channel *wchan,
   struct evl_thread *originator);
# 22 "include/trace/events/evl.h" 2

struct evl_rq;
struct evl_thread;
struct evl_sched_attrs;
struct evl_init_thread_attr;
struct evl_mutex;
struct evl_clock;


# 48 "include/trace/events/evl.h"
 ;


# 67 "include/trace/events/evl.h"
 ;


# 82 "include/trace/events/evl.h"
 ;


# 97 "include/trace/events/evl.h"
 ;


# 112 "include/trace/events/evl.h"
 ;








# 133 "include/trace/events/evl.h"
 ;


# 148 "include/trace/events/evl.h"
 ;
# 158 "include/trace/events/evl.h"
const char *evl_trace_sched_attrs(struct trace_seq *seq,
      struct evl_sched_attrs *attrs);


# 186 "include/trace/events/evl.h"
 ;


# 206 "include/trace/events/evl.h"
 ;


# 218 "include/trace/events/evl.h"
 ;


# 236 "include/trace/events/evl.h"
 ;

static inline void trace_evl_schedule(struct evl_rq *rq) { } static inline void trace_evl_schedule_rcuidle(struct evl_rq *rq) { } static inline int register_trace_evl_schedule(void (*probe)(void *__data, struct evl_rq *rq), void *data) { return -
# 238 "include/trace/events/evl.h" 3 4
38
# 238 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_schedule(void (*probe)(void *__data, struct evl_rq *rq), void *data) { return -
# 238 "include/trace/events/evl.h" 3 4
38
# 238 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_schedule(void (*cb)(void *__data, struct evl_rq *rq)) { } static inline bool trace_evl_schedule_enabled(void) { return false; }


 ;

static inline void trace_evl_reschedule_ipi(struct evl_rq *rq) { } static inline void trace_evl_reschedule_ipi_rcuidle(struct evl_rq *rq) { } static inline int register_trace_evl_reschedule_ipi(void (*probe)(void *__data, struct evl_rq *rq), void *data) { return -
# 243 "include/trace/events/evl.h" 3 4
38
# 243 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_reschedule_ipi(void (*probe)(void *__data, struct evl_rq *rq), void *data) { return -
# 243 "include/trace/events/evl.h" 3 4
38
# 243 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_reschedule_ipi(void (*cb)(void *__data, struct evl_rq *rq)) { } static inline bool trace_evl_reschedule_ipi_enabled(void) { return false; }


 ;

static inline void trace_evl_pick_thread(struct evl_thread *next) { } static inline void trace_evl_pick_thread_rcuidle(struct evl_thread *next) { } static inline int register_trace_evl_pick_thread(void (*probe)(void *__data, struct evl_thread *next), void *data) { return -
# 248 "include/trace/events/evl.h" 3 4
38
# 248 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_pick_thread(void (*probe)(void *__data, struct evl_thread *next), void *data) { return -
# 248 "include/trace/events/evl.h" 3 4
38
# 248 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_pick_thread(void (*cb)(void *__data, struct evl_thread *next)) { } static inline bool trace_evl_pick_thread_enabled(void) { return false; }
# 264 "include/trace/events/evl.h"
 ;

static inline void trace_evl_switch_context(struct evl_thread *prev, struct evl_thread *next) { } static inline void trace_evl_switch_context_rcuidle(struct evl_thread *prev, struct evl_thread *next) { } static inline int register_trace_evl_switch_context(void (*probe)(void *__data, struct evl_thread *prev, struct evl_thread *next), void *data) { return -
# 266 "include/trace/events/evl.h" 3 4
38
# 266 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_switch_context(void (*probe)(void *__data, struct evl_thread *prev, struct evl_thread *next), void *data) { return -
# 266 "include/trace/events/evl.h" 3 4
38
# 266 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_switch_context(void (*cb)(void *__data, struct evl_thread *prev, struct evl_thread *next)) { } static inline bool trace_evl_switch_context_enabled(void) { return false; }
# 294 "include/trace/events/evl.h"
 ;

static inline void trace_evl_switch_tail(struct evl_thread *curr) { } static inline void trace_evl_switch_tail_rcuidle(struct evl_thread *curr) { } static inline int register_trace_evl_switch_tail(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 296 "include/trace/events/evl.h" 3 4
38
# 296 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_switch_tail(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 296 "include/trace/events/evl.h" 3 4
38
# 296 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_switch_tail(void (*cb)(void *__data, struct evl_thread *curr)) { } static inline bool trace_evl_switch_tail_enabled(void) { return false; }
# 312 "include/trace/events/evl.h"
 ;

static inline void trace_evl_init_thread(struct evl_thread *thread, const struct evl_init_thread_attr *iattr, int status) { } static inline void trace_evl_init_thread_rcuidle(struct evl_thread *thread, const struct evl_init_thread_attr *iattr, int status) { } static inline int register_trace_evl_init_thread(void (*probe)(void *__data, struct evl_thread *thread, const struct evl_init_thread_attr *iattr, int status), void *data) { return -
# 314 "include/trace/events/evl.h" 3 4
38
# 314 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_init_thread(void (*probe)(void *__data, struct evl_thread *thread, const struct evl_init_thread_attr *iattr, int status), void *data) { return -
# 314 "include/trace/events/evl.h" 3 4
38
# 314 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_init_thread(void (*cb)(void *__data, struct evl_thread *thread, const struct evl_init_thread_attr *iattr, int status)) { } static inline bool trace_evl_init_thread_enabled(void) { return false; }
# 341 "include/trace/events/evl.h"
 ;

static inline void trace_evl_sleep_on(ktime_t timeout, enum evl_tmode timeout_mode, struct evl_clock *clock, struct evl_wait_channel *wchan) { } static inline void trace_evl_sleep_on_rcuidle(ktime_t timeout, enum evl_tmode timeout_mode, struct evl_clock *clock, struct evl_wait_channel *wchan) { } static inline int register_trace_evl_sleep_on(void (*probe)(void *__data, ktime_t timeout, enum evl_tmode timeout_mode, struct evl_clock *clock, struct evl_wait_channel *wchan), void *data) { return -
# 343 "include/trace/events/evl.h" 3 4
38
# 343 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_sleep_on(void (*probe)(void *__data, ktime_t timeout, enum evl_tmode timeout_mode, struct evl_clock *clock, struct evl_wait_channel *wchan), void *data) { return -
# 343 "include/trace/events/evl.h" 3 4
38
# 343 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_sleep_on(void (*cb)(void *__data, ktime_t timeout, enum evl_tmode timeout_mode, struct evl_clock *clock, struct evl_wait_channel *wchan)) { } static inline bool trace_evl_sleep_on_enabled(void) { return false; }
# 373 "include/trace/events/evl.h"
 ;

static inline void trace_evl_wakeup_thread(struct evl_thread *thread, int mask, int info) { } static inline void trace_evl_wakeup_thread_rcuidle(struct evl_thread *thread, int mask, int info) { } static inline int register_trace_evl_wakeup_thread(void (*probe)(void *__data, struct evl_thread *thread, int mask, int info), void *data) { return -
# 375 "include/trace/events/evl.h" 3 4
38
# 375 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_wakeup_thread(void (*probe)(void *__data, struct evl_thread *thread, int mask, int info), void *data) { return -
# 375 "include/trace/events/evl.h" 3 4
38
# 375 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_wakeup_thread(void (*cb)(void *__data, struct evl_thread *thread, int mask, int info)) { } static inline bool trace_evl_wakeup_thread_enabled(void) { return false; }
# 396 "include/trace/events/evl.h"
 ;

static inline void trace_evl_hold_thread(struct evl_thread *thread, unsigned long mask) { } static inline void trace_evl_hold_thread_rcuidle(struct evl_thread *thread, unsigned long mask) { } static inline int register_trace_evl_hold_thread(void (*probe)(void *__data, struct evl_thread *thread, unsigned long mask), void *data) { return -
# 398 "include/trace/events/evl.h" 3 4
38
# 398 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_hold_thread(void (*probe)(void *__data, struct evl_thread *thread, unsigned long mask), void *data) { return -
# 398 "include/trace/events/evl.h" 3 4
38
# 398 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_hold_thread(void (*cb)(void *__data, struct evl_thread *thread, unsigned long mask)) { } static inline bool trace_evl_hold_thread_enabled(void) { return false; }
# 416 "include/trace/events/evl.h"
 ;

static inline void trace_evl_release_thread(struct evl_thread *thread, int mask, int info) { } static inline void trace_evl_release_thread_rcuidle(struct evl_thread *thread, int mask, int info) { } static inline int register_trace_evl_release_thread(void (*probe)(void *__data, struct evl_thread *thread, int mask, int info), void *data) { return -
# 418 "include/trace/events/evl.h" 3 4
38
# 418 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_release_thread(void (*probe)(void *__data, struct evl_thread *thread, int mask, int info), void *data) { return -
# 418 "include/trace/events/evl.h" 3 4
38
# 418 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_release_thread(void (*cb)(void *__data, struct evl_thread *thread, int mask, int info)) { } static inline bool trace_evl_release_thread_enabled(void) { return false; }
# 439 "include/trace/events/evl.h"
 ;

static inline void trace_evl_thread_fault(int trapnr, struct pt_regs *regs) { } static inline void trace_evl_thread_fault_rcuidle(int trapnr, struct pt_regs *regs) { } static inline int register_trace_evl_thread_fault(void (*probe)(void *__data, int trapnr, struct pt_regs *regs), void *data) { return -
# 441 "include/trace/events/evl.h" 3 4
38
# 441 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_fault(void (*probe)(void *__data, int trapnr, struct pt_regs *regs), void *data) { return -
# 441 "include/trace/events/evl.h" 3 4
38
# 441 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_fault(void (*cb)(void *__data, int trapnr, struct pt_regs *regs)) { } static inline bool trace_evl_thread_fault_enabled(void) { return false; }
# 457 "include/trace/events/evl.h"
 ;

static inline void trace_evl_thread_set_current_prio(struct evl_thread *thread) { } static inline void trace_evl_thread_set_current_prio_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_set_current_prio(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 459 "include/trace/events/evl.h" 3 4
38
# 459 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_set_current_prio(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 459 "include/trace/events/evl.h" 3 4
38
# 459 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_set_current_prio(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_set_current_prio_enabled(void) { return false; }
# 477 "include/trace/events/evl.h"
 ;

static inline void trace_evl_thread_cancel(struct evl_thread *thread) { } static inline void trace_evl_thread_cancel_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_cancel(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 479 "include/trace/events/evl.h" 3 4
38
# 479 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_cancel(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 479 "include/trace/events/evl.h" 3 4
38
# 479 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_cancel(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_cancel_enabled(void) { return false; }


 ;

static inline void trace_evl_thread_join(struct evl_thread *thread) { } static inline void trace_evl_thread_join_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_join(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 484 "include/trace/events/evl.h" 3 4
38
# 484 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_join(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 484 "include/trace/events/evl.h" 3 4
38
# 484 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_join(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_join_enabled(void) { return false; }


 ;

static inline void trace_evl_unblock_thread(struct evl_thread *thread) { } static inline void trace_evl_unblock_thread_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_unblock_thread(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 489 "include/trace/events/evl.h" 3 4
38
# 489 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_unblock_thread(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 489 "include/trace/events/evl.h" 3 4
38
# 489 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_unblock_thread(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_unblock_thread_enabled(void) { return false; }


 ;

static inline void trace_evl_thread_wait_period(struct evl_thread *thread) { } static inline void trace_evl_thread_wait_period_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_wait_period(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 494 "include/trace/events/evl.h" 3 4
38
# 494 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_wait_period(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 494 "include/trace/events/evl.h" 3 4
38
# 494 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_wait_period(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_wait_period_enabled(void) { return false; }


 ;

static inline void trace_evl_thread_missed_period(struct evl_thread *thread) { } static inline void trace_evl_thread_missed_period_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_missed_period(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 499 "include/trace/events/evl.h" 3 4
38
# 499 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_missed_period(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 499 "include/trace/events/evl.h" 3 4
38
# 499 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_missed_period(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_missed_period_enabled(void) { return false; }


 ;

static inline void trace_evl_thread_migrate(struct evl_thread *thread, unsigned int cpu) { } static inline void trace_evl_thread_migrate_rcuidle(struct evl_thread *thread, unsigned int cpu) { } static inline int register_trace_evl_thread_migrate(void (*probe)(void *__data, struct evl_thread *thread, unsigned int cpu), void *data) { return -
# 504 "include/trace/events/evl.h" 3 4
38
# 504 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_migrate(void (*probe)(void *__data, struct evl_thread *thread, unsigned int cpu), void *data) { return -
# 504 "include/trace/events/evl.h" 3 4
38
# 504 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_migrate(void (*cb)(void *__data, struct evl_thread *thread, unsigned int cpu)) { } static inline bool trace_evl_thread_migrate_enabled(void) { return false; }
# 522 "include/trace/events/evl.h"
 ;

static inline void trace_evl_watchdog_signal(struct evl_thread *curr) { } static inline void trace_evl_watchdog_signal_rcuidle(struct evl_thread *curr) { } static inline int register_trace_evl_watchdog_signal(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 524 "include/trace/events/evl.h" 3 4
38
# 524 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_watchdog_signal(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 524 "include/trace/events/evl.h" 3 4
38
# 524 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_watchdog_signal(void (*cb)(void *__data, struct evl_thread *curr)) { } static inline bool trace_evl_watchdog_signal_enabled(void) { return false; }


 ;

static inline void trace_evl_switch_oob(struct evl_thread *curr) { } static inline void trace_evl_switch_oob_rcuidle(struct evl_thread *curr) { } static inline int register_trace_evl_switch_oob(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 529 "include/trace/events/evl.h" 3 4
38
# 529 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_switch_oob(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 529 "include/trace/events/evl.h" 3 4
38
# 529 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_switch_oob(void (*cb)(void *__data, struct evl_thread *curr)) { } static inline bool trace_evl_switch_oob_enabled(void) { return false; }


 ;

static inline void trace_evl_switched_oob(struct evl_thread *curr) { } static inline void trace_evl_switched_oob_rcuidle(struct evl_thread *curr) { } static inline int register_trace_evl_switched_oob(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 534 "include/trace/events/evl.h" 3 4
38
# 534 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_switched_oob(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 534 "include/trace/events/evl.h" 3 4
38
# 534 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_switched_oob(void (*cb)(void *__data, struct evl_thread *curr)) { } static inline bool trace_evl_switched_oob_enabled(void) { return false; }


 ;
# 552 "include/trace/events/evl.h"
static inline void trace_evl_switch_inband(int cause) { } static inline void trace_evl_switch_inband_rcuidle(int cause) { } static inline int register_trace_evl_switch_inband(void (*probe)(void *__data, int cause), void *data) { return -
# 552 "include/trace/events/evl.h" 3 4
38
# 552 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_switch_inband(void (*probe)(void *__data, int cause), void *data) { return -
# 552 "include/trace/events/evl.h" 3 4
38
# 552 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_switch_inband(void (*cb)(void *__data, int cause)) { } static inline bool trace_evl_switch_inband_enabled(void) { return false; }
# 565 "include/trace/events/evl.h"
 ;

static inline void trace_evl_switched_inband(struct evl_thread *curr) { } static inline void trace_evl_switched_inband_rcuidle(struct evl_thread *curr) { } static inline int register_trace_evl_switched_inband(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 567 "include/trace/events/evl.h" 3 4
38
# 567 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_switched_inband(void (*probe)(void *__data, struct evl_thread *curr), void *data) { return -
# 567 "include/trace/events/evl.h" 3 4
38
# 567 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_switched_inband(void (*cb)(void *__data, struct evl_thread *curr)) { } static inline bool trace_evl_switched_inband_enabled(void) { return false; }


 ;

static inline void trace_evl_kthread_entry(struct evl_thread *thread) { } static inline void trace_evl_kthread_entry_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_kthread_entry(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 572 "include/trace/events/evl.h" 3 4
38
# 572 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_kthread_entry(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 572 "include/trace/events/evl.h" 3 4
38
# 572 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_kthread_entry(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_kthread_entry_enabled(void) { return false; }


 ;

static inline void trace_evl_thread_map(struct evl_thread *thread) { } static inline void trace_evl_thread_map_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_map(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 577 "include/trace/events/evl.h" 3 4
38
# 577 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_map(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 577 "include/trace/events/evl.h" 3 4
38
# 577 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_map(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_map_enabled(void) { return false; }
# 595 "include/trace/events/evl.h"
 ;

static inline void trace_evl_thread_unmap(struct evl_thread *thread) { } static inline void trace_evl_thread_unmap_rcuidle(struct evl_thread *thread) { } static inline int register_trace_evl_thread_unmap(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 597 "include/trace/events/evl.h" 3 4
38
# 597 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_unmap(void (*probe)(void *__data, struct evl_thread *thread), void *data) { return -
# 597 "include/trace/events/evl.h" 3 4
38
# 597 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_unmap(void (*cb)(void *__data, struct evl_thread *thread)) { } static inline bool trace_evl_thread_unmap_enabled(void) { return false; }


 ;

static inline void trace_evl_inband_wakeup(struct task_struct *task) { } static inline void trace_evl_inband_wakeup_rcuidle(struct task_struct *task) { } static inline int register_trace_evl_inband_wakeup(void (*probe)(void *__data, struct task_struct *task), void *data) { return -
# 602 "include/trace/events/evl.h" 3 4
38
# 602 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_inband_wakeup(void (*probe)(void *__data, struct task_struct *task), void *data) { return -
# 602 "include/trace/events/evl.h" 3 4
38
# 602 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_inband_wakeup(void (*cb)(void *__data, struct task_struct *task)) { } static inline bool trace_evl_inband_wakeup_enabled(void) { return false; }
# 618 "include/trace/events/evl.h"
 ;

static inline void trace_evl_inband_signal(struct evl_thread *thread, int sig, int sigval) { } static inline void trace_evl_inband_signal_rcuidle(struct evl_thread *thread, int sig, int sigval) { } static inline int register_trace_evl_inband_signal(void (*probe)(void *__data, struct evl_thread *thread, int sig, int sigval), void *data) { return -
# 620 "include/trace/events/evl.h" 3 4
38
# 620 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_inband_signal(void (*probe)(void *__data, struct evl_thread *thread, int sig, int sigval), void *data) { return -
# 620 "include/trace/events/evl.h" 3 4
38
# 620 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_inband_signal(void (*cb)(void *__data, struct evl_thread *thread, int sig, int sigval)) { } static inline bool trace_evl_inband_signal_enabled(void) { return false; }
# 641 "include/trace/events/evl.h"
 ;

static inline void trace_evl_timer_stop(struct evl_timer *timer) { } static inline void trace_evl_timer_stop_rcuidle(struct evl_timer *timer) { } static inline int register_trace_evl_timer_stop(void (*probe)(void *__data, struct evl_timer *timer), void *data) { return -
# 643 "include/trace/events/evl.h" 3 4
38
# 643 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_timer_stop(void (*probe)(void *__data, struct evl_timer *timer), void *data) { return -
# 643 "include/trace/events/evl.h" 3 4
38
# 643 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_timer_stop(void (*cb)(void *__data, struct evl_timer *timer)) { } static inline bool trace_evl_timer_stop_enabled(void) { return false; }


 ;

static inline void trace_evl_timer_expire(struct evl_timer *timer) { } static inline void trace_evl_timer_expire_rcuidle(struct evl_timer *timer) { } static inline int register_trace_evl_timer_expire(void (*probe)(void *__data, struct evl_timer *timer), void *data) { return -
# 648 "include/trace/events/evl.h" 3 4
38
# 648 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_timer_expire(void (*probe)(void *__data, struct evl_timer *timer), void *data) { return -
# 648 "include/trace/events/evl.h" 3 4
38
# 648 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_timer_expire(void (*cb)(void *__data, struct evl_timer *timer)) { } static inline bool trace_evl_timer_expire_enabled(void) { return false; }


 ;






static inline void trace_evl_timer_start(struct evl_timer *timer, ktime_t value, ktime_t interval) { } static inline void trace_evl_timer_start_rcuidle(struct evl_timer *timer, ktime_t value, ktime_t interval) { } static inline int register_trace_evl_timer_start(void (*probe)(void *__data, struct evl_timer *timer, ktime_t value, ktime_t interval), void *data) { return -
# 658 "include/trace/events/evl.h" 3 4
38
# 658 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_timer_start(void (*probe)(void *__data, struct evl_timer *timer, ktime_t value, ktime_t interval), void *data) { return -
# 658 "include/trace/events/evl.h" 3 4
38
# 658 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_timer_start(void (*cb)(void *__data, struct evl_timer *timer, ktime_t value, ktime_t interval)) { } static inline bool trace_evl_timer_start_enabled(void) { return false; }
# 678 "include/trace/events/evl.h"
 ;

static inline void trace_evl_timer_move(struct evl_timer *timer, struct evl_clock *clock, unsigned int cpu) { } static inline void trace_evl_timer_move_rcuidle(struct evl_timer *timer, struct evl_clock *clock, unsigned int cpu) { } static inline int register_trace_evl_timer_move(void (*probe)(void *__data, struct evl_timer *timer, struct evl_clock *clock, unsigned int cpu), void *data) { return -
# 680 "include/trace/events/evl.h" 3 4
38
# 680 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_timer_move(void (*probe)(void *__data, struct evl_timer *timer, struct evl_clock *clock, unsigned int cpu), void *data) { return -
# 680 "include/trace/events/evl.h" 3 4
38
# 680 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_timer_move(void (*cb)(void *__data, struct evl_timer *timer, struct evl_clock *clock, unsigned int cpu)) { } static inline bool trace_evl_timer_move_enabled(void) { return false; }
# 702 "include/trace/events/evl.h"
 ;

static inline void trace_evl_timer_shot(struct evl_timer *timer, s64 delta, u64 cycles) { } static inline void trace_evl_timer_shot_rcuidle(struct evl_timer *timer, s64 delta, u64 cycles) { } static inline int register_trace_evl_timer_shot(void (*probe)(void *__data, struct evl_timer *timer, s64 delta, u64 cycles), void *data) { return -
# 704 "include/trace/events/evl.h" 3 4
38
# 704 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_timer_shot(void (*probe)(void *__data, struct evl_timer *timer, s64 delta, u64 cycles), void *data) { return -
# 704 "include/trace/events/evl.h" 3 4
38
# 704 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_timer_shot(void (*cb)(void *__data, struct evl_timer *timer, s64 delta, u64 cycles)) { } static inline bool trace_evl_timer_shot_enabled(void) { return false; }
# 729 "include/trace/events/evl.h"
 ;

static inline void trace_evl_wait(struct evl_wait_queue *wq) { } static inline void trace_evl_wait_rcuidle(struct evl_wait_queue *wq) { } static inline int register_trace_evl_wait(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 731 "include/trace/events/evl.h" 3 4
38
# 731 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_wait(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 731 "include/trace/events/evl.h" 3 4
38
# 731 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_wait(void (*cb)(void *__data, struct evl_wait_queue *wq)) { } static inline bool trace_evl_wait_enabled(void) { return false; }


 ;

static inline void trace_evl_wake_up(struct evl_wait_queue *wq) { } static inline void trace_evl_wake_up_rcuidle(struct evl_wait_queue *wq) { } static inline int register_trace_evl_wake_up(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 736 "include/trace/events/evl.h" 3 4
38
# 736 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_wake_up(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 736 "include/trace/events/evl.h" 3 4
38
# 736 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_wake_up(void (*cb)(void *__data, struct evl_wait_queue *wq)) { } static inline bool trace_evl_wake_up_enabled(void) { return false; }


 ;

static inline void trace_evl_flush_wait(struct evl_wait_queue *wq) { } static inline void trace_evl_flush_wait_rcuidle(struct evl_wait_queue *wq) { } static inline int register_trace_evl_flush_wait(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 741 "include/trace/events/evl.h" 3 4
38
# 741 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_flush_wait(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 741 "include/trace/events/evl.h" 3 4
38
# 741 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_flush_wait(void (*cb)(void *__data, struct evl_wait_queue *wq)) { } static inline bool trace_evl_flush_wait_enabled(void) { return false; }


 ;

static inline void trace_evl_finish_wait(struct evl_wait_queue *wq) { } static inline void trace_evl_finish_wait_rcuidle(struct evl_wait_queue *wq) { } static inline int register_trace_evl_finish_wait(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 746 "include/trace/events/evl.h" 3 4
38
# 746 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_finish_wait(void (*probe)(void *__data, struct evl_wait_queue *wq), void *data) { return -
# 746 "include/trace/events/evl.h" 3 4
38
# 746 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_finish_wait(void (*cb)(void *__data, struct evl_wait_queue *wq)) { } static inline bool trace_evl_finish_wait_enabled(void) { return false; }


 ;

static inline void trace_evl_mutex_trylock(struct evl_mutex *mutex) { } static inline void trace_evl_mutex_trylock_rcuidle(struct evl_mutex *mutex) { } static inline int register_trace_evl_mutex_trylock(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 751 "include/trace/events/evl.h" 3 4
38
# 751 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_mutex_trylock(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 751 "include/trace/events/evl.h" 3 4
38
# 751 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_mutex_trylock(void (*cb)(void *__data, struct evl_mutex *mutex)) { } static inline bool trace_evl_mutex_trylock_enabled(void) { return false; }


 ;

static inline void trace_evl_mutex_lock(struct evl_mutex *mutex) { } static inline void trace_evl_mutex_lock_rcuidle(struct evl_mutex *mutex) { } static inline int register_trace_evl_mutex_lock(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 756 "include/trace/events/evl.h" 3 4
38
# 756 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_mutex_lock(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 756 "include/trace/events/evl.h" 3 4
38
# 756 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_mutex_lock(void (*cb)(void *__data, struct evl_mutex *mutex)) { } static inline bool trace_evl_mutex_lock_enabled(void) { return false; }


 ;

static inline void trace_evl_mutex_unlock(struct evl_mutex *mutex) { } static inline void trace_evl_mutex_unlock_rcuidle(struct evl_mutex *mutex) { } static inline int register_trace_evl_mutex_unlock(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 761 "include/trace/events/evl.h" 3 4
38
# 761 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_mutex_unlock(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 761 "include/trace/events/evl.h" 3 4
38
# 761 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_mutex_unlock(void (*cb)(void *__data, struct evl_mutex *mutex)) { } static inline bool trace_evl_mutex_unlock_enabled(void) { return false; }


 ;

static inline void trace_evl_mutex_destroy(struct evl_mutex *mutex) { } static inline void trace_evl_mutex_destroy_rcuidle(struct evl_mutex *mutex) { } static inline int register_trace_evl_mutex_destroy(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 766 "include/trace/events/evl.h" 3 4
38
# 766 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_mutex_destroy(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 766 "include/trace/events/evl.h" 3 4
38
# 766 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_mutex_destroy(void (*cb)(void *__data, struct evl_mutex *mutex)) { } static inline bool trace_evl_mutex_destroy_enabled(void) { return false; }


 ;

static inline void trace_evl_mutex_flush(struct evl_mutex *mutex) { } static inline void trace_evl_mutex_flush_rcuidle(struct evl_mutex *mutex) { } static inline int register_trace_evl_mutex_flush(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 771 "include/trace/events/evl.h" 3 4
38
# 771 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_mutex_flush(void (*probe)(void *__data, struct evl_mutex *mutex), void *data) { return -
# 771 "include/trace/events/evl.h" 3 4
38
# 771 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_mutex_flush(void (*cb)(void *__data, struct evl_mutex *mutex)) { } static inline bool trace_evl_mutex_flush_enabled(void) { return false; }


 ;
# 789 "include/trace/events/evl.h"
static inline void trace_evl_oob_sysentry(unsigned int nr) { } static inline void trace_evl_oob_sysentry_rcuidle(unsigned int nr) { } static inline int register_trace_evl_oob_sysentry(void (*probe)(void *__data, unsigned int nr), void *data) { return -
# 789 "include/trace/events/evl.h" 3 4
38
# 789 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_oob_sysentry(void (*probe)(void *__data, unsigned int nr), void *data) { return -
# 789 "include/trace/events/evl.h" 3 4
38
# 789 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_oob_sysentry(void (*cb)(void *__data, unsigned int nr)) { } static inline bool trace_evl_oob_sysentry_enabled(void) { return false; }


 ;

static inline void trace_evl_oob_sysexit(long result) { } static inline void trace_evl_oob_sysexit_rcuidle(long result) { } static inline int register_trace_evl_oob_sysexit(void (*probe)(void *__data, long result), void *data) { return -
# 794 "include/trace/events/evl.h" 3 4
38
# 794 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_oob_sysexit(void (*probe)(void *__data, long result), void *data) { return -
# 794 "include/trace/events/evl.h" 3 4
38
# 794 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_oob_sysexit(void (*cb)(void *__data, long result)) { } static inline bool trace_evl_oob_sysexit_enabled(void) { return false; }


 ;

static inline void trace_evl_inband_sysentry(unsigned int nr) { } static inline void trace_evl_inband_sysentry_rcuidle(unsigned int nr) { } static inline int register_trace_evl_inband_sysentry(void (*probe)(void *__data, unsigned int nr), void *data) { return -
# 799 "include/trace/events/evl.h" 3 4
38
# 799 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_inband_sysentry(void (*probe)(void *__data, unsigned int nr), void *data) { return -
# 799 "include/trace/events/evl.h" 3 4
38
# 799 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_inband_sysentry(void (*cb)(void *__data, unsigned int nr)) { } static inline bool trace_evl_inband_sysentry_enabled(void) { return false; }


 ;

static inline void trace_evl_inband_sysexit(long result) { } static inline void trace_evl_inband_sysexit_rcuidle(long result) { } static inline int register_trace_evl_inband_sysexit(void (*probe)(void *__data, long result), void *data) { return -
# 804 "include/trace/events/evl.h" 3 4
38
# 804 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_inband_sysexit(void (*probe)(void *__data, long result), void *data) { return -
# 804 "include/trace/events/evl.h" 3 4
38
# 804 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_inband_sysexit(void (*cb)(void *__data, long result)) { } static inline bool trace_evl_inband_sysexit_enabled(void) { return false; }


 ;

static inline void trace_evl_thread_setsched(struct evl_thread *thread, const struct evl_sched_attrs *attrs) { } static inline void trace_evl_thread_setsched_rcuidle(struct evl_thread *thread, const struct evl_sched_attrs *attrs) { } static inline int register_trace_evl_thread_setsched(void (*probe)(void *__data, struct evl_thread *thread, const struct evl_sched_attrs *attrs), void *data) { return -
# 809 "include/trace/events/evl.h" 3 4
38
# 809 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_setsched(void (*probe)(void *__data, struct evl_thread *thread, const struct evl_sched_attrs *attrs), void *data) { return -
# 809 "include/trace/events/evl.h" 3 4
38
# 809 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_setsched(void (*cb)(void *__data, struct evl_thread *thread, const struct evl_sched_attrs *attrs)) { } static inline bool trace_evl_thread_setsched_enabled(void) { return false; }



 ;

static inline void trace_evl_thread_getsched(struct evl_thread *thread, const struct evl_sched_attrs *attrs) { } static inline void trace_evl_thread_getsched_rcuidle(struct evl_thread *thread, const struct evl_sched_attrs *attrs) { } static inline int register_trace_evl_thread_getsched(void (*probe)(void *__data, struct evl_thread *thread, const struct evl_sched_attrs *attrs), void *data) { return -
# 815 "include/trace/events/evl.h" 3 4
38
# 815 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_getsched(void (*probe)(void *__data, struct evl_thread *thread, const struct evl_sched_attrs *attrs), void *data) { return -
# 815 "include/trace/events/evl.h" 3 4
38
# 815 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_getsched(void (*cb)(void *__data, struct evl_thread *thread, const struct evl_sched_attrs *attrs)) { } static inline bool trace_evl_thread_getsched_enabled(void) { return false; }



 ;
# 829 "include/trace/events/evl.h"
static inline void trace_evl_thread_update_mode(struct evl_thread *thread, int mode, bool set) { } static inline void trace_evl_thread_update_mode_rcuidle(struct evl_thread *thread, int mode, bool set) { } static inline int register_trace_evl_thread_update_mode(void (*probe)(void *__data, struct evl_thread *thread, int mode, bool set), void *data) { return -
# 829 "include/trace/events/evl.h" 3 4
38
# 829 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_thread_update_mode(void (*probe)(void *__data, struct evl_thread *thread, int mode, bool set), void *data) { return -
# 829 "include/trace/events/evl.h" 3 4
38
# 829 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_thread_update_mode(void (*cb)(void *__data, struct evl_thread *thread, int mode, bool set)) { } static inline bool trace_evl_thread_update_mode_enabled(void) { return false; }
# 846 "include/trace/events/evl.h"
 ;

static inline void trace_evl_clock_getres(struct evl_clock *clock, const struct timespec64 *res) { } static inline void trace_evl_clock_getres_rcuidle(struct evl_clock *clock, const struct timespec64 *res) { } static inline int register_trace_evl_clock_getres(void (*probe)(void *__data, struct evl_clock *clock, const struct timespec64 *res), void *data) { return -
# 848 "include/trace/events/evl.h" 3 4
38
# 848 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_clock_getres(void (*probe)(void *__data, struct evl_clock *clock, const struct timespec64 *res), void *data) { return -
# 848 "include/trace/events/evl.h" 3 4
38
# 848 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_clock_getres(void (*cb)(void *__data, struct evl_clock *clock, const struct timespec64 *res)) { } static inline bool trace_evl_clock_getres_enabled(void) { return false; }


 ;

static inline void trace_evl_clock_gettime(struct evl_clock *clock, const struct timespec64 *time) { } static inline void trace_evl_clock_gettime_rcuidle(struct evl_clock *clock, const struct timespec64 *time) { } static inline int register_trace_evl_clock_gettime(void (*probe)(void *__data, struct evl_clock *clock, const struct timespec64 *time), void *data) { return -
# 853 "include/trace/events/evl.h" 3 4
38
# 853 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_clock_gettime(void (*probe)(void *__data, struct evl_clock *clock, const struct timespec64 *time), void *data) { return -
# 853 "include/trace/events/evl.h" 3 4
38
# 853 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_clock_gettime(void (*cb)(void *__data, struct evl_clock *clock, const struct timespec64 *time)) { } static inline bool trace_evl_clock_gettime_enabled(void) { return false; }


 ;

static inline void trace_evl_clock_settime(struct evl_clock *clock, const struct timespec64 *time) { } static inline void trace_evl_clock_settime_rcuidle(struct evl_clock *clock, const struct timespec64 *time) { } static inline int register_trace_evl_clock_settime(void (*probe)(void *__data, struct evl_clock *clock, const struct timespec64 *time), void *data) { return -
# 858 "include/trace/events/evl.h" 3 4
38
# 858 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_clock_settime(void (*probe)(void *__data, struct evl_clock *clock, const struct timespec64 *time), void *data) { return -
# 858 "include/trace/events/evl.h" 3 4
38
# 858 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_clock_settime(void (*cb)(void *__data, struct evl_clock *clock, const struct timespec64 *time)) { } static inline bool trace_evl_clock_settime_enabled(void) { return false; }


 ;

static inline void trace_evl_clock_adjtime(struct evl_clock *clock, struct __kernel_timex *tx) { } static inline void trace_evl_clock_adjtime_rcuidle(struct evl_clock *clock, struct __kernel_timex *tx) { } static inline int register_trace_evl_clock_adjtime(void (*probe)(void *__data, struct evl_clock *clock, struct __kernel_timex *tx), void *data) { return -
# 863 "include/trace/events/evl.h" 3 4
38
# 863 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_clock_adjtime(void (*probe)(void *__data, struct evl_clock *clock, struct __kernel_timex *tx), void *data) { return -
# 863 "include/trace/events/evl.h" 3 4
38
# 863 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_clock_adjtime(void (*cb)(void *__data, struct evl_clock *clock, struct __kernel_timex *tx)) { } static inline bool trace_evl_clock_adjtime_enabled(void) { return false; }
# 881 "include/trace/events/evl.h"
 ;





static inline void trace_evl_register_clock(const char *name) { } static inline void trace_evl_register_clock_rcuidle(const char *name) { } static inline int register_trace_evl_register_clock(void (*probe)(void *__data, const char *name), void *data) { return -
# 887 "include/trace/events/evl.h" 3 4
38
# 887 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_register_clock(void (*probe)(void *__data, const char *name), void *data) { return -
# 887 "include/trace/events/evl.h" 3 4
38
# 887 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_register_clock(void (*cb)(void *__data, const char *name)) { } static inline bool trace_evl_register_clock_enabled(void) { return false; }


 ;

static inline void trace_evl_unregister_clock(const char *name) { } static inline void trace_evl_unregister_clock_rcuidle(const char *name) { } static inline int register_trace_evl_unregister_clock(void (*probe)(void *__data, const char *name), void *data) { return -
# 892 "include/trace/events/evl.h" 3 4
38
# 892 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_unregister_clock(void (*probe)(void *__data, const char *name), void *data) { return -
# 892 "include/trace/events/evl.h" 3 4
38
# 892 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_unregister_clock(void (*cb)(void *__data, const char *name)) { } static inline bool trace_evl_unregister_clock_enabled(void) { return false; }


 ;

static inline void trace_evl_trace(const char *msg) { } static inline void trace_evl_trace_rcuidle(const char *msg) { } static inline int register_trace_evl_trace(void (*probe)(void *__data, const char *msg), void *data) { return -
# 897 "include/trace/events/evl.h" 3 4
38
# 897 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_trace(void (*probe)(void *__data, const char *msg), void *data) { return -
# 897 "include/trace/events/evl.h" 3 4
38
# 897 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_trace(void (*cb)(void *__data, const char *msg)) { } static inline bool trace_evl_trace_enabled(void) { return false; }
# 907 "include/trace/events/evl.h"
 ;

static inline void trace_evl_latspot(int latmax_ns) { } static inline void trace_evl_latspot_rcuidle(int latmax_ns) { } static inline int register_trace_evl_latspot(void (*probe)(void *__data, int latmax_ns), void *data) { return -
# 909 "include/trace/events/evl.h" 3 4
38
# 909 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_latspot(void (*probe)(void *__data, int latmax_ns), void *data) { return -
# 909 "include/trace/events/evl.h" 3 4
38
# 909 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_latspot(void (*cb)(void *__data, int latmax_ns)) { } static inline bool trace_evl_latspot_enabled(void) { return false; }
# 921 "include/trace/events/evl.h"
 ;

static inline void trace_evl_fpu_corrupt(unsigned int fp_val) { } static inline void trace_evl_fpu_corrupt_rcuidle(unsigned int fp_val) { } static inline int register_trace_evl_fpu_corrupt(void (*probe)(void *__data, unsigned int fp_val), void *data) { return -
# 923 "include/trace/events/evl.h" 3 4
38
# 923 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_fpu_corrupt(void (*probe)(void *__data, unsigned int fp_val), void *data) { return -
# 923 "include/trace/events/evl.h" 3 4
38
# 923 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_fpu_corrupt(void (*cb)(void *__data, unsigned int fp_val)) { } static inline bool trace_evl_fpu_corrupt_enabled(void) { return false; }
# 934 "include/trace/events/evl.h"
 ;


static inline void trace_evl_trigger(const char *issuer) { } static inline void trace_evl_trigger_rcuidle(const char *issuer) { } static inline int register_trace_evl_trigger(void (*probe)(void *__data, const char *issuer), void *data) { return -
# 937 "include/trace/events/evl.h" 3 4
38
# 937 "include/trace/events/evl.h"
; } static inline int unregister_trace_evl_trigger(void (*probe)(void *__data, const char *issuer), void *data) { return -
# 937 "include/trace/events/evl.h" 3 4
38
# 937 "include/trace/events/evl.h"
; } static inline void check_trace_callback_type_evl_trigger(void (*cb)(void *__data, const char *issuer)) { } static inline bool trace_evl_trigger_enabled(void) { return false; }
# 947 "include/trace/events/evl.h"
 ;




# 1 "include/trace/define_trace.h" 1
# 95 "include/trace/define_trace.h"
# 1 "include/trace/events/evl.h" 1
# 18 "include/trace/events/evl.h"
# 1 "include/linux/tracepoint.h" 1
# 19 "include/trace/events/evl.h" 2




struct evl_rq;
struct evl_thread;
struct evl_sched_attrs;
struct evl_init_thread_attr;
struct evl_mutex;
struct evl_clock;


# 48 "include/trace/events/evl.h"
 ;


# 67 "include/trace/events/evl.h"
 ;


# 82 "include/trace/events/evl.h"
 ;


# 97 "include/trace/events/evl.h"
 ;


# 112 "include/trace/events/evl.h"
 ;








# 133 "include/trace/events/evl.h"
 ;


# 148 "include/trace/events/evl.h"
 ;
# 158 "include/trace/events/evl.h"
const char *evl_trace_sched_attrs(struct trace_seq *seq,
      struct evl_sched_attrs *attrs);


# 186 "include/trace/events/evl.h"
 ;


# 206 "include/trace/events/evl.h"
 ;


# 218 "include/trace/events/evl.h"
 ;


# 236 "include/trace/events/evl.h"
 ;




 ;




 ;


# 264 "include/trace/events/evl.h"
 ;


# 294 "include/trace/events/evl.h"
 ;


# 312 "include/trace/events/evl.h"
 ;


# 341 "include/trace/events/evl.h"
 ;


# 373 "include/trace/events/evl.h"
 ;


# 396 "include/trace/events/evl.h"
 ;


# 416 "include/trace/events/evl.h"
 ;


# 439 "include/trace/events/evl.h"
 ;


# 457 "include/trace/events/evl.h"
 ;


# 477 "include/trace/events/evl.h"
 ;




 ;




 ;




 ;




 ;




 ;


# 522 "include/trace/events/evl.h"
 ;




 ;




 ;




 ;
# 552 "include/trace/events/evl.h"

# 565 "include/trace/events/evl.h"
 ;




 ;




 ;


# 595 "include/trace/events/evl.h"
 ;




 ;


# 618 "include/trace/events/evl.h"
 ;


# 641 "include/trace/events/evl.h"
 ;




 ;




 ;







# 678 "include/trace/events/evl.h"
 ;


# 702 "include/trace/events/evl.h"
 ;


# 729 "include/trace/events/evl.h"
 ;




 ;




 ;




 ;




 ;




 ;




 ;




 ;




 ;




 ;
# 789 "include/trace/events/evl.h"



 ;




 ;




 ;




 ;





 ;





 ;
# 829 "include/trace/events/evl.h"

# 846 "include/trace/events/evl.h"
 ;




 ;




 ;




 ;


# 881 "include/trace/events/evl.h"
 ;








 ;




 ;


# 907 "include/trace/events/evl.h"
 ;


# 921 "include/trace/events/evl.h"
 ;


# 934 "include/trace/events/evl.h"
 ;



# 947 "include/trace/events/evl.h"
 ;




# 1 "include/trace/define_trace.h" 1
# 952 "include/trace/events/evl.h" 2
# 96 "include/trace/define_trace.h" 2
# 952 "include/trace/events/evl.h" 2
# 21 "kernel/evl/init.c" 2

static char *oobcpus_arg;
static inline char * __attribute__((__unused__)) *__check_oobcpus(void) { return(&(oobcpus_arg)); }; static const char __param_str_oobcpus[] = KBUILD_MODNAME "." "oobcpus"; static struct kernel_param const __param_oobcpus __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_oobcpus, ((struct module *)0), &param_ops_charp, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { &oobcpus_arg } }; static const char __UNIQUE_ID(oobcpustype)[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = KBUILD_MODNAME "." "parmtype" "=" "oobcpus" ":" "charp";

static char init_state_arg[16] = "enabled";
static const struct kparam_string __param_string_state = { sizeof(init_state_arg), init_state_arg }; static const char __param_str_state[] = KBUILD_MODNAME "." "state"; static struct kernel_param const __param_state __attribute__((__used__)) __attribute__((__section__("__param"))) __attribute__((__aligned__(__alignof__(struct kernel_param)))) = { __param_str_state, ((struct module *)0), &param_ops_string, (((int)(sizeof(struct { int:(-!!((0444) < 0)); }))) + ((int)(sizeof(struct { int:(-!!((0444) > 0777)); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 4) < (((0444) >> 3) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 3) & 4) < ((0444) & 4))); }))) + ((int)(sizeof(struct { int:(-!!((((0444) >> 6) & 2) < (((0444) >> 3) & 2))); }))) + ((int)(sizeof(struct { int:(-!!((0444) & 2)); }))) + (0444)), -1, 0, { .str = &__param_string_state } }; static const char __UNIQUE_ID(statetype)[] __attribute__((__used__)) __attribute__((__section__(".modinfo"))) __attribute__((__aligned__(1))) = KBUILD_MODNAME "." "parmtype" "=" "state" ":" "string";

struct cpumask evl_oob_cpus;
;

 __attribute__((section(".data..percpu" ""))) __typeof__(struct evl_machine_cpudata) evl_machine_cpudata;
;
# 51 "kernel/evl/init.c"
static struct {
 const char *label;
 enum evl_run_states state;
} init_states[] __attribute__((__section__(".init.data"))) = {
 { "disabled", EVL_STATE_DISABLED },
 { "stopped", EVL_STATE_STOPPED },
 { "enabled", EVL_STATE_WARMUP },
};

static void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_init_state(void)
{
 static char warn_bad_state[] __attribute__((__section__(".init.data"))) =
  "\001" "4" "EVL: " "invalid init state '%s'\n";
 int n;

 for (n = 0; n < (sizeof(init_states) / sizeof((init_states)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((init_states)), typeof(&(init_states)[0])))); })))); n++)
  if (strcmp(init_states[n].label, init_state_arg) == 0) {
   set_evl_state(init_states[n].state);
   return;
  }

 printk(warn_bad_state, init_state_arg);
}
# 84 "kernel/evl/init.c"
static __attribute__((__section__(".init.text"))) __attribute__((__cold__)) int init_core(void)
{
 int ret;

 enable_oob_stage("EVL");

 ret = evl_init_memory();
 if (ret)
  goto cleanup_stage;

 ret = evl_early_init_factories();
 if (ret)
  goto cleanup_memory;

 ret = evl_clock_init();
 if (ret)
  goto cleanup_early_factories;

 ret = evl_init_sched();
 if (ret)
  goto cleanup_clock;





 if (evl_is_warming()) {
  ret = evl_enable_tick();
  if (ret)
   goto cleanup_sched;
  set_evl_state(EVL_STATE_RUNNING);
 }

 ret = dovetail_start();
 if (ret)
  goto cleanup_tick;






 ret = evl_late_init_factories();
 if (ret)
  goto cleanup_dovetail;





 ret = evl_net_init();
 if (ret)
  goto cleanup_late_factories;

 return 0;

cleanup_late_factories:
 evl_late_cleanup_factories();
cleanup_dovetail:
 dovetail_stop();
cleanup_tick:
 if (evl_is_running())
  evl_disable_tick();
cleanup_sched:
 evl_cleanup_sched();
cleanup_clock:
 evl_clock_cleanup();
cleanup_early_factories:
 evl_early_cleanup_factories();
cleanup_memory:
 evl_cleanup_memory();
cleanup_stage:
 disable_oob_stage();
 set_evl_state(EVL_STATE_STOPPED);

 return ret;
}

static int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) evl_init(void)
{
 int ret;

 setup_init_state();

 if (!evl_is_enabled()) {
  printk("\001" "4" "EVL: " "disabled on kernel command line\n");
  return 0;
 }






 if (oobcpus_arg && *oobcpus_arg) {
  if (cpulist_parse(oobcpus_arg, &evl_oob_cpus)) {
   printk("\001" "4" "EVL: " "invalid set of OOB cpus\n");
   cpumask_copy(&evl_oob_cpus, ((const struct cpumask *)&__cpu_online_mask));
  }
 } else
  cpumask_copy(&evl_oob_cpus, ((const struct cpumask *)&__cpu_online_mask));


 evl_cpu_affinity = evl_oob_cpus;

 ret = ({ int __ret = init_core(); if (__ret) evl_warn_init("init_core()", 0, __ret); __ret; });
 if (ret)
  goto fail;

 printk("\001" "6" "EVL: " "core started %s%s%s\n",
  "",
  "",
  ({ evl_is_stopped() ? "[STOPPED]" : ""; }));

 return 0;
fail:
 set_evl_state(EVL_STATE_DISABLED);

 printk("\001" "3" "EVL: " "disabling.\n");

 return ret;
}
static initcall_t __initcall____KBUILD_MODNAME__278_206_evl_init6 __attribute__((__used__)) __attribute__((__section__(".initcall6" ".init"))) = evl_init;;
